
bin\Debug\Week5_rechtRijden.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000007c6  0000085a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  0000085a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000012  00000000  00000000  0000085d  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 000000d8  00000000  00000000  000008b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001066  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000db0  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000a45  00000000  00000000  0000279e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000210  00000000  00000000  000031e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000062c  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000001e0  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000003d  00000000  00000000  00003c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_13>
  38:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_14>
  3c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_15>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_21>
  58:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__vector_22>
  5c:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_23>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  bc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  cc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  dc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  e0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  f8:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <init>:
#define Led_Rechts_AAN (PORTB &= ~(1<<PB5))
#define Led_Rechts_UIT (PORTB |= (1<<PB5))


void init (void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62

00000108 <.Loc.1>:
    init_MotorLinks();
 108:	0e 94 80 02 	call	0x500	; 0x500 <init_MotorLinks>

0000010c <.Loc.2>:
    init_MotorRechts();
 10c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <init_MotorRechts>

00000110 <.Loc.3>:
    DDRB |= (1<<PB6);     // LED pin output
 110:	84 e2       	ldi	r24, 0x24	; 36
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	20 81       	ld	r18, Z
 118:	84 e2       	ldi	r24, 0x24	; 36
 11a:	90 e0       	ldi	r25, 0x00	; 0

0000011c <.Loc.4>:
 11c:	20 64       	ori	r18, 0x40	; 64
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18

00000122 <.Loc.5>:
    PORTB |= (1<<PB6);      // LED off
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	20 81       	ld	r18, Z
 12a:	85 e2       	ldi	r24, 0x25	; 37
 12c:	90 e0       	ldi	r25, 0x00	; 0

0000012e <.Loc.6>:
 12e:	20 64       	ori	r18, 0x40	; 64
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18

00000134 <.Loc.7>:
    DDRB |= (1<<PB5);     // LED pin output
 134:	84 e2       	ldi	r24, 0x24	; 36
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	20 81       	ld	r18, Z
 13c:	84 e2       	ldi	r24, 0x24	; 36
 13e:	90 e0       	ldi	r25, 0x00	; 0

00000140 <.Loc.8>:
 140:	20 62       	ori	r18, 0x20	; 32
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18

00000146 <.Loc.9>:
    PORTB |= (1<<PB5);      // LED off
 146:	85 e2       	ldi	r24, 0x25	; 37
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	20 81       	ld	r18, Z
 14e:	85 e2       	ldi	r24, 0x25	; 37
 150:	90 e0       	ldi	r25, 0x00	; 0

00000152 <.Loc.10>:
 152:	20 62       	ori	r18, 0x20	; 32
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18

00000158 <.Loc.11>:
    Led_Links_AAN;
 158:	85 e2       	ldi	r24, 0x25	; 37
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	20 81       	ld	r18, Z
 160:	85 e2       	ldi	r24, 0x25	; 37
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	2f 7b       	andi	r18, 0xBF	; 191
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18

0000016a <.Loc.12>:
    Led_Rechts_AAN;
 16a:	85 e2       	ldi	r24, 0x25	; 37
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	20 81       	ld	r18, Z
 172:	85 e2       	ldi	r24, 0x25	; 37
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2f 7d       	andi	r18, 0xDF	; 223
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18

0000017c <.Loc.13>:
}
 17c:	00 00       	nop
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <initTimer>:

void initTimer (void)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62

0000018c <.Loc.15>:
    // Timer 5 is de systeemtimer (overflow)
    TCCR5A = 0;
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	91 e0       	ldi	r25, 0x01	; 1

00000190 <.Loc.16>:
 190:	fc 01       	movw	r30, r24
 192:	10 82       	st	Z, r1

00000194 <.Loc.17>:
    // Timer 8 kan niet ver genoeg tellen!
    // 8 bit timer 16000000 Hz / 64 / 256 = 976.56 Hz
    // 16 bit timer 16000000 Hz / 64 / 65.536 = 3.906,25 Hz
    // 16 bit timer 16000000 Hz / 65.536 = 244 Hz
    // start timer 0, prescaler = 64
    TCCR5B = TCCR5B | (0 << CS51) | (1 << CS50); //244,14 Hz
 194:	81 e2       	ldi	r24, 0x21	; 33
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	fc 01       	movw	r30, r24
 19a:	20 81       	ld	r18, Z

0000019c <.Loc.18>:
 19c:	81 e2       	ldi	r24, 0x21	; 33
 19e:	91 e0       	ldi	r25, 0x01	; 1

000001a0 <.Loc.19>:
 1a0:	21 60       	ori	r18, 0x01	; 1
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18

000001a6 <.Loc.20>:
}
 1a6:	00 00       	nop
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <main>:

int main(void)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <L0^A>

000001b4 <L0^A>:
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <L0^A>

000001b6 <L0^A>:
 1b6:	0f 92       	push	r0
 1b8:	0f 92       	push	r0
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62

000001be <.Loc.22>:
    init();
 1be:	0e 94 80 00 	call	0x100	; 0x100 <init>

000001c2 <.Loc.23>:
    initTimer();
 1c2:	0e 94 c2 00 	call	0x184	; 0x184 <initTimer>

000001c6 <.Loc.24>:
    int state = 0;
 1c6:	1a 82       	std	Y+2, r1	; 0x02
 1c8:	19 82       	std	Y+1, r1	; 0x01

000001ca <.Loc.25>:
    int teller = 0;
 1ca:	1c 82       	std	Y+4, r1	; 0x04
 1cc:	1b 82       	std	Y+3, r1	; 0x03

000001ce <.Loc.26>:
    int timer = 0;
 1ce:	1e 82       	std	Y+6, r1	; 0x06
 1d0:	1d 82       	std	Y+5, r1	; 0x05

000001d2 <.Loc.27>:
    int knopje_1 = 1;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	98 87       	std	Y+8, r25	; 0x08
 1d8:	8f 83       	std	Y+7, r24	; 0x07

000001da <.L9>:

    while(1)
    {

        if (TIFR5 & (1<<TOV5))  //elke keer als de timer overflowt
 1da:	8a e3       	ldi	r24, 0x3A	; 58
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	fc 01       	movw	r30, r24
 1e0:	80 81       	ld	r24, Z

000001e2 <.Loc.29>:
 1e2:	88 2f       	mov	r24, r24
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	81 70       	andi	r24, 0x01	; 1
 1e8:	99 27       	eor	r25, r25

000001ea <.Loc.30>:
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	51 f0       	breq	.+20     	; 0x202 <.L4>

000001ee <.Loc.31>:
        {
            // Timer overflow, +/- 1 ms voorbij
            TIFR5 = (1<<TOV5);  // Wis flag
 1ee:	8a e3       	ldi	r24, 0x3A	; 58
 1f0:	90 e0       	ldi	r25, 0x00	; 0

000001f2 <.Loc.32>:
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18

000001f8 <.Loc.33>:
            teller++;           //Verhoog teller met 1 iedere overflow (244Hz)
 1f8:	8b 81       	ldd	r24, Y+3	; 0x03
 1fa:	9c 81       	ldd	r25, Y+4	; 0x04
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	9c 83       	std	Y+4, r25	; 0x04
 200:	8b 83       	std	Y+3, r24	; 0x03

00000202 <.L4>:
        }
        //rijd rechtdoor (50%vermogen)
        if(state==0 && knopje_1)        //als state = 0 en de startknop is ingedrukt
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	9a 81       	ldd	r25, Y+2	; 0x02
 206:	00 97       	sbiw	r24, 0x00	; 0
 208:	59 f5       	brne	.+86     	; 0x260 <.L5>

0000020a <.Loc.35>:
 20a:	8f 81       	ldd	r24, Y+7	; 0x07
 20c:	98 85       	ldd	r25, Y+8	; 0x08
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	39 f1       	breq	.+78     	; 0x260 <.L5>

00000212 <.LBB2>:
        {
            Led_Links_AAN;
 212:	85 e2       	ldi	r24, 0x25	; 37
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	20 81       	ld	r18, Z
 21a:	85 e2       	ldi	r24, 0x25	; 37
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	2f 7b       	andi	r18, 0xBF	; 191
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18

00000224 <.Loc.37>:
            Led_Rechts_AAN;
 224:	85 e2       	ldi	r24, 0x25	; 37
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	20 81       	ld	r18, Z
 22c:	85 e2       	ldi	r24, 0x25	; 37
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	2f 7d       	andi	r18, 0xDF	; 223
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18

00000236 <.Loc.38>:
            MotorLinks_set_percentage(45);
 236:	8d e2       	ldi	r24, 0x2D	; 45
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 c3 02 	call	0x586	; 0x586 <MotorLinks_set_percentage>

0000023e <.Loc.39>:
            MotorRechts_set_percentage(50);
 23e:	82 e3       	ldi	r24, 0x32	; 50
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 97 03 	call	0x72e	; 0x72e <MotorRechts_set_percentage>

00000246 <.Loc.40>:
            if (teller > (5000/4))            //Hoeveel ms/4 het duurt voordat het naar de volgende staat gaat
 246:	8b 81       	ldd	r24, Y+3	; 0x03
 248:	9c 81       	ldd	r25, Y+4	; 0x04
 24a:	82 3e       	cpi	r24, 0xE2	; 226
 24c:	f4 e0       	ldi	r31, 0x04	; 4
 24e:	9f 07       	cpc	r25, r31
 250:	39 f0       	breq	.+14     	; 0x260 <.L5>
 252:	34 f0       	brlt	.+12     	; 0x260 <.L5>

00000254 <.Loc.41>:
            {
                state = 1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	9a 83       	std	Y+2, r25	; 0x02
 25a:	89 83       	std	Y+1, r24	; 0x01

0000025c <.Loc.42>:
                teller = 0;
 25c:	1c 82       	std	Y+4, r1	; 0x04
 25e:	1b 82       	std	Y+3, r1	; 0x03

00000260 <.L5>:
            }
        }
        //draai linksom volle snelheid
        if(state==1)
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	9a 81       	ldd	r25, Y+2	; 0x02
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	91 05       	cpc	r25, r1
 268:	39 f5       	brne	.+78     	; 0x2b8 <.L6>

0000026a <.LBB3>:
        {
            Led_Links_UIT;
 26a:	85 e2       	ldi	r24, 0x25	; 37
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	fc 01       	movw	r30, r24
 270:	20 81       	ld	r18, Z
 272:	85 e2       	ldi	r24, 0x25	; 37
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	20 64       	ori	r18, 0x40	; 64
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18

0000027c <.Loc.45>:
            Led_Rechts_AAN;
 27c:	85 e2       	ldi	r24, 0x25	; 37
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	20 81       	ld	r18, Z
 284:	85 e2       	ldi	r24, 0x25	; 37
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	2f 7d       	andi	r18, 0xDF	; 223
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18

0000028e <.Loc.46>:
            MotorLinks_set_percentage(-50);
 28e:	8e ec       	ldi	r24, 0xCE	; 206
 290:	9f ef       	ldi	r25, 0xFF	; 255
 292:	0e 94 c3 02 	call	0x586	; 0x586 <MotorLinks_set_percentage>

00000296 <.Loc.47>:
            MotorRechts_set_percentage(50);
 296:	82 e3       	ldi	r24, 0x32	; 50
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 97 03 	call	0x72e	; 0x72e <MotorRechts_set_percentage>

0000029e <.Loc.48>:
            if (teller > (2000/4))            // hoeveel seconden wachten voordat state veranderd
 29e:	8b 81       	ldd	r24, Y+3	; 0x03
 2a0:	9c 81       	ldd	r25, Y+4	; 0x04
 2a2:	84 3f       	cpi	r24, 0xF4	; 244
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	9f 07       	cpc	r25, r31
 2a8:	39 f0       	breq	.+14     	; 0x2b8 <.L6>
 2aa:	34 f0       	brlt	.+12     	; 0x2b8 <.L6>

000002ac <.Loc.49>:
            {
                state = 2;
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	9a 83       	std	Y+2, r25	; 0x02
 2b2:	89 83       	std	Y+1, r24	; 0x01

000002b4 <.Loc.50>:
                teller = 0;
 2b4:	1c 82       	std	Y+4, r1	; 0x04
 2b6:	1b 82       	std	Y+3, r1	; 0x03

000002b8 <.L6>:
            }
        }
        //rijd rechtdoor (50%vermogen)
        if(state==2)
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	9a 81       	ldd	r25, Y+2	; 0x02
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	91 05       	cpc	r25, r1
 2c0:	39 f5       	brne	.+78     	; 0x310 <.L7>

000002c2 <.LBB4>:
        {
            Led_Links_AAN;
 2c2:	85 e2       	ldi	r24, 0x25	; 37
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 81       	ld	r18, Z
 2ca:	85 e2       	ldi	r24, 0x25	; 37
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	2f 7b       	andi	r18, 0xBF	; 191
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18

000002d4 <.Loc.53>:
            Led_Rechts_AAN;
 2d4:	85 e2       	ldi	r24, 0x25	; 37
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	20 81       	ld	r18, Z
 2dc:	85 e2       	ldi	r24, 0x25	; 37
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	2f 7d       	andi	r18, 0xDF	; 223
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18

000002e6 <.Loc.54>:
            MotorLinks_set_percentage(50);
 2e6:	82 e3       	ldi	r24, 0x32	; 50
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 c3 02 	call	0x586	; 0x586 <MotorLinks_set_percentage>

000002ee <.Loc.55>:
            MotorRechts_set_percentage(50);
 2ee:	82 e3       	ldi	r24, 0x32	; 50
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 97 03 	call	0x72e	; 0x72e <MotorRechts_set_percentage>

000002f6 <.Loc.56>:
            if (teller > (5000/4))            // hoeveel seconden wachten voordat state veranderd
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	9c 81       	ldd	r25, Y+4	; 0x04
 2fa:	82 3e       	cpi	r24, 0xE2	; 226
 2fc:	f4 e0       	ldi	r31, 0x04	; 4
 2fe:	9f 07       	cpc	r25, r31
 300:	39 f0       	breq	.+14     	; 0x310 <.L7>
 302:	34 f0       	brlt	.+12     	; 0x310 <.L7>

00000304 <.Loc.57>:
            {
                state = 3;
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	9a 83       	std	Y+2, r25	; 0x02
 30a:	89 83       	std	Y+1, r24	; 0x01

0000030c <.Loc.58>:
                teller = 0;
 30c:	1c 82       	std	Y+4, r1	; 0x04
 30e:	1b 82       	std	Y+3, r1	; 0x03

00000310 <.L7>:
            }
        }
        //draai rechtsom volle snelheid
        if(state==3)
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	9a 81       	ldd	r25, Y+2	; 0x02
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	91 05       	cpc	r25, r1
 318:	09 f0       	breq	.+2      	; 0x31c <.LBB5>

0000031a <L0^A>:
 31a:	5f cf       	rjmp	.-322    	; 0x1da <.L9>

0000031c <.LBB5>:
        {
            Led_Links_AAN;
 31c:	85 e2       	ldi	r24, 0x25	; 37
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	fc 01       	movw	r30, r24
 322:	20 81       	ld	r18, Z
 324:	85 e2       	ldi	r24, 0x25	; 37
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	2f 7b       	andi	r18, 0xBF	; 191
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18

0000032e <.Loc.61>:
            Led_Rechts_UIT;
 32e:	85 e2       	ldi	r24, 0x25	; 37
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	fc 01       	movw	r30, r24
 334:	20 81       	ld	r18, Z
 336:	85 e2       	ldi	r24, 0x25	; 37
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	20 62       	ori	r18, 0x20	; 32
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18

00000340 <.Loc.62>:
            MotorLinks_set_percentage(-100);
 340:	8c e9       	ldi	r24, 0x9C	; 156
 342:	9f ef       	ldi	r25, 0xFF	; 255
 344:	0e 94 c3 02 	call	0x586	; 0x586 <MotorLinks_set_percentage>

00000348 <.Loc.63>:
            MotorRechts_set_percentage(100);
 348:	84 e6       	ldi	r24, 0x64	; 100
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 97 03 	call	0x72e	; 0x72e <MotorRechts_set_percentage>

00000350 <.Loc.64>:
            if (teller > (2000/4))            // hoeveel seconden wachten voordat state veranderd
 350:	8b 81       	ldd	r24, Y+3	; 0x03
 352:	9c 81       	ldd	r25, Y+4	; 0x04
 354:	84 3f       	cpi	r24, 0xF4	; 244
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	9f 07       	cpc	r25, r31
 35a:	09 f0       	breq	.+2      	; 0x35e <L0^A>

0000035c <L0^A>:
 35c:	0c f4       	brge	.+2      	; 0x360 <.Loc.65>

0000035e <L0^A>:
 35e:	3d cf       	rjmp	.-390    	; 0x1da <.L9>

00000360 <.Loc.65>:
            {
                state = 0;
 360:	1a 82       	std	Y+2, r1	; 0x02
 362:	19 82       	std	Y+1, r1	; 0x01

00000364 <.Loc.66>:
                teller = 0;
 364:	1c 82       	std	Y+4, r1	; 0x04
 366:	1b 82       	std	Y+3, r1	; 0x03

00000368 <.LBE5>:
        if (TIFR5 & (1<<TOV5))  //elke keer als de timer overflowt
 368:	38 cf       	rjmp	.-400    	; 0x1da <.L9>

0000036a <__vector_23>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "MotorLinks.h"

ISR(TIMER0_OVF_vect)
{
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	0b b6       	in	r0, 0x3b	; 59
 376:	0f 92       	push	r0
 378:	2f 93       	push	r18
 37a:	8f 93       	push	r24
 37c:	9f 93       	push	r25
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62

0000038a <.Loc.1>:
	if (OCR0A == 0 && OCR0B == 0)
 38a:	87 e4       	ldi	r24, 0x47	; 71
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	fc 01       	movw	r30, r24
 390:	80 81       	ld	r24, Z

00000392 <.Loc.2>:
 392:	88 23       	and	r24, r24
 394:	c9 f4       	brne	.+50     	; 0x3c8 <.L2>

00000396 <.Loc.3>:
 396:	88 e4       	ldi	r24, 0x48	; 72
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	fc 01       	movw	r30, r24
 39c:	80 81       	ld	r24, Z

0000039e <.Loc.4>:
 39e:	88 23       	and	r24, r24
 3a0:	99 f4       	brne	.+38     	; 0x3c8 <.L2>

000003a2 <.Loc.5>:
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
 3a2:	8b e0       	ldi	r24, 0x0B	; 11
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 81       	ld	r18, Z

000003aa <.Loc.6>:
 3aa:	8b e0       	ldi	r24, 0x0B	; 11
 3ac:	91 e0       	ldi	r25, 0x01	; 1

000003ae <.Loc.7>:
 3ae:	2e 7f       	andi	r18, 0xFE	; 254
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 83       	st	Z, r18

000003b4 <.Loc.8>:
		PORT_LPWM &= ~(1<<PIN_LPWM);
 3b4:	8b e0       	ldi	r24, 0x0B	; 11
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 81       	ld	r18, Z

000003bc <.Loc.9>:
 3bc:	8b e0       	ldi	r24, 0x0B	; 11
 3be:	91 e0       	ldi	r25, 0x01	; 1

000003c0 <.Loc.10>:
 3c0:	2d 7f       	andi	r18, 0xFD	; 253
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 83       	st	Z, r18

000003c6 <.Loc.11>:
	else if (OCR0B != 0)
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
		PORT_LPWM |= (1<<PIN_LPWM);
	}
}
 3c6:	31 c0       	rjmp	.+98     	; 0x42a <.L5>

000003c8 <.L2>:
	else if (OCR0A != 0)
 3c8:	87 e4       	ldi	r24, 0x47	; 71
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	fc 01       	movw	r30, r24
 3ce:	80 81       	ld	r24, Z

000003d0 <.Loc.13>:
 3d0:	88 23       	and	r24, r24
 3d2:	99 f0       	breq	.+38     	; 0x3fa <.L4>

000003d4 <.Loc.14>:
		PORT_LPWM &= ~(1<<PIN_LPWM);
 3d4:	8b e0       	ldi	r24, 0x0B	; 11
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	fc 01       	movw	r30, r24
 3da:	20 81       	ld	r18, Z

000003dc <.Loc.15>:
 3dc:	8b e0       	ldi	r24, 0x0B	; 11
 3de:	91 e0       	ldi	r25, 0x01	; 1

000003e0 <.Loc.16>:
 3e0:	2d 7f       	andi	r18, 0xFD	; 253
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18

000003e6 <.Loc.17>:
		PORT_RPWM |= (1<<PIN_RPWM);
 3e6:	8b e0       	ldi	r24, 0x0B	; 11
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 81       	ld	r18, Z
 3ee:	8b e0       	ldi	r24, 0x0B	; 11
 3f0:	91 e0       	ldi	r25, 0x01	; 1

000003f2 <.Loc.18>:
 3f2:	21 60       	ori	r18, 0x01	; 1
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 83       	st	Z, r18

000003f8 <.Loc.19>:
}
 3f8:	18 c0       	rjmp	.+48     	; 0x42a <.L5>

000003fa <.L4>:
	else if (OCR0B != 0)
 3fa:	88 e4       	ldi	r24, 0x48	; 72
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	fc 01       	movw	r30, r24
 400:	80 81       	ld	r24, Z

00000402 <.Loc.21>:
 402:	88 23       	and	r24, r24
 404:	91 f0       	breq	.+36     	; 0x42a <.L5>

00000406 <.Loc.22>:
		PORT_RPWM &= ~(1<<PIN_RPWM);
 406:	8b e0       	ldi	r24, 0x0B	; 11
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	fc 01       	movw	r30, r24
 40c:	20 81       	ld	r18, Z

0000040e <.Loc.23>:
 40e:	8b e0       	ldi	r24, 0x0B	; 11
 410:	91 e0       	ldi	r25, 0x01	; 1

00000412 <.Loc.24>:
 412:	2e 7f       	andi	r18, 0xFE	; 254
 414:	fc 01       	movw	r30, r24
 416:	20 83       	st	Z, r18

00000418 <.Loc.25>:
		PORT_LPWM |= (1<<PIN_LPWM);
 418:	8b e0       	ldi	r24, 0x0B	; 11
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	fc 01       	movw	r30, r24
 41e:	20 81       	ld	r18, Z
 420:	8b e0       	ldi	r24, 0x0B	; 11
 422:	91 e0       	ldi	r25, 0x01	; 1

00000424 <.Loc.26>:
 424:	22 60       	ori	r18, 0x02	; 2
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18

0000042a <.L5>:
}
 42a:	00 00       	nop
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	ff 91       	pop	r31
 432:	ef 91       	pop	r30
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	2f 91       	pop	r18
 43a:	0f 90       	pop	r0
 43c:	0b be       	out	0x3b, r0	; 59
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	0b b6       	in	r0, 0x3b	; 59
 454:	0f 92       	push	r0
 456:	2f 93       	push	r18
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62

00000468 <.Loc.29>:
	if (OCR0A != 255)
 468:	87 e4       	ldi	r24, 0x47	; 71
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	fc 01       	movw	r30, r24
 46e:	80 81       	ld	r24, Z

00000470 <.Loc.30>:
 470:	8f 3f       	cpi	r24, 0xFF	; 255
 472:	49 f0       	breq	.+18     	; 0x486 <.L8>

00000474 <.Loc.31>:
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
 474:	8b e0       	ldi	r24, 0x0B	; 11
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	fc 01       	movw	r30, r24
 47a:	20 81       	ld	r18, Z

0000047c <.Loc.32>:
 47c:	8b e0       	ldi	r24, 0x0B	; 11
 47e:	91 e0       	ldi	r25, 0x01	; 1

00000480 <.Loc.33>:
 480:	2e 7f       	andi	r18, 0xFE	; 254
 482:	fc 01       	movw	r30, r24
 484:	20 83       	st	Z, r18

00000486 <.L8>:
	}
}
 486:	00 00       	nop
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	ff 91       	pop	r31
 48e:	ef 91       	pop	r30
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0b be       	out	0x3b, r0	; 59
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <__vector_22>:

ISR(TIMER0_COMPB_vect)
{
 4a4:	1f 92       	push	r1
 4a6:	0f 92       	push	r0
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	0f 92       	push	r0
 4ac:	11 24       	eor	r1, r1
 4ae:	0b b6       	in	r0, 0x3b	; 59
 4b0:	0f 92       	push	r0
 4b2:	2f 93       	push	r18
 4b4:	8f 93       	push	r24
 4b6:	9f 93       	push	r25
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	cd b7       	in	r28, 0x3d	; 61
 4c2:	de b7       	in	r29, 0x3e	; 62

000004c4 <.Loc.36>:
	if (OCR0B != 255)
 4c4:	88 e4       	ldi	r24, 0x48	; 72
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	fc 01       	movw	r30, r24
 4ca:	80 81       	ld	r24, Z

000004cc <.Loc.37>:
 4cc:	8f 3f       	cpi	r24, 0xFF	; 255
 4ce:	49 f0       	breq	.+18     	; 0x4e2 <.L11>

000004d0 <.Loc.38>:
	{
		PORT_LPWM &= ~(1<<PIN_LPWM);
 4d0:	8b e0       	ldi	r24, 0x0B	; 11
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	fc 01       	movw	r30, r24
 4d6:	20 81       	ld	r18, Z

000004d8 <.Loc.39>:
 4d8:	8b e0       	ldi	r24, 0x0B	; 11
 4da:	91 e0       	ldi	r25, 0x01	; 1

000004dc <.Loc.40>:
 4dc:	2d 7f       	andi	r18, 0xFD	; 253
 4de:	fc 01       	movw	r30, r24
 4e0:	20 83       	st	Z, r18

000004e2 <.L11>:
	}
}
 4e2:	00 00       	nop
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	ff 91       	pop	r31
 4ea:	ef 91       	pop	r30
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	2f 91       	pop	r18
 4f2:	0f 90       	pop	r0
 4f4:	0b be       	out	0x3b, r0	; 59
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <init_MotorLinks>:

void init_MotorLinks (void)
{
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62

00000508 <.Loc.43>:
	// Config pins as output
	DDR_RPWM |= (1<<PIN_RPWM);
 508:	8a e0       	ldi	r24, 0x0A	; 10
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	fc 01       	movw	r30, r24
 50e:	20 81       	ld	r18, Z
 510:	8a e0       	ldi	r24, 0x0A	; 10
 512:	91 e0       	ldi	r25, 0x01	; 1

00000514 <.Loc.44>:
 514:	21 60       	ori	r18, 0x01	; 1
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18

0000051a <.Loc.45>:
	DDR_LPWM |= (1<<PIN_LPWM);
 51a:	8a e0       	ldi	r24, 0x0A	; 10
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	fc 01       	movw	r30, r24
 520:	20 81       	ld	r18, Z
 522:	8a e0       	ldi	r24, 0x0A	; 10
 524:	91 e0       	ldi	r25, 0x01	; 1

00000526 <.Loc.46>:
 526:	22 60       	ori	r18, 0x02	; 2
 528:	fc 01       	movw	r30, r24
 52a:	20 83       	st	Z, r18

0000052c <.Loc.47>:

	// Output low
	PORT_RPWM &= ~(1<<PIN_RPWM);
 52c:	8b e0       	ldi	r24, 0x0B	; 11
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	fc 01       	movw	r30, r24
 532:	20 81       	ld	r18, Z

00000534 <.Loc.48>:
 534:	8b e0       	ldi	r24, 0x0B	; 11
 536:	91 e0       	ldi	r25, 0x01	; 1

00000538 <.Loc.49>:
 538:	2e 7f       	andi	r18, 0xFE	; 254
 53a:	fc 01       	movw	r30, r24
 53c:	20 83       	st	Z, r18

0000053e <.Loc.50>:
	PORT_LPWM &= ~(1<<PIN_LPWM);
 53e:	8b e0       	ldi	r24, 0x0B	; 11
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	fc 01       	movw	r30, r24
 544:	20 81       	ld	r18, Z

00000546 <.Loc.51>:
 546:	8b e0       	ldi	r24, 0x0B	; 11
 548:	91 e0       	ldi	r25, 0x01	; 1

0000054a <.Loc.52>:
 54a:	2d 7f       	andi	r18, 0xFD	; 253
 54c:	fc 01       	movw	r30, r24
 54e:	20 83       	st	Z, r18

00000550 <.Loc.53>:

	// Use mode 0, clkdiv = 64
	TCCR0A = 0;
 550:	84 e4       	ldi	r24, 0x44	; 68
 552:	90 e0       	ldi	r25, 0x00	; 0

00000554 <.Loc.54>:
 554:	fc 01       	movw	r30, r24
 556:	10 82       	st	Z, r1

00000558 <.Loc.55>:
	TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
 558:	85 e4       	ldi	r24, 0x45	; 69
 55a:	90 e0       	ldi	r25, 0x00	; 0

0000055c <.Loc.56>:
 55c:	23 e0       	ldi	r18, 0x03	; 3
 55e:	fc 01       	movw	r30, r24
 560:	20 83       	st	Z, r18

00000562 <.Loc.57>:

	// Disable PWM output
	OCR0A = 0;
 562:	87 e4       	ldi	r24, 0x47	; 71
 564:	90 e0       	ldi	r25, 0x00	; 0

00000566 <.Loc.58>:
 566:	fc 01       	movw	r30, r24
 568:	10 82       	st	Z, r1

0000056a <.Loc.59>:
	OCR0B = 0;
 56a:	88 e4       	ldi	r24, 0x48	; 72
 56c:	90 e0       	ldi	r25, 0x00	; 0

0000056e <.Loc.60>:
 56e:	fc 01       	movw	r30, r24
 570:	10 82       	st	Z, r1

00000572 <.Loc.61>:

	// Interrupts on OCA, OCB and OVF
	TIMSK0 = (1<<OCIE0B) | (1<<OCIE0A) | (1<<TOIE0);
 572:	8e e6       	ldi	r24, 0x6E	; 110
 574:	90 e0       	ldi	r25, 0x00	; 0

00000576 <.Loc.62>:
 576:	27 e0       	ldi	r18, 0x07	; 7
 578:	fc 01       	movw	r30, r24
 57a:	20 83       	st	Z, r18

0000057c <.Loc.63>:

	sei();
 57c:	78 94       	sei

0000057e <.Loc.64>:
}
 57e:	00 00       	nop
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <MotorLinks_set_percentage>:

void MotorLinks_set_percentage(signed char percentage)
{
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	0f 92       	push	r0
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	89 83       	std	Y+1, r24	; 0x01

00000592 <.Loc.66>:
	if (percentage >= -100 && percentage <= 100)
 592:	89 81       	ldd	r24, Y+1	; 0x01
 594:	8c 39       	cpi	r24, 0x9C	; 156
 596:	e4 f1       	brlt	.+120    	; 0x610 <.L16>

00000598 <.Loc.67>:
 598:	89 81       	ldd	r24, Y+1	; 0x01
 59a:	84 36       	cpi	r24, 0x64	; 100
 59c:	09 f0       	breq	.+2      	; 0x5a0 <.Loc.68>

0000059e <L0^A>:
 59e:	c4 f5       	brge	.+112    	; 0x610 <.L16>

000005a0 <.Loc.68>:
	{
		if (percentage >= 0)
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
 5a2:	88 23       	and	r24, r24
 5a4:	dc f0       	brlt	.+54     	; 0x5dc <.L15>

000005a6 <.Loc.69>:
		{
			// Disable LPWM, calculate RPWM
			OCR0B = 0;
 5a6:	88 e4       	ldi	r24, 0x48	; 72
 5a8:	90 e0       	ldi	r25, 0x00	; 0

000005aa <.Loc.70>:
 5aa:	fc 01       	movw	r30, r24
 5ac:	10 82       	st	Z, r1

000005ae <.Loc.71>:
			OCR0A = (255*percentage)/100;
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	08 2e       	mov	r0, r24
 5b2:	00 0c       	add	r0, r0
 5b4:	99 0b       	sbc	r25, r25
 5b6:	2f ef       	ldi	r18, 0xFF	; 255
 5b8:	28 9f       	mul	r18, r24
 5ba:	a0 01       	movw	r20, r0
 5bc:	29 9f       	mul	r18, r25
 5be:	50 0d       	add	r21, r0
 5c0:	11 24       	eor	r1, r1

000005c2 <.Loc.72>:
 5c2:	24 e6       	ldi	r18, 0x64	; 100
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	ca 01       	movw	r24, r20
 5c8:	b9 01       	movw	r22, r18
 5ca:	0e 94 b9 03 	call	0x772	; 0x772 <__divmodhi4>
 5ce:	cb 01       	movw	r24, r22
 5d0:	9c 01       	movw	r18, r24

000005d2 <.Loc.73>:
 5d2:	87 e4       	ldi	r24, 0x47	; 71
 5d4:	90 e0       	ldi	r25, 0x00	; 0

000005d6 <.Loc.74>:
 5d6:	fc 01       	movw	r30, r24
 5d8:	20 83       	st	Z, r18

000005da <.Loc.75>:
			// Disable RPWM, calculate LPWM
			OCR0A = 0;
			OCR0B = (255*percentage)/-100;
		}
	}
}
 5da:	1a c0       	rjmp	.+52     	; 0x610 <.L16>

000005dc <.L15>:
			OCR0A = 0;
 5dc:	87 e4       	ldi	r24, 0x47	; 71
 5de:	90 e0       	ldi	r25, 0x00	; 0

000005e0 <.Loc.77>:
 5e0:	fc 01       	movw	r30, r24
 5e2:	10 82       	st	Z, r1

000005e4 <.Loc.78>:
			OCR0B = (255*percentage)/-100;
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	08 2e       	mov	r0, r24
 5e8:	00 0c       	add	r0, r0
 5ea:	99 0b       	sbc	r25, r25
 5ec:	2f ef       	ldi	r18, 0xFF	; 255
 5ee:	28 9f       	mul	r18, r24
 5f0:	a0 01       	movw	r20, r0
 5f2:	29 9f       	mul	r18, r25
 5f4:	50 0d       	add	r21, r0
 5f6:	11 24       	eor	r1, r1

000005f8 <.Loc.79>:
 5f8:	2c e9       	ldi	r18, 0x9C	; 156
 5fa:	3f ef       	ldi	r19, 0xFF	; 255
 5fc:	ca 01       	movw	r24, r20
 5fe:	b9 01       	movw	r22, r18
 600:	0e 94 b9 03 	call	0x772	; 0x772 <__divmodhi4>
 604:	cb 01       	movw	r24, r22
 606:	9c 01       	movw	r18, r24

00000608 <.Loc.80>:
 608:	88 e4       	ldi	r24, 0x48	; 72
 60a:	90 e0       	ldi	r25, 0x00	; 0

0000060c <.Loc.81>:
 60c:	fc 01       	movw	r30, r24
 60e:	20 83       	st	Z, r18

00000610 <.L16>:
}
 610:	00 00       	nop
 612:	0f 90       	pop	r0
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <__vector_15>:
 61a:	1f 92       	push	r1
 61c:	1f b6       	in	r1, 0x3f	; 63
 61e:	1f 92       	push	r1
 620:	11 24       	eor	r1, r1
 622:	8f 93       	push	r24
 624:	8b b7       	in	r24, 0x3b	; 59
 626:	8f 93       	push	r24
 628:	ef 93       	push	r30
 62a:	ff 93       	push	r31

0000062c <.Loc.1>:
 62c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000630 <.Loc.3>:
 630:	81 11       	cpse	r24, r1
 632:	0d c0       	rjmp	.+26     	; 0x64e <.L2>

00000634 <.Loc.4>:
 634:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000638 <.Loc.5>:
 638:	81 11       	cpse	r24, r1
 63a:	09 c0       	rjmp	.+18     	; 0x64e <.L2>

0000063c <.Loc.6>:
 63c:	eb e0       	ldi	r30, 0x0B	; 11
 63e:	f1 e0       	ldi	r31, 0x01	; 1
 640:	80 81       	ld	r24, Z
 642:	8b 7f       	andi	r24, 0xFB	; 251
 644:	80 83       	st	Z, r24

00000646 <.Loc.8>:
 646:	80 81       	ld	r24, Z
 648:	87 7f       	andi	r24, 0xF7	; 247
 64a:	80 83       	st	Z, r24
 64c:	0c c0       	rjmp	.+24     	; 0x666 <.L1>

0000064e <.L2>:
 64e:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000652 <.Loc.12>:
 652:	88 23       	and	r24, r24
 654:	89 f0       	breq	.+34     	; 0x678 <.L4>

00000656 <.Loc.13>:
 656:	eb e0       	ldi	r30, 0x0B	; 11
 658:	f1 e0       	ldi	r31, 0x01	; 1
 65a:	80 81       	ld	r24, Z
 65c:	87 7f       	andi	r24, 0xF7	; 247
 65e:	80 83       	st	Z, r24

00000660 <.Loc.15>:
 660:	80 81       	ld	r24, Z

00000662 <.Loc.16>:
 662:	84 60       	ori	r24, 0x04	; 4
 664:	80 83       	st	Z, r24

00000666 <.L1>:
 666:	ff 91       	pop	r31
 668:	ef 91       	pop	r30
 66a:	8f 91       	pop	r24
 66c:	8b bf       	out	0x3b, r24	; 59
 66e:	8f 91       	pop	r24
 670:	1f 90       	pop	r1
 672:	1f be       	out	0x3f, r1	; 63
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <.L4>:
 678:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

0000067c <.Loc.20>:
 67c:	88 23       	and	r24, r24
 67e:	99 f3       	breq	.-26     	; 0x666 <.L1>

00000680 <.Loc.21>:
 680:	eb e0       	ldi	r30, 0x0B	; 11
 682:	f1 e0       	ldi	r31, 0x01	; 1
 684:	80 81       	ld	r24, Z
 686:	8b 7f       	andi	r24, 0xFB	; 251
 688:	80 83       	st	Z, r24

0000068a <.Loc.23>:
 68a:	80 81       	ld	r24, Z

0000068c <.Loc.24>:
 68c:	88 60       	ori	r24, 0x08	; 8
 68e:	80 83       	st	Z, r24

00000690 <.Loc.25>:
 690:	ea cf       	rjmp	.-44     	; 0x666 <.L1>

00000692 <__vector_13>:
 692:	8f 93       	push	r24
 694:	8f b7       	in	r24, 0x3f	; 63
 696:	8f 93       	push	r24
 698:	8b b7       	in	r24, 0x3b	; 59
 69a:	8f 93       	push	r24
 69c:	ef 93       	push	r30
 69e:	ff 93       	push	r31

000006a0 <.Loc.27>:
 6a0:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

000006a4 <.Loc.29>:
 6a4:	8f 3f       	cpi	r24, 0xFF	; 255
 6a6:	29 f0       	breq	.+10     	; 0x6b2 <.L5>

000006a8 <.Loc.30>:
 6a8:	eb e0       	ldi	r30, 0x0B	; 11
 6aa:	f1 e0       	ldi	r31, 0x01	; 1
 6ac:	80 81       	ld	r24, Z
 6ae:	8b 7f       	andi	r24, 0xFB	; 251
 6b0:	80 83       	st	Z, r24

000006b2 <.L5>:
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	8f 91       	pop	r24
 6b8:	8b bf       	out	0x3b, r24	; 59
 6ba:	8f 91       	pop	r24
 6bc:	8f bf       	out	0x3f, r24	; 63
 6be:	8f 91       	pop	r24
 6c0:	18 95       	reti

000006c2 <__vector_14>:
 6c2:	8f 93       	push	r24
 6c4:	8f b7       	in	r24, 0x3f	; 63
 6c6:	8f 93       	push	r24
 6c8:	8b b7       	in	r24, 0x3b	; 59
 6ca:	8f 93       	push	r24
 6cc:	ef 93       	push	r30
 6ce:	ff 93       	push	r31

000006d0 <.Loc.34>:
 6d0:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

000006d4 <.Loc.36>:
 6d4:	8f 3f       	cpi	r24, 0xFF	; 255
 6d6:	29 f0       	breq	.+10     	; 0x6e2 <.L7>

000006d8 <.Loc.37>:
 6d8:	eb e0       	ldi	r30, 0x0B	; 11
 6da:	f1 e0       	ldi	r31, 0x01	; 1
 6dc:	80 81       	ld	r24, Z
 6de:	87 7f       	andi	r24, 0xF7	; 247
 6e0:	80 83       	st	Z, r24

000006e2 <.L7>:
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	8f 91       	pop	r24
 6e8:	8b bf       	out	0x3b, r24	; 59
 6ea:	8f 91       	pop	r24
 6ec:	8f bf       	out	0x3f, r24	; 63
 6ee:	8f 91       	pop	r24
 6f0:	18 95       	reti

000006f2 <init_MotorRechts>:
 6f2:	ea e0       	ldi	r30, 0x0A	; 10
 6f4:	f1 e0       	ldi	r31, 0x01	; 1
 6f6:	80 81       	ld	r24, Z

000006f8 <.Loc.42>:
 6f8:	84 60       	ori	r24, 0x04	; 4
 6fa:	80 83       	st	Z, r24

000006fc <.Loc.43>:
 6fc:	80 81       	ld	r24, Z

000006fe <.Loc.44>:
 6fe:	88 60       	ori	r24, 0x08	; 8
 700:	80 83       	st	Z, r24

00000702 <.Loc.45>:
 702:	eb e0       	ldi	r30, 0x0B	; 11
 704:	f1 e0       	ldi	r31, 0x01	; 1
 706:	80 81       	ld	r24, Z
 708:	8b 7f       	andi	r24, 0xFB	; 251
 70a:	80 83       	st	Z, r24

0000070c <.Loc.47>:
 70c:	80 81       	ld	r24, Z
 70e:	87 7f       	andi	r24, 0xF7	; 247
 710:	80 83       	st	Z, r24

00000712 <.Loc.49>:
 712:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>

00000716 <.Loc.51>:
 716:	83 e0       	ldi	r24, 0x03	; 3
 718:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

0000071c <.Loc.53>:
 71c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000720 <.Loc.55>:
 720:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000724 <.Loc.57>:
 724:	87 e0       	ldi	r24, 0x07	; 7
 726:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>

0000072a <.Loc.59>:
 72a:	78 94       	sei

0000072c <.Loc.60>:
 72c:	08 95       	ret

0000072e <MotorRechts_set_percentage>:
 72e:	94 e6       	ldi	r25, 0x64	; 100
 730:	98 0f       	add	r25, r24

00000732 <.Loc.64>:
 732:	99 3c       	cpi	r25, 0xC9	; 201
 734:	e8 f4       	brcc	.+58     	; 0x770 <.L10>

00000736 <.Loc.65>:
 736:	88 23       	and	r24, r24
 738:	74 f0       	brlt	.+28     	; 0x756 <.L12>

0000073a <.Loc.67>:
 73a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

0000073e <.Loc.69>:
 73e:	28 2f       	mov	r18, r24
 740:	3f ef       	ldi	r19, 0xFF	; 255
 742:	23 03       	mulsu	r18, r19
 744:	c0 01       	movw	r24, r0
 746:	11 24       	eor	r1, r1

00000748 <.Loc.71>:
 748:	64 e6       	ldi	r22, 0x64	; 100
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	0e 94 b9 03 	call	0x772	; 0x772 <__divmodhi4>

00000750 <.Loc.72>:
 750:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 754:	08 95       	ret

00000756 <.L12>:
 756:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

0000075a <.Loc.75>:
 75a:	28 2f       	mov	r18, r24
 75c:	3f ef       	ldi	r19, 0xFF	; 255
 75e:	23 03       	mulsu	r18, r19
 760:	c0 01       	movw	r24, r0
 762:	11 24       	eor	r1, r1

00000764 <.Loc.77>:
 764:	6c e9       	ldi	r22, 0x9C	; 156
 766:	7f ef       	ldi	r23, 0xFF	; 255
 768:	0e 94 b9 03 	call	0x772	; 0x772 <__divmodhi4>

0000076c <.Loc.78>:
 76c:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000770 <.L10>:
 770:	08 95       	ret

00000772 <__divmodhi4>:
 772:	97 fb       	bst	r25, 7

00000774 <.Loc.1>:
 774:	07 2e       	mov	r0, r23

00000776 <.Loc.2>:
 776:	16 f4       	brtc	.+4      	; 0x77c <.L^B1>

00000778 <.Loc.3>:
 778:	00 94       	com	r0

0000077a <.Loc.4>:
 77a:	07 d0       	rcall	.+14     	; 0x78a <__divmodhi4_neg1>

0000077c <.L^B1>:
 77c:	77 fd       	sbrc	r23, 7

0000077e <.Loc.6>:
 77e:	09 d0       	rcall	.+18     	; 0x792 <__divmodhi4_neg2>

00000780 <.Loc.7>:
 780:	0e 94 cd 03 	call	0x79a	; 0x79a <__udivmodhi4>

00000784 <.Loc.8>:
 784:	07 fc       	sbrc	r0, 7

00000786 <.Loc.9>:
 786:	05 d0       	rcall	.+10     	; 0x792 <__divmodhi4_neg2>

00000788 <.Loc.10>:
 788:	3e f4       	brtc	.+14     	; 0x798 <__divmodhi4_exit>

0000078a <__divmodhi4_neg1>:
 78a:	90 95       	com	r25

0000078c <.Loc.12>:
 78c:	81 95       	neg	r24

0000078e <.Loc.13>:
 78e:	9f 4f       	sbci	r25, 0xFF	; 255

00000790 <.Loc.14>:
 790:	08 95       	ret

00000792 <__divmodhi4_neg2>:
 792:	70 95       	com	r23

00000794 <.Loc.16>:
 794:	61 95       	neg	r22

00000796 <.Loc.17>:
 796:	7f 4f       	sbci	r23, 0xFF	; 255

00000798 <__divmodhi4_exit>:
 798:	08 95       	ret

0000079a <__udivmodhi4>:
 79a:	aa 1b       	sub	r26, r26

0000079c <.Loc.1>:
 79c:	bb 1b       	sub	r27, r27

0000079e <.Loc.2>:
 79e:	51 e1       	ldi	r21, 0x11	; 17

000007a0 <.Loc.3>:
 7a0:	07 c0       	rjmp	.+14     	; 0x7b0 <__udivmodhi4_ep>

000007a2 <__udivmodhi4_loop>:
 7a2:	aa 1f       	adc	r26, r26

000007a4 <.Loc.5>:
 7a4:	bb 1f       	adc	r27, r27

000007a6 <.Loc.6>:
 7a6:	a6 17       	cp	r26, r22

000007a8 <.Loc.7>:
 7a8:	b7 07       	cpc	r27, r23

000007aa <.Loc.8>:
 7aa:	10 f0       	brcs	.+4      	; 0x7b0 <__udivmodhi4_ep>

000007ac <.Loc.9>:
 7ac:	a6 1b       	sub	r26, r22

000007ae <.Loc.10>:
 7ae:	b7 0b       	sbc	r27, r23

000007b0 <__udivmodhi4_ep>:
 7b0:	88 1f       	adc	r24, r24

000007b2 <.Loc.12>:
 7b2:	99 1f       	adc	r25, r25

000007b4 <.Loc.13>:
 7b4:	5a 95       	dec	r21

000007b6 <.Loc.14>:
 7b6:	a9 f7       	brne	.-22     	; 0x7a2 <__udivmodhi4_loop>

000007b8 <.Loc.15>:
 7b8:	80 95       	com	r24

000007ba <.Loc.16>:
 7ba:	90 95       	com	r25

000007bc <.Loc.17>:
 7bc:	bc 01       	movw	r22, r24

000007be <.Loc.18>:
 7be:	cd 01       	movw	r24, r26

000007c0 <.Loc.19>:
 7c0:	08 95       	ret

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
