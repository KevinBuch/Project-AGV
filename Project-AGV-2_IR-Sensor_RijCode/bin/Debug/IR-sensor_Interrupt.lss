
bin\Debug\IR-sensor_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000011f6  000012aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011f6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800204  00800204  000012ae  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000012ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  000012b1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000138  00000000  00000000  00001308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001588  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000f3a  00000000  00000000  000029c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000013ad  00000000  00000000  00003902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000330  00000000  00000000  00004cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    0000072c  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000220  00000000  00000000  0000570c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000007a  00000000  00000000  0000592c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_1>
       8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_2>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__vector_13>
      38:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__vector_14>
      3c:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__vector_20>
      54:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__vector_21>
      58:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__vector_22>
      5c:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	e6 ef       	ldi	r30, 0xF6	; 246

000000fc <.Loc.4>:
      fc:	f1 e1       	ldi	r31, 0x11	; 17

000000fe <.Loc.5>:
      fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
     100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
     102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
     104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
     106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
     108:	a4 30       	cpi	r26, 0x04	; 4

0000010a <.Loc.11>:
     10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
     10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
     110:	a4 e0       	ldi	r26, 0x04	; 4

00000112 <.Loc.2>:
     112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
     114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
     116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
     118:	aa 30       	cpi	r26, 0x0A	; 10

0000011a <.Loc.6>:
     11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
     11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
     11e:	0e 94 31 03 	call	0x662	; 0x662 <main>
     122:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <init_Interrupt>:
static volatile int teller = 0;
static volatile int plantTeller = 0;
static volatile int laatsteBocht = Rechts;

void init_Interrupt (void)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62

00000132 <.Loc.1>:
    sei();
     132:	78 94       	sei

00000134 <.Loc.2>:
    EIMSK |= (1<<INT0);
     134:	8d e3       	ldi	r24, 0x3D	; 61
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	fc 01       	movw	r30, r24
     13a:	20 81       	ld	r18, Z
     13c:	8d e3       	ldi	r24, 0x3D	; 61
     13e:	90 e0       	ldi	r25, 0x00	; 0

00000140 <.Loc.3>:
     140:	21 60       	ori	r18, 0x01	; 1
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18

00000146 <.Loc.4>:
    EICRA |= (1<<ISC01) | (0<<ISC00);
     146:	89 e6       	ldi	r24, 0x69	; 105
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	fc 01       	movw	r30, r24
     14c:	20 81       	ld	r18, Z
     14e:	89 e6       	ldi	r24, 0x69	; 105
     150:	90 e0       	ldi	r25, 0x00	; 0

00000152 <.Loc.5>:
     152:	22 60       	ori	r18, 0x02	; 2
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18

00000158 <.Loc.6>:
    EIMSK |= (1<<INT1);
     158:	8d e3       	ldi	r24, 0x3D	; 61
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	20 81       	ld	r18, Z
     160:	8d e3       	ldi	r24, 0x3D	; 61
     162:	90 e0       	ldi	r25, 0x00	; 0

00000164 <.Loc.7>:
     164:	22 60       	ori	r18, 0x02	; 2
     166:	fc 01       	movw	r30, r24
     168:	20 83       	st	Z, r18

0000016a <.Loc.8>:
    EICRA |= (1<<ISC11) | (0<<ISC10);
     16a:	89 e6       	ldi	r24, 0x69	; 105
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	fc 01       	movw	r30, r24
     170:	20 81       	ld	r18, Z
     172:	89 e6       	ldi	r24, 0x69	; 105
     174:	90 e0       	ldi	r25, 0x00	; 0

00000176 <.Loc.9>:
     176:	28 60       	ori	r18, 0x08	; 8
     178:	fc 01       	movw	r30, r24
     17a:	20 83       	st	Z, r18

0000017c <.Loc.10>:
}
     17c:	00 00       	nop
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <__vector_1>:

ISR(INT0_vect)
{
     184:	1f 92       	push	r1
     186:	0f 92       	push	r0
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	0f 92       	push	r0
     18c:	11 24       	eor	r1, r1
     18e:	0b b6       	in	r0, 0x3b	; 59
     190:	0f 92       	push	r0
     192:	2f 93       	push	r18
     194:	3f 93       	push	r19
     196:	4f 93       	push	r20
     198:	5f 93       	push	r21
     19a:	6f 93       	push	r22
     19c:	7f 93       	push	r23
     19e:	8f 93       	push	r24
     1a0:	9f 93       	push	r25
     1a2:	af 93       	push	r26
     1a4:	bf 93       	push	r27
     1a6:	ef 93       	push	r30
     1a8:	ff 93       	push	r31
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
     1b2:	a2 97       	sbiw	r28, 0x22	; 34
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	cd bf       	out	0x3d, r28	; 61
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	a0 e2       	ldi	r26, 0x20	; 32
     1be:	b2 e4       	ldi	r27, 0x42	; 66
     1c0:	89 83       	std	Y+1, r24	; 0x01
     1c2:	9a 83       	std	Y+2, r25	; 0x02
     1c4:	ab 83       	std	Y+3, r26	; 0x03
     1c6:	bc 83       	std	Y+4, r27	; 0x04

000001c8 <.LBB18>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	4a e7       	ldi	r20, 0x7A	; 122
     1ce:	55 e4       	ldi	r21, 0x45	; 69
     1d0:	69 81       	ldd	r22, Y+1	; 0x01
     1d2:	7a 81       	ldd	r23, Y+2	; 0x02
     1d4:	8b 81       	ldd	r24, Y+3	; 0x03
     1d6:	9c 81       	ldd	r25, Y+4	; 0x04
     1d8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     1dc:	6b 8b       	std	Y+19, r22	; 0x13
     1de:	7c 8b       	std	Y+20, r23	; 0x14
     1e0:	8d 8b       	std	Y+21, r24	; 0x15
     1e2:	9e 8b       	std	Y+22, r25	; 0x16
     1e4:	8b 89       	ldd	r24, Y+19	; 0x13
     1e6:	9c 89       	ldd	r25, Y+20	; 0x14
     1e8:	ad 89       	ldd	r26, Y+21	; 0x15
     1ea:	be 89       	ldd	r27, Y+22	; 0x16
     1ec:	8d 83       	std	Y+5, r24	; 0x05
     1ee:	9e 83       	std	Y+6, r25	; 0x06
     1f0:	af 83       	std	Y+7, r26	; 0x07
     1f2:	b8 87       	std	Y+8, r27	; 0x08

000001f4 <.Loc.13>:
	if (__tmp < 1.0)
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	40 e8       	ldi	r20, 0x80	; 128
     1fa:	5f e3       	ldi	r21, 0x3F	; 63
     1fc:	6d 81       	ldd	r22, Y+5	; 0x05
     1fe:	7e 81       	ldd	r23, Y+6	; 0x06
     200:	8f 81       	ldd	r24, Y+7	; 0x07
     202:	98 85       	ldd	r25, Y+8	; 0x08
     204:	0e 94 de 07 	call	0xfbc	; 0xfbc <__cmpsf2>
     208:	88 23       	and	r24, r24
     20a:	2c f4       	brge	.+10     	; 0x216 <.L17>

0000020c <.Loc.14>:
		__ticks = 1;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	9a 87       	std	Y+10, r25	; 0x0a
     212:	89 87       	std	Y+9, r24	; 0x09
     214:	55 c0       	rjmp	.+170    	; 0x2c0 <.L5>

00000216 <.L17>:
	else if (__tmp > 65535)
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	3f ef       	ldi	r19, 0xFF	; 255
     21a:	4f e7       	ldi	r20, 0x7F	; 127
     21c:	57 e4       	ldi	r21, 0x47	; 71
     21e:	6d 81       	ldd	r22, Y+5	; 0x05
     220:	7e 81       	ldd	r23, Y+6	; 0x06
     222:	8f 81       	ldd	r24, Y+7	; 0x07
     224:	98 85       	ldd	r25, Y+8	; 0x08
     226:	0e 94 5f 08 	call	0x10be	; 0x10be <__gesf2>
     22a:	88 23       	and	r24, r24
     22c:	d9 f1       	breq	.+118    	; 0x2a4 <.L18>
     22e:	d4 f1       	brlt	.+116    	; 0x2a4 <.L18>

00000230 <.Loc.16>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e2       	ldi	r20, 0x20	; 32
     236:	51 e4       	ldi	r21, 0x41	; 65
     238:	69 81       	ldd	r22, Y+1	; 0x01
     23a:	7a 81       	ldd	r23, Y+2	; 0x02
     23c:	8b 81       	ldd	r24, Y+3	; 0x03
     23e:	9c 81       	ldd	r25, Y+4	; 0x04
     240:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     244:	6f 8b       	std	Y+23, r22	; 0x17
     246:	78 8f       	std	Y+24, r23	; 0x18
     248:	89 8f       	std	Y+25, r24	; 0x19
     24a:	9a 8f       	std	Y+26, r25	; 0x1a
     24c:	8f 89       	ldd	r24, Y+23	; 0x17
     24e:	98 8d       	ldd	r25, Y+24	; 0x18
     250:	a9 8d       	ldd	r26, Y+25	; 0x19
     252:	ba 8d       	ldd	r27, Y+26	; 0x1a
     254:	8f 87       	std	Y+15, r24	; 0x0f
     256:	98 8b       	std	Y+16, r25	; 0x10
     258:	a9 8b       	std	Y+17, r26	; 0x11
     25a:	ba 8b       	std	Y+18, r27	; 0x12

0000025c <.Loc.17>:
     25c:	6f 85       	ldd	r22, Y+15	; 0x0f
     25e:	78 89       	ldd	r23, Y+16	; 0x10
     260:	89 89       	ldd	r24, Y+17	; 0x11
     262:	9a 89       	ldd	r25, Y+18	; 0x12
     264:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fixunssfsi>
     268:	6b 8f       	std	Y+27, r22	; 0x1b
     26a:	7c 8f       	std	Y+28, r23	; 0x1c
     26c:	8d 8f       	std	Y+29, r24	; 0x1d
     26e:	9e 8f       	std	Y+30, r25	; 0x1e
     270:	ab 8d       	ldd	r26, Y+27	; 0x1b
     272:	bc 8d       	ldd	r27, Y+28	; 0x1c
     274:	ba 87       	std	Y+10, r27	; 0x0a
     276:	a9 87       	std	Y+9, r26	; 0x09

00000278 <.Loc.18>:
		while(__ticks)
     278:	10 c0       	rjmp	.+32     	; 0x29a <.L8>

0000027a <.L9>:
     27a:	80 e9       	ldi	r24, 0x90	; 144
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	9c 87       	std	Y+12, r25	; 0x0c
     280:	8b 87       	std	Y+11, r24	; 0x0b

00000282 <.LBB20>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
     282:	8b 85       	ldd	r24, Y+11	; 0x0b
     284:	9c 85       	ldd	r25, Y+12	; 0x0c

00000286 <.L1^B1>:
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <.L1^B1>
     28a:	9c 87       	std	Y+12, r25	; 0x0c
     28c:	8b 87       	std	Y+11, r24	; 0x0b

0000028e <.Loc.20>:
	...

00000290 <.LBE20>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     290:	89 85       	ldd	r24, Y+9	; 0x09
     292:	9a 85       	ldd	r25, Y+10	; 0x0a
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	9a 87       	std	Y+10, r25	; 0x0a
     298:	89 87       	std	Y+9, r24	; 0x09

0000029a <.L8>:
		while(__ticks)
     29a:	89 85       	ldd	r24, Y+9	; 0x09
     29c:	9a 85       	ldd	r25, Y+10	; 0x0a
     29e:	00 97       	sbiw	r24, 0x00	; 0
     2a0:	61 f7       	brne	.-40     	; 0x27a <.L9>

000002a2 <.Loc.23>:
		}
		return;
     2a2:	19 c0       	rjmp	.+50     	; 0x2d6 <.L10>

000002a4 <.L18>:
	}
	else
		__ticks = (uint16_t)__tmp;
     2a4:	6d 81       	ldd	r22, Y+5	; 0x05
     2a6:	7e 81       	ldd	r23, Y+6	; 0x06
     2a8:	8f 81       	ldd	r24, Y+7	; 0x07
     2aa:	98 85       	ldd	r25, Y+8	; 0x08
     2ac:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fixunssfsi>
     2b0:	6f 8f       	std	Y+31, r22	; 0x1f
     2b2:	78 a3       	std	Y+32, r23	; 0x20
     2b4:	89 a3       	std	Y+33, r24	; 0x21
     2b6:	9a a3       	std	Y+34, r25	; 0x22
     2b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2ba:	98 a1       	ldd	r25, Y+32	; 0x20
     2bc:	9a 87       	std	Y+10, r25	; 0x0a
     2be:	89 87       	std	Y+9, r24	; 0x09

000002c0 <.L5>:
     2c0:	89 85       	ldd	r24, Y+9	; 0x09
     2c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     2c4:	9e 87       	std	Y+14, r25	; 0x0e
     2c6:	8d 87       	std	Y+13, r24	; 0x0d

000002c8 <.LBB22>:
     2c8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ca:	9e 85       	ldd	r25, Y+14	; 0x0e

000002cc <.L1^B2>:
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <.L1^B2>
     2d0:	9e 87       	std	Y+14, r25	; 0x0e
     2d2:	8d 87       	std	Y+13, r24	; 0x0d

000002d4 <.Loc.26>:
	...

000002d6 <.L10>:
    _delay_ms(40);
    teller = 0;
     2d6:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     2da:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

000002de <.Loc.28>:
    if (plantTeller < 3)
     2de:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     2e2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>

000002e6 <.Loc.29>:
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	91 05       	cpc	r25, r1
     2ea:	09 f0       	breq	.+2      	; 0x2ee <.Loc.30>

000002ec <L0^A>:
     2ec:	34 f4       	brge	.+12     	; 0x2fa <.L11>

000002ee <.Loc.30>:
    {
        state = 2;  //Rechtdoor rijden
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     2f6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

000002fa <.L11>:
    }
    if(plantTeller==3)
     2fa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     2fe:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>

00000302 <.Loc.32>:
     302:	83 30       	cpi	r24, 0x03	; 3
     304:	91 05       	cpc	r25, r1
     306:	31 f4       	brne	.+12     	; 0x314 <.L12>

00000308 <.Loc.33>:
    {
        state = 3;  //Bocht linksom
     308:	83 e0       	ldi	r24, 0x03	; 3
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     310:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000314 <.L12>:
    }
    if (plantTeller > 7 && plantTeller < 15)
     314:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     318:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>

0000031c <.Loc.35>:
     31c:	87 30       	cpi	r24, 0x07	; 7
     31e:	91 05       	cpc	r25, r1
     320:	79 f0       	breq	.+30     	; 0x340 <.L13>
     322:	74 f0       	brlt	.+28     	; 0x340 <.L13>

00000324 <.Loc.36>:
     324:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     328:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>

0000032c <.Loc.37>:
     32c:	8e 30       	cpi	r24, 0x0E	; 14
     32e:	91 05       	cpc	r25, r1
     330:	09 f0       	breq	.+2      	; 0x334 <.Loc.38>

00000332 <L0^A>:
     332:	34 f4       	brge	.+12     	; 0x340 <.L13>

00000334 <.Loc.38>:
    {
        state = 2;  //Rechtdoor rijden
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     33c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000340 <.L13>:
    }
    if (plantTeller == 15)
     340:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     344:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>

00000348 <.Loc.40>:
     348:	8f 30       	cpi	r24, 0x0F	; 15
     34a:	91 05       	cpc	r25, r1
     34c:	31 f4       	brne	.+12     	; 0x35a <.L19>

0000034e <.Loc.41>:
    {
        state = 99;
     34e:	83 e6       	ldi	r24, 0x63	; 99
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     356:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

0000035a <.L19>:
    }
}
     35a:	00 00       	nop
     35c:	a2 96       	adiw	r28, 0x22	; 34
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	ff 91       	pop	r31
     36e:	ef 91       	pop	r30
     370:	bf 91       	pop	r27
     372:	af 91       	pop	r26
     374:	9f 91       	pop	r25
     376:	8f 91       	pop	r24
     378:	7f 91       	pop	r23
     37a:	6f 91       	pop	r22
     37c:	5f 91       	pop	r21
     37e:	4f 91       	pop	r20
     380:	3f 91       	pop	r19
     382:	2f 91       	pop	r18
     384:	0f 90       	pop	r0
     386:	0b be       	out	0x3b, r0	; 59
     388:	0f 90       	pop	r0
     38a:	0f be       	out	0x3f, r0	; 63
     38c:	0f 90       	pop	r0
     38e:	1f 90       	pop	r1
     390:	18 95       	reti

00000392 <__vector_2>:

ISR(INT1_vect)
{
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
     39c:	0b b6       	in	r0, 0x3b	; 59
     39e:	0f 92       	push	r0
     3a0:	2f 93       	push	r18
     3a2:	3f 93       	push	r19
     3a4:	4f 93       	push	r20
     3a6:	5f 93       	push	r21
     3a8:	6f 93       	push	r22
     3aa:	7f 93       	push	r23
     3ac:	8f 93       	push	r24
     3ae:	9f 93       	push	r25
     3b0:	af 93       	push	r26
     3b2:	bf 93       	push	r27
     3b4:	ef 93       	push	r30
     3b6:	ff 93       	push	r31
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	a2 97       	sbiw	r28, 0x22	; 34
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	a0 e2       	ldi	r26, 0x20	; 32
     3cc:	b2 e4       	ldi	r27, 0x42	; 66
     3ce:	89 83       	std	Y+1, r24	; 0x01
     3d0:	9a 83       	std	Y+2, r25	; 0x02
     3d2:	ab 83       	std	Y+3, r26	; 0x03
     3d4:	bc 83       	std	Y+4, r27	; 0x04

000003d6 <.LBB24>:
	__tmp = ((F_CPU) / 4e3) * __ms;
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	4a e7       	ldi	r20, 0x7A	; 122
     3dc:	55 e4       	ldi	r21, 0x45	; 69
     3de:	69 81       	ldd	r22, Y+1	; 0x01
     3e0:	7a 81       	ldd	r23, Y+2	; 0x02
     3e2:	8b 81       	ldd	r24, Y+3	; 0x03
     3e4:	9c 81       	ldd	r25, Y+4	; 0x04
     3e6:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     3ea:	6b 8b       	std	Y+19, r22	; 0x13
     3ec:	7c 8b       	std	Y+20, r23	; 0x14
     3ee:	8d 8b       	std	Y+21, r24	; 0x15
     3f0:	9e 8b       	std	Y+22, r25	; 0x16
     3f2:	8b 89       	ldd	r24, Y+19	; 0x13
     3f4:	9c 89       	ldd	r25, Y+20	; 0x14
     3f6:	ad 89       	ldd	r26, Y+21	; 0x15
     3f8:	be 89       	ldd	r27, Y+22	; 0x16
     3fa:	8d 83       	std	Y+5, r24	; 0x05
     3fc:	9e 83       	std	Y+6, r25	; 0x06
     3fe:	af 83       	std	Y+7, r26	; 0x07
     400:	b8 87       	std	Y+8, r27	; 0x08

00000402 <.Loc.45>:
	if (__tmp < 1.0)
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e8       	ldi	r20, 0x80	; 128
     408:	5f e3       	ldi	r21, 0x3F	; 63
     40a:	6d 81       	ldd	r22, Y+5	; 0x05
     40c:	7e 81       	ldd	r23, Y+6	; 0x06
     40e:	8f 81       	ldd	r24, Y+7	; 0x07
     410:	98 85       	ldd	r25, Y+8	; 0x08
     412:	0e 94 de 07 	call	0xfbc	; 0xfbc <__cmpsf2>
     416:	88 23       	and	r24, r24
     418:	2c f4       	brge	.+10     	; 0x424 <.L34>

0000041a <.Loc.46>:
		__ticks = 1;
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	9a 87       	std	Y+10, r25	; 0x0a
     420:	89 87       	std	Y+9, r24	; 0x09
     422:	55 c0       	rjmp	.+170    	; 0x4ce <.L23>

00000424 <.L34>:
	else if (__tmp > 65535)
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	3f ef       	ldi	r19, 0xFF	; 255
     428:	4f e7       	ldi	r20, 0x7F	; 127
     42a:	57 e4       	ldi	r21, 0x47	; 71
     42c:	6d 81       	ldd	r22, Y+5	; 0x05
     42e:	7e 81       	ldd	r23, Y+6	; 0x06
     430:	8f 81       	ldd	r24, Y+7	; 0x07
     432:	98 85       	ldd	r25, Y+8	; 0x08
     434:	0e 94 5f 08 	call	0x10be	; 0x10be <__gesf2>
     438:	88 23       	and	r24, r24
     43a:	d9 f1       	breq	.+118    	; 0x4b2 <.L35>
     43c:	d4 f1       	brlt	.+116    	; 0x4b2 <.L35>

0000043e <.Loc.48>:
		__ticks = (uint16_t) (__ms * 10.0);
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e2       	ldi	r20, 0x20	; 32
     444:	51 e4       	ldi	r21, 0x41	; 65
     446:	69 81       	ldd	r22, Y+1	; 0x01
     448:	7a 81       	ldd	r23, Y+2	; 0x02
     44a:	8b 81       	ldd	r24, Y+3	; 0x03
     44c:	9c 81       	ldd	r25, Y+4	; 0x04
     44e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__mulsf3>
     452:	6f 8b       	std	Y+23, r22	; 0x17
     454:	78 8f       	std	Y+24, r23	; 0x18
     456:	89 8f       	std	Y+25, r24	; 0x19
     458:	9a 8f       	std	Y+26, r25	; 0x1a
     45a:	8f 89       	ldd	r24, Y+23	; 0x17
     45c:	98 8d       	ldd	r25, Y+24	; 0x18
     45e:	a9 8d       	ldd	r26, Y+25	; 0x19
     460:	ba 8d       	ldd	r27, Y+26	; 0x1a
     462:	8f 87       	std	Y+15, r24	; 0x0f
     464:	98 8b       	std	Y+16, r25	; 0x10
     466:	a9 8b       	std	Y+17, r26	; 0x11
     468:	ba 8b       	std	Y+18, r27	; 0x12

0000046a <.Loc.49>:
     46a:	6f 85       	ldd	r22, Y+15	; 0x0f
     46c:	78 89       	ldd	r23, Y+16	; 0x10
     46e:	89 89       	ldd	r24, Y+17	; 0x11
     470:	9a 89       	ldd	r25, Y+18	; 0x12
     472:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fixunssfsi>
     476:	6b 8f       	std	Y+27, r22	; 0x1b
     478:	7c 8f       	std	Y+28, r23	; 0x1c
     47a:	8d 8f       	std	Y+29, r24	; 0x1d
     47c:	9e 8f       	std	Y+30, r25	; 0x1e
     47e:	ab 8d       	ldd	r26, Y+27	; 0x1b
     480:	bc 8d       	ldd	r27, Y+28	; 0x1c
     482:	ba 87       	std	Y+10, r27	; 0x0a
     484:	a9 87       	std	Y+9, r26	; 0x09

00000486 <.Loc.50>:
		while(__ticks)
     486:	10 c0       	rjmp	.+32     	; 0x4a8 <.L26>

00000488 <.L27>:
     488:	80 e9       	ldi	r24, 0x90	; 144
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9c 87       	std	Y+12, r25	; 0x0c
     48e:	8b 87       	std	Y+11, r24	; 0x0b

00000490 <.LBB26>:
     490:	8b 85       	ldd	r24, Y+11	; 0x0b
     492:	9c 85       	ldd	r25, Y+12	; 0x0c

00000494 <.L1^B3>:
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <.L1^B3>
     498:	9c 87       	std	Y+12, r25	; 0x0c
     49a:	8b 87       	std	Y+11, r24	; 0x0b

0000049c <.Loc.52>:
	...

0000049e <.LBE26>:
			__ticks --;
     49e:	89 85       	ldd	r24, Y+9	; 0x09
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	9a 87       	std	Y+10, r25	; 0x0a
     4a6:	89 87       	std	Y+9, r24	; 0x09

000004a8 <.L26>:
		while(__ticks)
     4a8:	89 85       	ldd	r24, Y+9	; 0x09
     4aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ac:	00 97       	sbiw	r24, 0x00	; 0
     4ae:	61 f7       	brne	.-40     	; 0x488 <.L27>

000004b0 <.Loc.55>:
		return;
     4b0:	19 c0       	rjmp	.+50     	; 0x4e4 <.L28>

000004b2 <.L35>:
		__ticks = (uint16_t)__tmp;
     4b2:	6d 81       	ldd	r22, Y+5	; 0x05
     4b4:	7e 81       	ldd	r23, Y+6	; 0x06
     4b6:	8f 81       	ldd	r24, Y+7	; 0x07
     4b8:	98 85       	ldd	r25, Y+8	; 0x08
     4ba:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fixunssfsi>
     4be:	6f 8f       	std	Y+31, r22	; 0x1f
     4c0:	78 a3       	std	Y+32, r23	; 0x20
     4c2:	89 a3       	std	Y+33, r24	; 0x21
     4c4:	9a a3       	std	Y+34, r25	; 0x22
     4c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4c8:	98 a1       	ldd	r25, Y+32	; 0x20
     4ca:	9a 87       	std	Y+10, r25	; 0x0a
     4cc:	89 87       	std	Y+9, r24	; 0x09

000004ce <.L23>:
     4ce:	89 85       	ldd	r24, Y+9	; 0x09
     4d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d2:	9e 87       	std	Y+14, r25	; 0x0e
     4d4:	8d 87       	std	Y+13, r24	; 0x0d

000004d6 <.LBB28>:
     4d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     4d8:	9e 85       	ldd	r25, Y+14	; 0x0e

000004da <.L1^B4>:
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <.L1^B4>
     4de:	9e 87       	std	Y+14, r25	; 0x0e
     4e0:	8d 87       	std	Y+13, r24	; 0x0d

000004e2 <.Loc.58>:
	...

000004e4 <.L28>:
    _delay_ms(40);
    teller = 0;
     4e4:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     4e8:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

000004ec <.Loc.60>:
    if (plantTeller > 3 && plantTeller < 15)
     4ec:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     4f0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>

000004f4 <.Loc.61>:
     4f4:	83 30       	cpi	r24, 0x03	; 3
     4f6:	91 05       	cpc	r25, r1
     4f8:	79 f0       	breq	.+30     	; 0x518 <.L29>
     4fa:	74 f0       	brlt	.+28     	; 0x518 <.L29>

000004fc <.Loc.62>:
     4fc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     500:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>

00000504 <.Loc.63>:
     504:	8e 30       	cpi	r24, 0x0E	; 14
     506:	91 05       	cpc	r25, r1
     508:	09 f0       	breq	.+2      	; 0x50c <.Loc.64>

0000050a <L0^A>:
     50a:	34 f4       	brge	.+12     	; 0x518 <.L29>

0000050c <.Loc.64>:
    {
        state = 2;  //Rechtdoor rijden
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     514:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000518 <.L29>:
    }
    if (plantTeller==7)
     518:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     51c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>

00000520 <.Loc.66>:
     520:	87 30       	cpi	r24, 0x07	; 7
     522:	91 05       	cpc	r25, r1
     524:	31 f4       	brne	.+12     	; 0x532 <.L30>

00000526 <.Loc.67>:
    {
        state = 4;  //Bocht rechtsom
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     52e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000532 <.L30>:
    }
    if (plantTeller == 15)
     532:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     536:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>

0000053a <.Loc.69>:
     53a:	8f 30       	cpi	r24, 0x0F	; 15
     53c:	91 05       	cpc	r25, r1
     53e:	31 f4       	brne	.+12     	; 0x54c <.L36>

00000540 <.Loc.70>:
    {
        state = 99;
     540:	83 e6       	ldi	r24, 0x63	; 99
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     548:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

0000054c <.L36>:
    }
}
     54c:	00 00       	nop
     54e:	a2 96       	adiw	r28, 0x22	; 34
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0b be       	out	0x3b, r0	; 59
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <init>:

void init (void)
{
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62

0000058c <.Loc.73>:
    RotaryInit();
     58c:	0e 94 37 07 	call	0xe6e	; 0xe6e <RotaryInit>

00000590 <.Loc.74>:
    init_Interrupt();
     590:	0e 94 95 00 	call	0x12a	; 0x12a <init_Interrupt>

00000594 <.Loc.75>:
    init_MotorLinks();
     594:	0e 94 53 06 	call	0xca6	; 0xca6 <init_MotorLinks>

00000598 <.Loc.76>:
    init_MotorRechts();
     598:	0e 94 f7 06 	call	0xdee	; 0xdee <init_MotorRechts>

0000059c <.Loc.77>:

    Timer1_Start();
     59c:	0e 94 83 07 	call	0xf06	; 0xf06 <Timer1_Start>

000005a0 <.Loc.78>:

    DDRB |= (1<<PB6);       // LED pin output
     5a0:	84 e2       	ldi	r24, 0x24	; 36
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 81       	ld	r18, Z
     5a8:	84 e2       	ldi	r24, 0x24	; 36
     5aa:	90 e0       	ldi	r25, 0x00	; 0

000005ac <.Loc.79>:
     5ac:	20 64       	ori	r18, 0x40	; 64
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18

000005b2 <.Loc.80>:
    DDRB |= (1<<PB5);       // LED pin output
     5b2:	84 e2       	ldi	r24, 0x24	; 36
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 81       	ld	r18, Z
     5ba:	84 e2       	ldi	r24, 0x24	; 36
     5bc:	90 e0       	ldi	r25, 0x00	; 0

000005be <.Loc.81>:
     5be:	20 62       	ori	r18, 0x20	; 32
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18

000005c4 <.Loc.82>:
    DDRL |= (1<<PL4);       // LED pin output
     5c4:	8a e0       	ldi	r24, 0x0A	; 10
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 81       	ld	r18, Z
     5cc:	8a e0       	ldi	r24, 0x0A	; 10
     5ce:	91 e0       	ldi	r25, 0x01	; 1

000005d0 <.Loc.83>:
     5d0:	20 61       	ori	r18, 0x10	; 16
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 83       	st	Z, r18

000005d6 <.Loc.84>:

    PORTB |= (1<<PB6);      // LED off
     5d6:	85 e2       	ldi	r24, 0x25	; 37
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	fc 01       	movw	r30, r24
     5dc:	20 81       	ld	r18, Z
     5de:	85 e2       	ldi	r24, 0x25	; 37
     5e0:	90 e0       	ldi	r25, 0x00	; 0

000005e2 <.Loc.85>:
     5e2:	20 64       	ori	r18, 0x40	; 64
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18

000005e8 <.Loc.86>:
    PORTB |= (1<<PB5);      // LED off
     5e8:	85 e2       	ldi	r24, 0x25	; 37
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 81       	ld	r18, Z
     5f0:	85 e2       	ldi	r24, 0x25	; 37
     5f2:	90 e0       	ldi	r25, 0x00	; 0

000005f4 <.Loc.87>:
     5f4:	20 62       	ori	r18, 0x20	; 32
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18

000005fa <.Loc.88>:
    PORTL |= (1<<PL4);      // LED off
     5fa:	8b e0       	ldi	r24, 0x0B	; 11
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	fc 01       	movw	r30, r24
     600:	20 81       	ld	r18, Z
     602:	8b e0       	ldi	r24, 0x0B	; 11
     604:	91 e0       	ldi	r25, 0x01	; 1

00000606 <.Loc.89>:
     606:	20 61       	ori	r18, 0x10	; 16
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18

0000060c <.Loc.90>:
    Led_Links_AAN;
     60c:	85 e2       	ldi	r24, 0x25	; 37
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	fc 01       	movw	r30, r24
     612:	20 81       	ld	r18, Z
     614:	85 e2       	ldi	r24, 0x25	; 37
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	2f 7b       	andi	r18, 0xBF	; 191
     61a:	fc 01       	movw	r30, r24
     61c:	20 83       	st	Z, r18

0000061e <.Loc.91>:
    Led_Rechts_AAN;
     61e:	85 e2       	ldi	r24, 0x25	; 37
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	fc 01       	movw	r30, r24
     624:	20 81       	ld	r18, Z
     626:	85 e2       	ldi	r24, 0x25	; 37
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	2f 7d       	andi	r18, 0xDF	; 223
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18

00000630 <.Loc.92>:
}
     630:	00 00       	nop
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <initTimer>:

void initTimer (void)
{
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62

00000640 <.Loc.94>:
    // Timer 5 is de systeemtimer (overflow)
    TCCR5A = 0;
     640:	80 e2       	ldi	r24, 0x20	; 32
     642:	91 e0       	ldi	r25, 0x01	; 1

00000644 <.Loc.95>:
     644:	fc 01       	movw	r30, r24
     646:	10 82       	st	Z, r1

00000648 <.Loc.96>:
    // Timer 8 kan niet ver genoeg tellen!
    // 8 bit timer 16000000 Hz / 64 / 256 = 976.56 Hz
    // 16 bit timer 16000000 Hz / 64 / 65.536 = 3.906,25 Hz
    // 16 bit timer 16000000 Hz / 65.536 = 244 Hz
    // start timer 0, prescaler = 64
    TCCR5B = TCCR5B | (0 << CS51) | (1 << CS50); //244,14 Hz
     648:	81 e2       	ldi	r24, 0x21	; 33
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	fc 01       	movw	r30, r24
     64e:	20 81       	ld	r18, Z

00000650 <.Loc.97>:
     650:	81 e2       	ldi	r24, 0x21	; 33
     652:	91 e0       	ldi	r25, 0x01	; 1

00000654 <.Loc.98>:
     654:	21 60       	ori	r18, 0x01	; 1
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18

0000065a <.Loc.99>:
}
     65a:	00 00       	nop
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <main>:

int main(void)
{
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	00 d0       	rcall	.+0      	; 0x668 <L0^A>

00000668 <L0^A>:
     668:	00 d0       	rcall	.+0      	; 0x66a <L0^A>

0000066a <L0^A>:
     66a:	00 d0       	rcall	.+0      	; 0x66c <L0^A>

0000066c <L0^A>:
     66c:	0f 92       	push	r0
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62

00000672 <.Loc.101>:
    init();
     672:	0e 94 c2 02 	call	0x584	; 0x584 <init>

00000676 <.Loc.102>:
    initTimer();
     676:	0e 94 1c 03 	call	0x638	; 0x638 <initTimer>

0000067a <.Loc.103>:
    int timer = 0;
     67a:	1e 82       	std	Y+6, r1	; 0x06
     67c:	1d 82       	std	Y+5, r1	; 0x05

0000067e <.Loc.104>:
    int knopje_1 = 1;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	98 87       	std	Y+8, r25	; 0x08
     684:	8f 83       	std	Y+7, r24	; 0x07

00000686 <.Loc.105>:
    waarschuwLampjes_AAN;
     686:	8b e0       	ldi	r24, 0x0B	; 11
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	fc 01       	movw	r30, r24
     68c:	20 81       	ld	r18, Z
     68e:	8b e0       	ldi	r24, 0x0B	; 11
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	2f 7e       	andi	r18, 0xEF	; 239
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18

00000698 <.Loc.106>:

    int rotary_1 = 0;
     698:	1a 82       	std	Y+2, r1	; 0x02
     69a:	19 82       	std	Y+1, r1	; 0x01

0000069c <.Loc.107>:
    int waarde_rot_1 = 50;
     69c:	82 e3       	ldi	r24, 0x32	; 50
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	9c 83       	std	Y+4, r25	; 0x04
     6a2:	8b 83       	std	Y+3, r24	; 0x03

000006a4 <.Loc.108>:
    int waarde_rot_2 = 50;
     6a4:	82 e3       	ldi	r24, 0x32	; 50
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	9a 87       	std	Y+10, r25	; 0x0a
     6aa:	89 87       	std	Y+9, r24	; 0x09

000006ac <.L59>:
    */
    while(1)
    {

        //Rotary encoder code
        rotary_1 = RotaryGetStatus();       //rotary_1 krijgt de waarde 0 1 of 2 van de rotary encoder uit rotary.c
     6ac:	0e 94 79 07 	call	0xef2	; 0xef2 <RotaryGetStatus>

000006b0 <.Loc.110>:
     6b0:	88 2f       	mov	r24, r24
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	9a 83       	std	Y+2, r25	; 0x02
     6b6:	89 83       	std	Y+1, r24	; 0x01

000006b8 <.Loc.111>:
        if(rotary_1 == 1)
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	91 05       	cpc	r25, r1
     6c0:	49 f4       	brne	.+18     	; 0x6d4 <.L40>

000006c2 <.Loc.112>:
        {
            rotary_1 = 0;
     6c2:	1a 82       	std	Y+2, r1	; 0x02
     6c4:	19 82       	std	Y+1, r1	; 0x01

000006c6 <.Loc.113>:
            waarde_rot_1--;
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	9c 83       	std	Y+4, r25	; 0x04
     6ce:	8b 83       	std	Y+3, r24	; 0x03

000006d0 <.Loc.114>:
            RotaryResetStatus();
     6d0:	0e 94 7e 07 	call	0xefc	; 0xefc <RotaryResetStatus>

000006d4 <.L40>:
        }
        if(rotary_1 == 2)
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	82 30       	cpi	r24, 0x02	; 2
     6da:	91 05       	cpc	r25, r1
     6dc:	49 f4       	brne	.+18     	; 0x6f0 <.L41>

000006de <.Loc.116>:
        {
            rotary_1 = 0;
     6de:	1a 82       	std	Y+2, r1	; 0x02
     6e0:	19 82       	std	Y+1, r1	; 0x01

000006e2 <.Loc.117>:
            waarde_rot_1 = waarde_rot_1 + 1;
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	9c 83       	std	Y+4, r25	; 0x04
     6ea:	8b 83       	std	Y+3, r24	; 0x03

000006ec <.Loc.118>:
            RotaryResetStatus();
     6ec:	0e 94 7e 07 	call	0xefc	; 0xefc <RotaryResetStatus>

000006f0 <.L41>:
        }

        //Timer code
        if (TIFR5 & (1<<TOV5))  //elke keer als de timer overflowt
     6f0:	8a e3       	ldi	r24, 0x3A	; 58
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	fc 01       	movw	r30, r24
     6f6:	80 81       	ld	r24, Z

000006f8 <.Loc.120>:
     6f8:	88 2f       	mov	r24, r24
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	81 70       	andi	r24, 0x01	; 1
     6fe:	99 27       	eor	r25, r25

00000700 <.Loc.121>:
     700:	00 97       	sbiw	r24, 0x00	; 0
     702:	71 f0       	breq	.+28     	; 0x720 <.L42>

00000704 <.Loc.122>:
        {
            // Timer overflow, +/- 1 ms voorbij
            TIFR5 = (1<<TOV5);  // Wis flag
     704:	8a e3       	ldi	r24, 0x3A	; 58
     706:	90 e0       	ldi	r25, 0x00	; 0

00000708 <.Loc.123>:
     708:	21 e0       	ldi	r18, 0x01	; 1
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18

0000070e <.Loc.124>:
            teller++;           //Verhoog teller met 1 iedere overflow (244Hz)
     70e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     712:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <teller+0x1>
     71c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <teller>

00000720 <.L42>:
        }

        // in deze state stopt AGV hier staat deze permanent uit
        if(state == 0)
     720:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     724:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000728 <.Loc.126>:
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	41 f4       	brne	.+16     	; 0x73c <.L43>

0000072c <.LBB30>:
        {
            MotorLinks_set_percentage(0);
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

00000734 <.Loc.128>:
            MotorRechts_set_percentage(0);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

0000073c <.L43>:
        }
        //Blijf rechtdoor rijden tot external interrupt state veranderd naar state 2
        if(state==1)
     73c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     740:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000744 <.Loc.130>:
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	91 05       	cpc	r25, r1
     748:	d9 f4       	brne	.+54     	; 0x780 <.L44>

0000074a <.LBB31>:
        {
            MotorLinks_set_percentage(60+(waarde_rot_2-waarde_rot_1));
     74a:	29 85       	ldd	r18, Y+9	; 0x09
     74c:	3a 85       	ldd	r19, Y+10	; 0x0a
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	9c 81       	ldd	r25, Y+4	; 0x04
     752:	a9 01       	movw	r20, r18
     754:	48 1b       	sub	r20, r24
     756:	59 0b       	sbc	r21, r25
     758:	ca 01       	movw	r24, r20

0000075a <.Loc.132>:
     75a:	cc 96       	adiw	r24, 0x3c	; 60
     75c:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

00000760 <.Loc.133>:
            MotorRechts_set_percentage(70-(waarde_rot_2-waarde_rot_1));
     760:	29 85       	ldd	r18, Y+9	; 0x09
     762:	3a 85       	ldd	r19, Y+10	; 0x0a
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	9c 81       	ldd	r25, Y+4	; 0x04
     768:	f9 01       	movw	r30, r18
     76a:	e8 1b       	sub	r30, r24
     76c:	f9 0b       	sbc	r31, r25
     76e:	cf 01       	movw	r24, r30

00000770 <.Loc.134>:
     770:	26 e4       	ldi	r18, 0x46	; 70
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	a9 01       	movw	r20, r18
     776:	48 1b       	sub	r20, r24
     778:	59 0b       	sbc	r21, r25
     77a:	ca 01       	movw	r24, r20
     77c:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

00000780 <.L44>:
        }
        //wacht 2 seconden en rijdt door door te veranderen naar state 1
        if(state==2)
     780:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     784:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000788 <.Loc.136>:
     788:	82 30       	cpi	r24, 0x02	; 2
     78a:	91 05       	cpc	r25, r1
     78c:	91 f5       	brne	.+100    	; 0x7f2 <.L45>

0000078e <.LBB32>:
        {
            MotorLinks_set_percentage(0);
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

00000796 <.Loc.138>:
            MotorRechts_set_percentage(0);
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

0000079e <.Loc.139>:
            waarschuwLampjes_AAN;
     79e:	8b e0       	ldi	r24, 0x0B	; 11
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 81       	ld	r18, Z
     7a6:	8b e0       	ldi	r24, 0x0B	; 11
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	2f 7e       	andi	r18, 0xEF	; 239
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18

000007b0 <.Loc.140>:
            if (teller > (2000/4))
     7b0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     7b4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

000007b8 <.Loc.141>:
     7b8:	84 3f       	cpi	r24, 0xF4	; 244
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	9f 07       	cpc	r25, r31
     7be:	c9 f0       	breq	.+50     	; 0x7f2 <.L45>
     7c0:	c4 f0       	brlt	.+48     	; 0x7f2 <.L45>

000007c2 <.Loc.142>:
            {
                plantTeller++;
     7c2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     7c6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <plantTeller+0x1>
     7d0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <plantTeller>

000007d4 <.Loc.143>:
                state = 1;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     7dc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

000007e0 <.Loc.144>:
                waarschuwLampjes_UIT;
     7e0:	8b e0       	ldi	r24, 0x0B	; 11
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 81       	ld	r18, Z
     7e8:	8b e0       	ldi	r24, 0x0B	; 11
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	20 61       	ori	r18, 0x10	; 16
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 83       	st	Z, r18

000007f2 <.L45>:
            }
        }
        if(state==3)    //Bocht Linksom
     7f2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     7f6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

000007fa <.Loc.146>:
     7fa:	83 30       	cpi	r24, 0x03	; 3
     7fc:	91 05       	cpc	r25, r1
     7fe:	21 f5       	brne	.+72     	; 0x848 <.L46>

00000800 <.LBB33>:
        {
            MotorLinks_set_percentage(0);
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

00000808 <.Loc.148>:
            MotorRechts_set_percentage(0);
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

00000810 <.Loc.149>:
            if (teller > (2000/4))            //Hoeveel ms/4 het duurt voordat het naar de volgende staat gaat
     810:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     814:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

00000818 <.Loc.150>:
     818:	84 3f       	cpi	r24, 0xF4	; 244
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	9f 07       	cpc	r25, r31
     81e:	a1 f0       	breq	.+40     	; 0x848 <.L46>
     820:	9c f0       	brlt	.+38     	; 0x848 <.L46>

00000822 <.Loc.151>:
            {
                plantTeller++;
     822:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     826:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <plantTeller+0x1>
     830:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <plantTeller>

00000834 <.Loc.152>:
                state = 5;
     834:	85 e0       	ldi	r24, 0x05	; 5
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     83c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000840 <.Loc.153>:
                teller = 0;
     840:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     844:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

00000848 <.L46>:
            }
        }
        if(state==4)    //Bocht Rechtsom
     848:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     84c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000850 <.Loc.155>:
     850:	84 30       	cpi	r24, 0x04	; 4
     852:	91 05       	cpc	r25, r1
     854:	21 f5       	brne	.+72     	; 0x89e <.L47>

00000856 <.LBB34>:
        {
            MotorLinks_set_percentage(0);
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

0000085e <.Loc.157>:
            MotorRechts_set_percentage(0);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

00000866 <.Loc.158>:
            if (teller > (2000/4))            // hoeveel seconden wachten voordat state veranderd
     866:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     86a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

0000086e <.Loc.159>:
     86e:	84 3f       	cpi	r24, 0xF4	; 244
     870:	21 e0       	ldi	r18, 0x01	; 1
     872:	92 07       	cpc	r25, r18
     874:	a1 f0       	breq	.+40     	; 0x89e <.L47>
     876:	9c f0       	brlt	.+38     	; 0x89e <.L47>

00000878 <.Loc.160>:
            {
                plantTeller++;
     878:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <plantTeller>
     87c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <plantTeller+0x1>
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <plantTeller+0x1>
     886:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <plantTeller>

0000088a <.Loc.161>:
                state = 9;
     88a:	89 e0       	ldi	r24, 0x09	; 9
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     892:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000896 <.Loc.162>:
                teller = 0;
     896:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     89a:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

0000089e <.L47>:
            }
        }
        if(state==5)
     89e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     8a2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

000008a6 <.Loc.164>:
     8a6:	85 30       	cpi	r24, 0x05	; 5
     8a8:	91 05       	cpc	r25, r1
     8aa:	d9 f4       	brne	.+54     	; 0x8e2 <.L48>

000008ac <.LBB35>:
        {
            MotorLinks_set_percentage(60);
     8ac:	8c e3       	ldi	r24, 0x3C	; 60
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

000008b4 <.Loc.166>:
            MotorRechts_set_percentage(70);
     8b4:	86 e4       	ldi	r24, 0x46	; 70
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

000008bc <.Loc.167>:
            if (teller > (3000/4))            //Hoeveel ms/4 het duurt voordat het naar de volgende staat gaat
     8bc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     8c0:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

000008c4 <.Loc.168>:
     8c4:	8e 3e       	cpi	r24, 0xEE	; 238
     8c6:	42 e0       	ldi	r20, 0x02	; 2
     8c8:	94 07       	cpc	r25, r20
     8ca:	59 f0       	breq	.+22     	; 0x8e2 <.L48>
     8cc:	54 f0       	brlt	.+20     	; 0x8e2 <.L48>

000008ce <.Loc.169>:
            {
                state = 6;
     8ce:	86 e0       	ldi	r24, 0x06	; 6
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     8d6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

000008da <.Loc.170>:
                teller = 0;
     8da:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     8de:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

000008e2 <.L48>:
            }
        }
        //draai linksom volle snelheid
        if(state==6)
     8e2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     8e6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

000008ea <.Loc.172>:
     8ea:	86 30       	cpi	r24, 0x06	; 6
     8ec:	91 05       	cpc	r25, r1
     8ee:	d9 f4       	brne	.+54     	; 0x926 <.L49>

000008f0 <.LBB36>:
        {
            MotorLinks_set_percentage(0);
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

000008f8 <.Loc.174>:
            MotorRechts_set_percentage(50);
     8f8:	82 e3       	ldi	r24, 0x32	; 50
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

00000900 <.Loc.175>:
            if (teller > (1450/4))            // hoeveel seconden wachten voordat state veranderd
     900:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     904:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

00000908 <.Loc.176>:
     908:	8a 36       	cpi	r24, 0x6A	; 106
     90a:	51 e0       	ldi	r21, 0x01	; 1
     90c:	95 07       	cpc	r25, r21
     90e:	59 f0       	breq	.+22     	; 0x926 <.L49>
     910:	54 f0       	brlt	.+20     	; 0x926 <.L49>

00000912 <.Loc.177>:
            {
                state = 7;
     912:	87 e0       	ldi	r24, 0x07	; 7
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     91a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

0000091e <.Loc.178>:
                teller = 0;
     91e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     922:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

00000926 <.L49>:
            }
        }
        //rijd rechtdoor (40%vermogen)
        if(state==7)
     926:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     92a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

0000092e <.Loc.180>:
     92e:	87 30       	cpi	r24, 0x07	; 7
     930:	91 05       	cpc	r25, r1
     932:	69 f5       	brne	.+90     	; 0x98e <.L50>

00000934 <.LBB37>:
        {
            Led_Links_AAN;
     934:	85 e2       	ldi	r24, 0x25	; 37
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fc 01       	movw	r30, r24
     93a:	20 81       	ld	r18, Z
     93c:	85 e2       	ldi	r24, 0x25	; 37
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	2f 7b       	andi	r18, 0xBF	; 191
     942:	fc 01       	movw	r30, r24
     944:	20 83       	st	Z, r18

00000946 <.Loc.182>:
            Led_Rechts_AAN;
     946:	85 e2       	ldi	r24, 0x25	; 37
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	fc 01       	movw	r30, r24
     94c:	20 81       	ld	r18, Z
     94e:	85 e2       	ldi	r24, 0x25	; 37
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	2f 7d       	andi	r18, 0xDF	; 223
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18

00000958 <.Loc.183>:
            MotorLinks_set_percentage(60);
     958:	8c e3       	ldi	r24, 0x3C	; 60
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

00000960 <.Loc.184>:
            MotorRechts_set_percentage(70);
     960:	86 e4       	ldi	r24, 0x46	; 70
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

00000968 <.Loc.185>:
            if (teller > (1400/4))            // hoeveel seconden wachten voordat state veranderd
     968:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     96c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

00000970 <.Loc.186>:
     970:	8e 35       	cpi	r24, 0x5E	; 94
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	9f 07       	cpc	r25, r31
     976:	59 f0       	breq	.+22     	; 0x98e <.L50>
     978:	54 f0       	brlt	.+20     	; 0x98e <.L50>

0000097a <.Loc.187>:
            {
                state = 8;
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     982:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000986 <.Loc.188>:
                teller = 0;
     986:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     98a:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

0000098e <.L50>:
            }
        }
        //draai linksom volle snelheid
        if(state==8)
     98e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     992:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000996 <.Loc.190>:
     996:	88 30       	cpi	r24, 0x08	; 8
     998:	91 05       	cpc	r25, r1
     99a:	09 f5       	brne	.+66     	; 0x9de <.L51>

0000099c <.LBB38>:
        {
            MotorLinks_set_percentage(0);
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

000009a4 <.Loc.192>:
            MotorRechts_set_percentage(50);
     9a4:	82 e3       	ldi	r24, 0x32	; 50
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

000009ac <.Loc.193>:
            if (teller > (1400/4))            // hoeveel seconden wachten voordat state veranderd
     9ac:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     9b0:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

000009b4 <.Loc.194>:
     9b4:	8e 35       	cpi	r24, 0x5E	; 94
     9b6:	21 e0       	ldi	r18, 0x01	; 1
     9b8:	92 07       	cpc	r25, r18
     9ba:	89 f0       	breq	.+34     	; 0x9de <.L51>
     9bc:	84 f0       	brlt	.+32     	; 0x9de <.L51>

000009be <.Loc.195>:
            {
                state = 1;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     9c6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

000009ca <.Loc.196>:
                teller = 0;
     9ca:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     9ce:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

000009d2 <.Loc.197>:
                laatsteBocht = Links;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <laatsteBocht+0x1>
     9da:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <laatsteBocht>

000009de <.L51>:
            }
        }
        if(state==9)
     9de:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     9e2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

000009e6 <.Loc.199>:
     9e6:	89 30       	cpi	r24, 0x09	; 9
     9e8:	91 05       	cpc	r25, r1
     9ea:	d9 f4       	brne	.+54     	; 0xa22 <.L52>

000009ec <.LBB39>:
        {
            MotorLinks_set_percentage(60);
     9ec:	8c e3       	ldi	r24, 0x3C	; 60
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

000009f4 <.Loc.201>:
            MotorRechts_set_percentage(70);
     9f4:	86 e4       	ldi	r24, 0x46	; 70
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

000009fc <.Loc.202>:
            if (teller > (3000/4))            // hoeveel seconden wachten voordat state veranderd
     9fc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     a00:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

00000a04 <.Loc.203>:
     a04:	8e 3e       	cpi	r24, 0xEE	; 238
     a06:	42 e0       	ldi	r20, 0x02	; 2
     a08:	94 07       	cpc	r25, r20
     a0a:	59 f0       	breq	.+22     	; 0xa22 <.L52>
     a0c:	54 f0       	brlt	.+20     	; 0xa22 <.L52>

00000a0e <.Loc.204>:
            {
                state = 10;
     a0e:	8a e0       	ldi	r24, 0x0A	; 10
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     a16:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000a1a <.Loc.205>:
                teller = 0;
     a1a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     a1e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

00000a22 <.L52>:
            }
        }
        if(state==10)
     a22:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     a26:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000a2a <.Loc.207>:
     a2a:	8a 30       	cpi	r24, 0x0A	; 10
     a2c:	91 05       	cpc	r25, r1
     a2e:	d9 f4       	brne	.+54     	; 0xa66 <.L53>

00000a30 <.LBB40>:
        {
            MotorLinks_set_percentage(50);
     a30:	82 e3       	ldi	r24, 0x32	; 50
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

00000a38 <.Loc.209>:
            MotorRechts_set_percentage(0);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

00000a40 <.Loc.210>:
            if (teller > (1450/4))
     a40:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     a44:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

00000a48 <.Loc.211>:
     a48:	8a 36       	cpi	r24, 0x6A	; 106
     a4a:	51 e0       	ldi	r21, 0x01	; 1
     a4c:	95 07       	cpc	r25, r21
     a4e:	59 f0       	breq	.+22     	; 0xa66 <.L53>
     a50:	54 f0       	brlt	.+20     	; 0xa66 <.L53>

00000a52 <.Loc.212>:
            {
                state = 11;
     a52:	8b e0       	ldi	r24, 0x0B	; 11
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     a5a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000a5e <.Loc.213>:
                teller = 0;
     a5e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     a62:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

00000a66 <.L53>:
            }
        }
        //rijd rechtdoor (40%vermogen)
        if(state==11)
     a66:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     a6a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000a6e <.Loc.215>:
     a6e:	8b 30       	cpi	r24, 0x0B	; 11
     a70:	91 05       	cpc	r25, r1
     a72:	69 f5       	brne	.+90     	; 0xace <.L54>

00000a74 <.LBB41>:
        {
            Led_Links_AAN;
     a74:	85 e2       	ldi	r24, 0x25	; 37
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	fc 01       	movw	r30, r24
     a7a:	20 81       	ld	r18, Z
     a7c:	85 e2       	ldi	r24, 0x25	; 37
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	2f 7b       	andi	r18, 0xBF	; 191
     a82:	fc 01       	movw	r30, r24
     a84:	20 83       	st	Z, r18

00000a86 <.Loc.217>:
            Led_Rechts_AAN;
     a86:	85 e2       	ldi	r24, 0x25	; 37
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 81       	ld	r18, Z
     a8e:	85 e2       	ldi	r24, 0x25	; 37
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	2f 7d       	andi	r18, 0xDF	; 223
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18

00000a98 <.Loc.218>:
            MotorLinks_set_percentage(60);
     a98:	8c e3       	ldi	r24, 0x3C	; 60
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

00000aa0 <.Loc.219>:
            MotorRechts_set_percentage(70);
     aa0:	86 e4       	ldi	r24, 0x46	; 70
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

00000aa8 <.Loc.220>:
            if (teller > (1400/4))            // hoeveel seconden wachten voordat state veranderd
     aa8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     aac:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

00000ab0 <.Loc.221>:
     ab0:	8e 35       	cpi	r24, 0x5E	; 94
     ab2:	f1 e0       	ldi	r31, 0x01	; 1
     ab4:	9f 07       	cpc	r25, r31
     ab6:	59 f0       	breq	.+22     	; 0xace <.L54>
     ab8:	54 f0       	brlt	.+20     	; 0xace <.L54>

00000aba <.Loc.222>:
            {
                state = 12;
     aba:	8c e0       	ldi	r24, 0x0C	; 12
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     ac2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000ac6 <.Loc.223>:
                teller = 0;
     ac6:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     aca:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

00000ace <.L54>:
            }
        }
        //draai rechtsom volle snelheid
        if(state==12)
     ace:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     ad2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000ad6 <.Loc.225>:
     ad6:	8c 30       	cpi	r24, 0x0C	; 12
     ad8:	91 05       	cpc	r25, r1
     ada:	09 f5       	brne	.+66     	; 0xb1e <.L55>

00000adc <.LBB42>:
        {
            MotorLinks_set_percentage(50);
     adc:	82 e3       	ldi	r24, 0x32	; 50
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

00000ae4 <.Loc.227>:
            MotorRechts_set_percentage(0);
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

00000aec <.Loc.228>:
            if (teller > (1400/4))            // hoeveel seconden wachten voordat state veranderd
     aec:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     af0:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

00000af4 <.Loc.229>:
     af4:	8e 35       	cpi	r24, 0x5E	; 94
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	92 07       	cpc	r25, r18
     afa:	89 f0       	breq	.+34     	; 0xb1e <.L55>
     afc:	84 f0       	brlt	.+32     	; 0xb1e <.L55>

00000afe <.Loc.230>:
            {
                state = 1;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     b06:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000b0a <.Loc.231>:
                teller = 0;
     b0a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     b0e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

00000b12 <.Loc.232>:
                laatsteBocht = Rechts;
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <laatsteBocht+0x1>
     b1a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <laatsteBocht>

00000b1e <.L55>:
            }
        }
        if(state==99)
     b1e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     b22:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000b26 <.Loc.234>:
     b26:	83 36       	cpi	r24, 0x63	; 99
     b28:	91 05       	cpc	r25, r1
     b2a:	d9 f4       	brne	.+54     	; 0xb62 <.L56>

00000b2c <.LBB43>:
        {
            MotorLinks_set_percentage(0);
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

00000b34 <.Loc.236>:
            MotorRechts_set_percentage(0);
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

00000b3c <.Loc.237>:
            if (teller > (2000/4))
     b3c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     b40:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

00000b44 <.Loc.238>:
     b44:	84 3f       	cpi	r24, 0xF4	; 244
     b46:	41 e0       	ldi	r20, 0x01	; 1
     b48:	94 07       	cpc	r25, r20
     b4a:	59 f0       	breq	.+22     	; 0xb62 <.L56>
     b4c:	54 f0       	brlt	.+20     	; 0xb62 <.L56>

00000b4e <.Loc.239>:
            {
                state = 100;
     b4e:	84 e6       	ldi	r24, 0x64	; 100
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     b56:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000b5a <.Loc.240>:
                teller = 0;
     b5a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     b5e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

00000b62 <.L56>:
            }
        }
        if(state==100)
     b62:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     b66:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000b6a <.Loc.242>:
     b6a:	84 36       	cpi	r24, 0x64	; 100
     b6c:	91 05       	cpc	r25, r1
     b6e:	d9 f4       	brne	.+54     	; 0xba6 <.L57>

00000b70 <.LBB44>:
        {
            MotorLinks_set_percentage(60);
     b70:	8c e3       	ldi	r24, 0x3C	; 60
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

00000b78 <.Loc.244>:
            MotorRechts_set_percentage(70);
     b78:	86 e4       	ldi	r24, 0x46	; 70
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

00000b80 <.Loc.245>:
            if (teller > (2000/4))
     b80:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <teller>
     b84:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <teller+0x1>

00000b88 <.Loc.246>:
     b88:	84 3f       	cpi	r24, 0xF4	; 244
     b8a:	51 e0       	ldi	r21, 0x01	; 1
     b8c:	95 07       	cpc	r25, r21
     b8e:	59 f0       	breq	.+22     	; 0xba6 <.L57>
     b90:	54 f0       	brlt	.+20     	; 0xba6 <.L57>

00000b92 <.Loc.247>:
            {
                state = 101;
     b92:	85 e6       	ldi	r24, 0x65	; 101
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
     b9a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

00000b9e <.Loc.248>:
                teller = 0;
     b9e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <teller+0x1>
     ba2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <teller>

00000ba6 <.L57>:
            }
        }
        if(state==101)
     ba6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
     baa:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000bae <.Loc.250>:
     bae:	85 36       	cpi	r24, 0x65	; 101
     bb0:	91 05       	cpc	r25, r1
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <.LBB45>

00000bb4 <L0^A>:
     bb4:	7b cd       	rjmp	.-1290   	; 0x6ac <.L59>

00000bb6 <.LBB45>:
        {
            MotorLinks_set_percentage(0);
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 6d 06 	call	0xcda	; 0xcda <MotorLinks_set_percentage>

00000bbe <.Loc.252>:
            MotorRechts_set_percentage(0);
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 15 07 	call	0xe2a	; 0xe2a <MotorRechts_set_percentage>

00000bc6 <.Loc.253>:
            waarschuwLampjes_AAN;
     bc6:	8b e0       	ldi	r24, 0x0B	; 11
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	fc 01       	movw	r30, r24
     bcc:	20 81       	ld	r18, Z
     bce:	8b e0       	ldi	r24, 0x0B	; 11
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	2f 7e       	andi	r18, 0xEF	; 239
     bd4:	fc 01       	movw	r30, r24
     bd6:	20 83       	st	Z, r18

00000bd8 <.LBE45>:
        rotary_1 = RotaryGetStatus();       //rotary_1 krijgt de waarde 0 1 of 2 van de rotary encoder uit rotary.c
     bd8:	69 cd       	rjmp	.-1326   	; 0x6ac <.L59>

00000bda <__vector_23>:
     bda:	1f 92       	push	r1
     bdc:	1f b6       	in	r1, 0x3f	; 63
     bde:	1f 92       	push	r1
     be0:	11 24       	eor	r1, r1
     be2:	8f 93       	push	r24
     be4:	8b b7       	in	r24, 0x3b	; 59
     be6:	8f 93       	push	r24
     be8:	ef 93       	push	r30
     bea:	ff 93       	push	r31

00000bec <.Loc.1>:
     bec:	87 b5       	in	r24, 0x27	; 39

00000bee <.Loc.3>:
     bee:	81 11       	cpse	r24, r1
     bf0:	0c c0       	rjmp	.+24     	; 0xc0a <.L2>

00000bf2 <.Loc.4>:
     bf2:	88 b5       	in	r24, 0x28	; 40

00000bf4 <.Loc.5>:
     bf4:	81 11       	cpse	r24, r1
     bf6:	09 c0       	rjmp	.+18     	; 0xc0a <.L2>

00000bf8 <.Loc.6>:
     bf8:	eb e0       	ldi	r30, 0x0B	; 11
     bfa:	f1 e0       	ldi	r31, 0x01	; 1
     bfc:	80 81       	ld	r24, Z
     bfe:	8e 7f       	andi	r24, 0xFE	; 254
     c00:	80 83       	st	Z, r24

00000c02 <.Loc.8>:
     c02:	80 81       	ld	r24, Z
     c04:	8d 7f       	andi	r24, 0xFD	; 253
     c06:	80 83       	st	Z, r24
     c08:	0b c0       	rjmp	.+22     	; 0xc20 <.L1>

00000c0a <.L2>:
     c0a:	87 b5       	in	r24, 0x27	; 39

00000c0c <.Loc.12>:
     c0c:	88 23       	and	r24, r24
     c0e:	89 f0       	breq	.+34     	; 0xc32 <.L4>

00000c10 <.Loc.13>:
     c10:	eb e0       	ldi	r30, 0x0B	; 11
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	80 81       	ld	r24, Z
     c16:	8d 7f       	andi	r24, 0xFD	; 253
     c18:	80 83       	st	Z, r24

00000c1a <.Loc.15>:
     c1a:	80 81       	ld	r24, Z

00000c1c <.Loc.16>:
     c1c:	81 60       	ori	r24, 0x01	; 1
     c1e:	80 83       	st	Z, r24

00000c20 <.L1>:
     c20:	ff 91       	pop	r31
     c22:	ef 91       	pop	r30
     c24:	8f 91       	pop	r24
     c26:	8b bf       	out	0x3b, r24	; 59
     c28:	8f 91       	pop	r24
     c2a:	1f 90       	pop	r1
     c2c:	1f be       	out	0x3f, r1	; 63
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <.L4>:
     c32:	88 b5       	in	r24, 0x28	; 40

00000c34 <.Loc.20>:
     c34:	88 23       	and	r24, r24
     c36:	a1 f3       	breq	.-24     	; 0xc20 <.L1>

00000c38 <.Loc.21>:
     c38:	eb e0       	ldi	r30, 0x0B	; 11
     c3a:	f1 e0       	ldi	r31, 0x01	; 1
     c3c:	80 81       	ld	r24, Z
     c3e:	8e 7f       	andi	r24, 0xFE	; 254
     c40:	80 83       	st	Z, r24

00000c42 <.Loc.23>:
     c42:	80 81       	ld	r24, Z

00000c44 <.Loc.24>:
     c44:	82 60       	ori	r24, 0x02	; 2
     c46:	80 83       	st	Z, r24

00000c48 <.Loc.25>:
     c48:	eb cf       	rjmp	.-42     	; 0xc20 <.L1>

00000c4a <__vector_21>:
     c4a:	8f 93       	push	r24
     c4c:	8f b7       	in	r24, 0x3f	; 63
     c4e:	8f 93       	push	r24
     c50:	8b b7       	in	r24, 0x3b	; 59
     c52:	8f 93       	push	r24
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31

00000c58 <.Loc.27>:
     c58:	87 b5       	in	r24, 0x27	; 39

00000c5a <.Loc.29>:
     c5a:	8f 3f       	cpi	r24, 0xFF	; 255
     c5c:	29 f0       	breq	.+10     	; 0xc68 <.L5>

00000c5e <.Loc.30>:
     c5e:	eb e0       	ldi	r30, 0x0B	; 11
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	80 81       	ld	r24, Z
     c64:	8e 7f       	andi	r24, 0xFE	; 254
     c66:	80 83       	st	Z, r24

00000c68 <.L5>:
     c68:	ff 91       	pop	r31
     c6a:	ef 91       	pop	r30
     c6c:	8f 91       	pop	r24
     c6e:	8b bf       	out	0x3b, r24	; 59
     c70:	8f 91       	pop	r24
     c72:	8f bf       	out	0x3f, r24	; 63
     c74:	8f 91       	pop	r24
     c76:	18 95       	reti

00000c78 <__vector_22>:
     c78:	8f 93       	push	r24
     c7a:	8f b7       	in	r24, 0x3f	; 63
     c7c:	8f 93       	push	r24
     c7e:	8b b7       	in	r24, 0x3b	; 59
     c80:	8f 93       	push	r24
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31

00000c86 <.Loc.34>:
     c86:	88 b5       	in	r24, 0x28	; 40

00000c88 <.Loc.36>:
     c88:	8f 3f       	cpi	r24, 0xFF	; 255
     c8a:	29 f0       	breq	.+10     	; 0xc96 <.L7>

00000c8c <.Loc.37>:
     c8c:	eb e0       	ldi	r30, 0x0B	; 11
     c8e:	f1 e0       	ldi	r31, 0x01	; 1
     c90:	80 81       	ld	r24, Z
     c92:	8d 7f       	andi	r24, 0xFD	; 253
     c94:	80 83       	st	Z, r24

00000c96 <.L7>:
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	8f 91       	pop	r24
     c9c:	8b bf       	out	0x3b, r24	; 59
     c9e:	8f 91       	pop	r24
     ca0:	8f bf       	out	0x3f, r24	; 63
     ca2:	8f 91       	pop	r24
     ca4:	18 95       	reti

00000ca6 <init_MotorLinks>:
     ca6:	ea e0       	ldi	r30, 0x0A	; 10
     ca8:	f1 e0       	ldi	r31, 0x01	; 1
     caa:	80 81       	ld	r24, Z

00000cac <.Loc.42>:
     cac:	81 60       	ori	r24, 0x01	; 1
     cae:	80 83       	st	Z, r24

00000cb0 <.Loc.43>:
     cb0:	80 81       	ld	r24, Z

00000cb2 <.Loc.44>:
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	80 83       	st	Z, r24

00000cb6 <.Loc.45>:
     cb6:	eb e0       	ldi	r30, 0x0B	; 11
     cb8:	f1 e0       	ldi	r31, 0x01	; 1
     cba:	80 81       	ld	r24, Z
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	80 83       	st	Z, r24

00000cc0 <.Loc.47>:
     cc0:	80 81       	ld	r24, Z
     cc2:	8d 7f       	andi	r24, 0xFD	; 253
     cc4:	80 83       	st	Z, r24

00000cc6 <.Loc.49>:
     cc6:	14 bc       	out	0x24, r1	; 36

00000cc8 <.Loc.51>:
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	85 bd       	out	0x25, r24	; 37

00000ccc <.Loc.53>:
     ccc:	17 bc       	out	0x27, r1	; 39

00000cce <.Loc.55>:
     cce:	18 bc       	out	0x28, r1	; 40

00000cd0 <.Loc.57>:
     cd0:	87 e0       	ldi	r24, 0x07	; 7
     cd2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>

00000cd6 <.Loc.59>:
     cd6:	78 94       	sei

00000cd8 <.Loc.60>:
     cd8:	08 95       	ret

00000cda <MotorLinks_set_percentage>:
     cda:	94 e6       	ldi	r25, 0x64	; 100
     cdc:	98 0f       	add	r25, r24

00000cde <.Loc.64>:
     cde:	99 3c       	cpi	r25, 0xC9	; 201
     ce0:	c8 f4       	brcc	.+50     	; 0xd14 <.L10>

00000ce2 <.Loc.65>:
     ce2:	88 23       	and	r24, r24
     ce4:	64 f0       	brlt	.+24     	; 0xcfe <.L12>

00000ce6 <.Loc.67>:
     ce6:	18 bc       	out	0x28, r1	; 40

00000ce8 <.Loc.69>:
     ce8:	28 2f       	mov	r18, r24
     cea:	3f ef       	ldi	r19, 0xFF	; 255
     cec:	23 03       	mulsu	r18, r19
     cee:	c0 01       	movw	r24, r0
     cf0:	11 24       	eor	r1, r1

00000cf2 <.Loc.71>:
     cf2:	64 e6       	ldi	r22, 0x64	; 100
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__divmodhi4>

00000cfa <.Loc.72>:
     cfa:	67 bd       	out	0x27, r22	; 39
     cfc:	08 95       	ret

00000cfe <.L12>:
     cfe:	17 bc       	out	0x27, r1	; 39

00000d00 <.Loc.75>:
     d00:	28 2f       	mov	r18, r24
     d02:	3f ef       	ldi	r19, 0xFF	; 255
     d04:	23 03       	mulsu	r18, r19
     d06:	c0 01       	movw	r24, r0
     d08:	11 24       	eor	r1, r1

00000d0a <.Loc.77>:
     d0a:	6c e9       	ldi	r22, 0x9C	; 156
     d0c:	7f ef       	ldi	r23, 0xFF	; 255
     d0e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__divmodhi4>

00000d12 <.Loc.78>:
     d12:	68 bd       	out	0x28, r22	; 40

00000d14 <.L10>:
     d14:	08 95       	ret

00000d16 <__vector_15>:
     d16:	1f 92       	push	r1
     d18:	1f b6       	in	r1, 0x3f	; 63
     d1a:	1f 92       	push	r1
     d1c:	11 24       	eor	r1, r1
     d1e:	8f 93       	push	r24
     d20:	8b b7       	in	r24, 0x3b	; 59
     d22:	8f 93       	push	r24
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31

00000d28 <.Loc.1>:
     d28:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000d2c <.Loc.3>:
     d2c:	81 11       	cpse	r24, r1
     d2e:	0d c0       	rjmp	.+26     	; 0xd4a <.L2>

00000d30 <.Loc.4>:
     d30:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000d34 <.Loc.5>:
     d34:	81 11       	cpse	r24, r1
     d36:	09 c0       	rjmp	.+18     	; 0xd4a <.L2>

00000d38 <.Loc.6>:
     d38:	eb e0       	ldi	r30, 0x0B	; 11
     d3a:	f1 e0       	ldi	r31, 0x01	; 1
     d3c:	80 81       	ld	r24, Z
     d3e:	8b 7f       	andi	r24, 0xFB	; 251
     d40:	80 83       	st	Z, r24

00000d42 <.Loc.8>:
     d42:	80 81       	ld	r24, Z
     d44:	87 7f       	andi	r24, 0xF7	; 247
     d46:	80 83       	st	Z, r24
     d48:	0c c0       	rjmp	.+24     	; 0xd62 <.L1>

00000d4a <.L2>:
     d4a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000d4e <.Loc.12>:
     d4e:	88 23       	and	r24, r24
     d50:	89 f0       	breq	.+34     	; 0xd74 <.L4>

00000d52 <.Loc.13>:
     d52:	eb e0       	ldi	r30, 0x0B	; 11
     d54:	f1 e0       	ldi	r31, 0x01	; 1
     d56:	80 81       	ld	r24, Z
     d58:	87 7f       	andi	r24, 0xF7	; 247
     d5a:	80 83       	st	Z, r24

00000d5c <.Loc.15>:
     d5c:	80 81       	ld	r24, Z

00000d5e <.Loc.16>:
     d5e:	84 60       	ori	r24, 0x04	; 4
     d60:	80 83       	st	Z, r24

00000d62 <.L1>:
     d62:	ff 91       	pop	r31
     d64:	ef 91       	pop	r30
     d66:	8f 91       	pop	r24
     d68:	8b bf       	out	0x3b, r24	; 59
     d6a:	8f 91       	pop	r24
     d6c:	1f 90       	pop	r1
     d6e:	1f be       	out	0x3f, r1	; 63
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <.L4>:
     d74:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000d78 <.Loc.20>:
     d78:	88 23       	and	r24, r24
     d7a:	99 f3       	breq	.-26     	; 0xd62 <.L1>

00000d7c <.Loc.21>:
     d7c:	eb e0       	ldi	r30, 0x0B	; 11
     d7e:	f1 e0       	ldi	r31, 0x01	; 1
     d80:	80 81       	ld	r24, Z
     d82:	8b 7f       	andi	r24, 0xFB	; 251
     d84:	80 83       	st	Z, r24

00000d86 <.Loc.23>:
     d86:	80 81       	ld	r24, Z

00000d88 <.Loc.24>:
     d88:	88 60       	ori	r24, 0x08	; 8
     d8a:	80 83       	st	Z, r24

00000d8c <.Loc.25>:
     d8c:	ea cf       	rjmp	.-44     	; 0xd62 <.L1>

00000d8e <__vector_13>:
     d8e:	8f 93       	push	r24
     d90:	8f b7       	in	r24, 0x3f	; 63
     d92:	8f 93       	push	r24
     d94:	8b b7       	in	r24, 0x3b	; 59
     d96:	8f 93       	push	r24
     d98:	ef 93       	push	r30
     d9a:	ff 93       	push	r31

00000d9c <.Loc.27>:
     d9c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000da0 <.Loc.29>:
     da0:	8f 3f       	cpi	r24, 0xFF	; 255
     da2:	29 f0       	breq	.+10     	; 0xdae <.L5>

00000da4 <.Loc.30>:
     da4:	eb e0       	ldi	r30, 0x0B	; 11
     da6:	f1 e0       	ldi	r31, 0x01	; 1
     da8:	80 81       	ld	r24, Z
     daa:	8b 7f       	andi	r24, 0xFB	; 251
     dac:	80 83       	st	Z, r24

00000dae <.L5>:
     dae:	ff 91       	pop	r31
     db0:	ef 91       	pop	r30
     db2:	8f 91       	pop	r24
     db4:	8b bf       	out	0x3b, r24	; 59
     db6:	8f 91       	pop	r24
     db8:	8f bf       	out	0x3f, r24	; 63
     dba:	8f 91       	pop	r24
     dbc:	18 95       	reti

00000dbe <__vector_14>:
     dbe:	8f 93       	push	r24
     dc0:	8f b7       	in	r24, 0x3f	; 63
     dc2:	8f 93       	push	r24
     dc4:	8b b7       	in	r24, 0x3b	; 59
     dc6:	8f 93       	push	r24
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31

00000dcc <.Loc.34>:
     dcc:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000dd0 <.Loc.36>:
     dd0:	8f 3f       	cpi	r24, 0xFF	; 255
     dd2:	29 f0       	breq	.+10     	; 0xdde <.L7>

00000dd4 <.Loc.37>:
     dd4:	eb e0       	ldi	r30, 0x0B	; 11
     dd6:	f1 e0       	ldi	r31, 0x01	; 1
     dd8:	80 81       	ld	r24, Z
     dda:	87 7f       	andi	r24, 0xF7	; 247
     ddc:	80 83       	st	Z, r24

00000dde <.L7>:
     dde:	ff 91       	pop	r31
     de0:	ef 91       	pop	r30
     de2:	8f 91       	pop	r24
     de4:	8b bf       	out	0x3b, r24	; 59
     de6:	8f 91       	pop	r24
     de8:	8f bf       	out	0x3f, r24	; 63
     dea:	8f 91       	pop	r24
     dec:	18 95       	reti

00000dee <init_MotorRechts>:
     dee:	ea e0       	ldi	r30, 0x0A	; 10
     df0:	f1 e0       	ldi	r31, 0x01	; 1
     df2:	80 81       	ld	r24, Z

00000df4 <.Loc.42>:
     df4:	84 60       	ori	r24, 0x04	; 4
     df6:	80 83       	st	Z, r24

00000df8 <.Loc.43>:
     df8:	80 81       	ld	r24, Z

00000dfa <.Loc.44>:
     dfa:	88 60       	ori	r24, 0x08	; 8
     dfc:	80 83       	st	Z, r24

00000dfe <.Loc.45>:
     dfe:	eb e0       	ldi	r30, 0x0B	; 11
     e00:	f1 e0       	ldi	r31, 0x01	; 1
     e02:	80 81       	ld	r24, Z
     e04:	8b 7f       	andi	r24, 0xFB	; 251
     e06:	80 83       	st	Z, r24

00000e08 <.Loc.47>:
     e08:	80 81       	ld	r24, Z
     e0a:	87 7f       	andi	r24, 0xF7	; 247
     e0c:	80 83       	st	Z, r24

00000e0e <.Loc.49>:
     e0e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>

00000e12 <.Loc.51>:
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

00000e18 <.Loc.53>:
     e18:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000e1c <.Loc.55>:
     e1c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000e20 <.Loc.57>:
     e20:	87 e0       	ldi	r24, 0x07	; 7
     e22:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>

00000e26 <.Loc.59>:
     e26:	78 94       	sei

00000e28 <.Loc.60>:
     e28:	08 95       	ret

00000e2a <MotorRechts_set_percentage>:
     e2a:	94 e6       	ldi	r25, 0x64	; 100
     e2c:	98 0f       	add	r25, r24

00000e2e <.Loc.64>:
     e2e:	99 3c       	cpi	r25, 0xC9	; 201
     e30:	e8 f4       	brcc	.+58     	; 0xe6c <.L10>

00000e32 <.Loc.65>:
     e32:	88 23       	and	r24, r24
     e34:	74 f0       	brlt	.+28     	; 0xe52 <.L12>

00000e36 <.Loc.67>:
     e36:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000e3a <.Loc.69>:
     e3a:	28 2f       	mov	r18, r24
     e3c:	3f ef       	ldi	r19, 0xFF	; 255
     e3e:	23 03       	mulsu	r18, r19
     e40:	c0 01       	movw	r24, r0
     e42:	11 24       	eor	r1, r1

00000e44 <.Loc.71>:
     e44:	64 e6       	ldi	r22, 0x64	; 100
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__divmodhi4>

00000e4c <.Loc.72>:
     e4c:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
     e50:	08 95       	ret

00000e52 <.L12>:
     e52:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000e56 <.Loc.75>:
     e56:	28 2f       	mov	r18, r24
     e58:	3f ef       	ldi	r19, 0xFF	; 255
     e5a:	23 03       	mulsu	r18, r19
     e5c:	c0 01       	movw	r24, r0
     e5e:	11 24       	eor	r1, r1

00000e60 <.Loc.77>:
     e60:	6c e9       	ldi	r22, 0x9C	; 156
     e62:	7f ef       	ldi	r23, 0xFF	; 255
     e64:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__divmodhi4>

00000e68 <.Loc.78>:
     e68:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000e6c <.L10>:
     e6c:	08 95       	ret

00000e6e <RotaryInit>:
     e6e:	81 b1       	in	r24, 0x01	; 1
     e70:	8a 7f       	andi	r24, 0xFA	; 250
     e72:	81 b9       	out	0x01, r24	; 1

00000e74 <.Loc.3>:
     e74:	82 b1       	in	r24, 0x02	; 2

00000e76 <.Loc.4>:
     e76:	85 60       	ori	r24, 0x05	; 5
     e78:	82 b9       	out	0x02, r24	; 2

00000e7a <.Loc.5>:
     e7a:	08 95       	ret

00000e7c <RotaryCheckStatus>:
     e7c:	80 b1       	in	r24, 0x00	; 0

00000e7e <.Loc.9>:
     e7e:	90 b1       	in	r25, 0x00	; 0

00000e80 <.Loc.10>:
     e80:	80 fd       	sbrc	r24, 0
     e82:	0d c0       	rjmp	.+26     	; 0xe9e <.L3>
     e84:	92 ff       	sbrs	r25, 2
     e86:	0b c0       	rjmp	.+22     	; 0xe9e <.L3>

00000e88 <.L4>:
     e88:	00 9b       	sbis	0x00, 0	; 0
     e8a:	fe cf       	rjmp	.-4      	; 0xe88 <.L4>

00000e8c <.Loc.14>:
     e8c:	02 99       	sbic	0x00, 2	; 0
     e8e:	30 c0       	rjmp	.+96     	; 0xef0 <.L2>

00000e90 <.Loc.16>:
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <rotarystatus+0x1>
     e98:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <rotarystatus>
     e9c:	08 95       	ret

00000e9e <.L3>:
     e9e:	80 b1       	in	r24, 0x00	; 0

00000ea0 <.Loc.20>:
     ea0:	90 b1       	in	r25, 0x00	; 0

00000ea2 <.Loc.21>:
     ea2:	82 fd       	sbrc	r24, 2
     ea4:	0d c0       	rjmp	.+26     	; 0xec0 <.L6>
     ea6:	90 ff       	sbrs	r25, 0
     ea8:	0b c0       	rjmp	.+22     	; 0xec0 <.L6>

00000eaa <.L7>:
     eaa:	02 9b       	sbis	0x00, 2	; 0
     eac:	fe cf       	rjmp	.-4      	; 0xeaa <.L7>

00000eae <.Loc.25>:
     eae:	00 99       	sbic	0x00, 0	; 0
     eb0:	1f c0       	rjmp	.+62     	; 0xef0 <.L2>

00000eb2 <.Loc.27>:
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <rotarystatus+0x1>
     eba:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <rotarystatus>
     ebe:	08 95       	ret

00000ec0 <.L6>:
     ec0:	80 b1       	in	r24, 0x00	; 0

00000ec2 <.Loc.31>:
     ec2:	90 b1       	in	r25, 0x00	; 0

00000ec4 <.Loc.32>:
     ec4:	81 70       	andi	r24, 0x01	; 1
     ec6:	94 70       	andi	r25, 0x04	; 4

00000ec8 <.Loc.33>:
     ec8:	89 2b       	or	r24, r25
     eca:	81 11       	cpse	r24, r1
     ecc:	11 c0       	rjmp	.+34     	; 0xef0 <.L2>

00000ece <.L8>:
     ece:	00 9b       	sbis	0x00, 0	; 0
     ed0:	fe cf       	rjmp	.-4      	; 0xece <.L8>

00000ed2 <.Loc.37>:
     ed2:	02 99       	sbic	0x00, 2	; 0
     ed4:	07 c0       	rjmp	.+14     	; 0xee4 <.L9>

00000ed6 <.Loc.39>:
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <rotarystatus+0x1>
     ede:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <rotarystatus>
     ee2:	08 95       	ret

00000ee4 <.L9>:
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <rotarystatus+0x1>
     eec:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <rotarystatus>

00000ef0 <.L2>:
     ef0:	08 95       	ret

00000ef2 <RotaryGetStatus>:
     ef2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rotarystatus>
     ef6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <rotarystatus+0x1>

00000efa <.Loc.47>:
     efa:	08 95       	ret

00000efc <RotaryResetStatus>:
     efc:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <rotarystatus+0x1>
     f00:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <rotarystatus>

00000f04 <.Loc.51>:
     f04:	08 95       	ret

00000f06 <Timer1_Start>:
     f06:	e1 e8       	ldi	r30, 0x81	; 129
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z

00000f0c <.Loc.54>:
     f0c:	81 60       	ori	r24, 0x01	; 1
     f0e:	80 83       	st	Z, r24

00000f10 <.Loc.55>:
     f10:	ef e6       	ldi	r30, 0x6F	; 111
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z

00000f16 <.Loc.56>:
     f16:	81 60       	ori	r24, 0x01	; 1
     f18:	80 83       	st	Z, r24

00000f1a <.Loc.57>:
     f1a:	08 95       	ret

00000f1c <__vector_20>:
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	0b b6       	in	r0, 0x3b	; 59
     f28:	0f 92       	push	r0
     f2a:	2f 93       	push	r18
     f2c:	3f 93       	push	r19
     f2e:	4f 93       	push	r20
     f30:	5f 93       	push	r21
     f32:	6f 93       	push	r22
     f34:	7f 93       	push	r23
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
     f3a:	af 93       	push	r26
     f3c:	bf 93       	push	r27
     f3e:	ef 93       	push	r30
     f40:	ff 93       	push	r31

00000f42 <.Loc.59>:
     f42:	0e 94 3e 07 	call	0xe7c	; 0xe7c <RotaryCheckStatus>

00000f46 <.LVL0>:
     f46:	ff 91       	pop	r31
     f48:	ef 91       	pop	r30
     f4a:	bf 91       	pop	r27
     f4c:	af 91       	pop	r26
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	7f 91       	pop	r23
     f54:	6f 91       	pop	r22
     f56:	5f 91       	pop	r21
     f58:	4f 91       	pop	r20
     f5a:	3f 91       	pop	r19
     f5c:	2f 91       	pop	r18
     f5e:	0f 90       	pop	r0
     f60:	0b be       	out	0x3b, r0	; 59
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__divmodhi4>:
     f6c:	97 fb       	bst	r25, 7

00000f6e <.Loc.1>:
     f6e:	07 2e       	mov	r0, r23

00000f70 <.Loc.2>:
     f70:	16 f4       	brtc	.+4      	; 0xf76 <.L^B1>

00000f72 <.Loc.3>:
     f72:	00 94       	com	r0

00000f74 <.Loc.4>:
     f74:	07 d0       	rcall	.+14     	; 0xf84 <__divmodhi4_neg1>

00000f76 <.L^B1>:
     f76:	77 fd       	sbrc	r23, 7

00000f78 <.Loc.6>:
     f78:	09 d0       	rcall	.+18     	; 0xf8c <__divmodhi4_neg2>

00000f7a <.Loc.7>:
     f7a:	0e 94 ca 07 	call	0xf94	; 0xf94 <__udivmodhi4>

00000f7e <.Loc.8>:
     f7e:	07 fc       	sbrc	r0, 7

00000f80 <.Loc.9>:
     f80:	05 d0       	rcall	.+10     	; 0xf8c <__divmodhi4_neg2>

00000f82 <.Loc.10>:
     f82:	3e f4       	brtc	.+14     	; 0xf92 <__divmodhi4_exit>

00000f84 <__divmodhi4_neg1>:
     f84:	90 95       	com	r25

00000f86 <.Loc.12>:
     f86:	81 95       	neg	r24

00000f88 <.Loc.13>:
     f88:	9f 4f       	sbci	r25, 0xFF	; 255

00000f8a <.Loc.14>:
     f8a:	08 95       	ret

00000f8c <__divmodhi4_neg2>:
     f8c:	70 95       	com	r23

00000f8e <.Loc.16>:
     f8e:	61 95       	neg	r22

00000f90 <.Loc.17>:
     f90:	7f 4f       	sbci	r23, 0xFF	; 255

00000f92 <__divmodhi4_exit>:
     f92:	08 95       	ret

00000f94 <__udivmodhi4>:
     f94:	aa 1b       	sub	r26, r26

00000f96 <.Loc.1>:
     f96:	bb 1b       	sub	r27, r27

00000f98 <.Loc.2>:
     f98:	51 e1       	ldi	r21, 0x11	; 17

00000f9a <.Loc.3>:
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <__udivmodhi4_ep>

00000f9c <__udivmodhi4_loop>:
     f9c:	aa 1f       	adc	r26, r26

00000f9e <.Loc.5>:
     f9e:	bb 1f       	adc	r27, r27

00000fa0 <.Loc.6>:
     fa0:	a6 17       	cp	r26, r22

00000fa2 <.Loc.7>:
     fa2:	b7 07       	cpc	r27, r23

00000fa4 <.Loc.8>:
     fa4:	10 f0       	brcs	.+4      	; 0xfaa <__udivmodhi4_ep>

00000fa6 <.Loc.9>:
     fa6:	a6 1b       	sub	r26, r22

00000fa8 <.Loc.10>:
     fa8:	b7 0b       	sbc	r27, r23

00000faa <__udivmodhi4_ep>:
     faa:	88 1f       	adc	r24, r24

00000fac <.Loc.12>:
     fac:	99 1f       	adc	r25, r25

00000fae <.Loc.13>:
     fae:	5a 95       	dec	r21

00000fb0 <.Loc.14>:
     fb0:	a9 f7       	brne	.-22     	; 0xf9c <__udivmodhi4_loop>

00000fb2 <.Loc.15>:
     fb2:	80 95       	com	r24

00000fb4 <.Loc.16>:
     fb4:	90 95       	com	r25

00000fb6 <.Loc.17>:
     fb6:	bc 01       	movw	r22, r24

00000fb8 <.Loc.18>:
     fb8:	cd 01       	movw	r24, r26

00000fba <.Loc.19>:
     fba:	08 95       	ret

00000fbc <__cmpsf2>:
     fbc:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_cmp>
     fc0:	08 f4       	brcc	.+2      	; 0xfc4 <.L1^B1>
     fc2:	81 e0       	ldi	r24, 0x01	; 1

00000fc4 <.L1^B1>:
     fc4:	08 95       	ret

00000fc6 <__fixunssfsi>:
     fc6:	0e 94 3e 08 	call	0x107c	; 0x107c <__fp_splitA>
     fca:	88 f0       	brcs	.+34     	; 0xfee <.L_err>
     fcc:	9f 57       	subi	r25, 0x7F	; 127
     fce:	98 f0       	brcs	.+38     	; 0xff6 <.L_zr>
     fd0:	b9 2f       	mov	r27, r25
     fd2:	99 27       	eor	r25, r25
     fd4:	b7 51       	subi	r27, 0x17	; 23
     fd6:	b0 f0       	brcs	.+44     	; 0x1004 <.L4^B1>
     fd8:	e1 f0       	breq	.+56     	; 0x1012 <.L_sign>

00000fda <.L1^B1>:
     fda:	66 0f       	add	r22, r22
     fdc:	77 1f       	adc	r23, r23
     fde:	88 1f       	adc	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	1a f0       	brmi	.+6      	; 0xfea <.L2^B1>
     fe4:	ba 95       	dec	r27
     fe6:	c9 f7       	brne	.-14     	; 0xfda <.L1^B1>
     fe8:	14 c0       	rjmp	.+40     	; 0x1012 <.L_sign>

00000fea <.L2^B1>:
     fea:	b1 30       	cpi	r27, 0x01	; 1
     fec:	91 f0       	breq	.+36     	; 0x1012 <.L_sign>

00000fee <.L_err>:
     fee:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fp_zero>
     ff2:	b1 e0       	ldi	r27, 0x01	; 1
     ff4:	08 95       	ret

00000ff6 <.L_zr>:
     ff6:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__fp_zero>

00000ffa <.L3^B1>:
     ffa:	67 2f       	mov	r22, r23
     ffc:	78 2f       	mov	r23, r24
     ffe:	88 27       	eor	r24, r24
    1000:	b8 5f       	subi	r27, 0xF8	; 248
    1002:	39 f0       	breq	.+14     	; 0x1012 <.L_sign>

00001004 <.L4^B1>:
    1004:	b9 3f       	cpi	r27, 0xF9	; 249
    1006:	cc f3       	brlt	.-14     	; 0xffa <.L3^B1>

00001008 <.L5^B1>:
    1008:	86 95       	lsr	r24
    100a:	77 95       	ror	r23
    100c:	67 95       	ror	r22
    100e:	b3 95       	inc	r27
    1010:	d9 f7       	brne	.-10     	; 0x1008 <.L5^B1>

00001012 <.L_sign>:
    1012:	3e f4       	brtc	.+14     	; 0x1022 <.L6^B1>
    1014:	90 95       	com	r25
    1016:	80 95       	com	r24
    1018:	70 95       	com	r23
    101a:	61 95       	neg	r22
    101c:	7f 4f       	sbci	r23, 0xFF	; 255
    101e:	8f 4f       	sbci	r24, 0xFF	; 255
    1020:	9f 4f       	sbci	r25, 0xFF	; 255

00001022 <.L6^B1>:
    1022:	08 95       	ret

00001024 <__fp_cmp>:
    1024:	99 0f       	add	r25, r25
    1026:	00 08       	sbc	r0, r0
    1028:	55 0f       	add	r21, r21
    102a:	aa 0b       	sbc	r26, r26
    102c:	e0 e8       	ldi	r30, 0x80	; 128
    102e:	fe ef       	ldi	r31, 0xFE	; 254
    1030:	16 16       	cp	r1, r22
    1032:	17 06       	cpc	r1, r23
    1034:	e8 07       	cpc	r30, r24
    1036:	f9 07       	cpc	r31, r25
    1038:	c0 f0       	brcs	.+48     	; 0x106a <.L9^B1>
    103a:	12 16       	cp	r1, r18
    103c:	13 06       	cpc	r1, r19
    103e:	e4 07       	cpc	r30, r20
    1040:	f5 07       	cpc	r31, r21
    1042:	98 f0       	brcs	.+38     	; 0x106a <.L9^B1>
    1044:	62 1b       	sub	r22, r18
    1046:	73 0b       	sbc	r23, r19
    1048:	84 0b       	sbc	r24, r20
    104a:	95 0b       	sbc	r25, r21
    104c:	39 f4       	brne	.+14     	; 0x105c <.L1^B1>
    104e:	0a 26       	eor	r0, r26
    1050:	61 f0       	breq	.+24     	; 0x106a <.L9^B1>
    1052:	23 2b       	or	r18, r19
    1054:	24 2b       	or	r18, r20
    1056:	25 2b       	or	r18, r21
    1058:	21 f4       	brne	.+8      	; 0x1062 <.L2^B1>
    105a:	08 95       	ret

0000105c <.L1^B1>:
    105c:	0a 26       	eor	r0, r26
    105e:	09 f4       	brne	.+2      	; 0x1062 <.L2^B1>
    1060:	a1 40       	sbci	r26, 0x01	; 1

00001062 <.L2^B1>:
    1062:	a6 95       	lsr	r26
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	81 1d       	adc	r24, r1
    1068:	81 1d       	adc	r24, r1

0000106a <.L9^B1>:
    106a:	08 95       	ret

0000106c <__fp_split3>:
    106c:	57 fd       	sbrc	r21, 7
    106e:	90 58       	subi	r25, 0x80	; 128
    1070:	44 0f       	add	r20, r20
    1072:	55 1f       	adc	r21, r21
    1074:	59 f0       	breq	.+22     	; 0x108c <.L4^B1>
    1076:	5f 3f       	cpi	r21, 0xFF	; 255
    1078:	71 f0       	breq	.+28     	; 0x1096 <.L5^B1>

0000107a <.L1^B1>:
    107a:	47 95       	ror	r20

0000107c <__fp_splitA>:
    107c:	88 0f       	add	r24, r24
    107e:	97 fb       	bst	r25, 7
    1080:	99 1f       	adc	r25, r25
    1082:	61 f0       	breq	.+24     	; 0x109c <.L6^B1>
    1084:	9f 3f       	cpi	r25, 0xFF	; 255
    1086:	79 f0       	breq	.+30     	; 0x10a6 <.L7^B1>

00001088 <.L3^B1>:
    1088:	87 95       	ror	r24
    108a:	08 95       	ret

0000108c <.L4^B1>:
    108c:	12 16       	cp	r1, r18
    108e:	13 06       	cpc	r1, r19
    1090:	14 06       	cpc	r1, r20
    1092:	55 1f       	adc	r21, r21
    1094:	f2 cf       	rjmp	.-28     	; 0x107a <.L1^B1>

00001096 <.L5^B1>:
    1096:	46 95       	lsr	r20
    1098:	f1 df       	rcall	.-30     	; 0x107c <__fp_splitA>
    109a:	08 c0       	rjmp	.+16     	; 0x10ac <.L8^B1>

0000109c <.L6^B1>:
    109c:	16 16       	cp	r1, r22
    109e:	17 06       	cpc	r1, r23
    10a0:	18 06       	cpc	r1, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	f1 cf       	rjmp	.-30     	; 0x1088 <.L3^B1>

000010a6 <.L7^B1>:
    10a6:	86 95       	lsr	r24
    10a8:	71 05       	cpc	r23, r1
    10aa:	61 05       	cpc	r22, r1

000010ac <.L8^B1>:
    10ac:	08 94       	sec
    10ae:	08 95       	ret

000010b0 <__fp_zero>:
    10b0:	e8 94       	clt

000010b2 <__fp_szero>:
    10b2:	bb 27       	eor	r27, r27
    10b4:	66 27       	eor	r22, r22
    10b6:	77 27       	eor	r23, r23
    10b8:	cb 01       	movw	r24, r22
    10ba:	97 f9       	bld	r25, 7
    10bc:	08 95       	ret

000010be <__gesf2>:
    10be:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_cmp>
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <.L1^B1>
    10c4:	8f ef       	ldi	r24, 0xFF	; 255

000010c6 <.L1^B1>:
    10c6:	08 95       	ret

000010c8 <__mulsf3>:
    10c8:	0e 94 77 08 	call	0x10ee	; 0x10ee <__mulsf3x>
    10cc:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_round>

000010d0 <.L^B1>:
    10d0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__fp_pscA>
    10d4:	38 f0       	brcs	.+14     	; 0x10e4 <.L1^B1>
    10d6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__fp_pscB>
    10da:	20 f0       	brcs	.+8      	; 0x10e4 <.L1^B1>
    10dc:	95 23       	and	r25, r21
    10de:	11 f0       	breq	.+4      	; 0x10e4 <.L1^B1>
    10e0:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__fp_inf>

000010e4 <.L1^B1>:
    10e4:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_nan>

000010e8 <.L2^B1>:
    10e8:	11 24       	eor	r1, r1
    10ea:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_szero>

000010ee <__mulsf3x>:
    10ee:	0e 94 36 08 	call	0x106c	; 0x106c <__fp_split3>
    10f2:	70 f3       	brcs	.-36     	; 0x10d0 <.L^B1>

000010f4 <__mulsf3_pse>:
    10f4:	95 9f       	mul	r25, r21
    10f6:	c1 f3       	breq	.-16     	; 0x10e8 <.L2^B1>
    10f8:	95 0f       	add	r25, r21
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	55 1f       	adc	r21, r21
    10fe:	62 9f       	mul	r22, r18
    1100:	f0 01       	movw	r30, r0
    1102:	72 9f       	mul	r23, r18
    1104:	bb 27       	eor	r27, r27
    1106:	f0 0d       	add	r31, r0
    1108:	b1 1d       	adc	r27, r1
    110a:	63 9f       	mul	r22, r19
    110c:	aa 27       	eor	r26, r26
    110e:	f0 0d       	add	r31, r0
    1110:	b1 1d       	adc	r27, r1
    1112:	aa 1f       	adc	r26, r26
    1114:	64 9f       	mul	r22, r20
    1116:	66 27       	eor	r22, r22
    1118:	b0 0d       	add	r27, r0
    111a:	a1 1d       	adc	r26, r1
    111c:	66 1f       	adc	r22, r22
    111e:	82 9f       	mul	r24, r18
    1120:	22 27       	eor	r18, r18
    1122:	b0 0d       	add	r27, r0
    1124:	a1 1d       	adc	r26, r1
    1126:	62 1f       	adc	r22, r18
    1128:	73 9f       	mul	r23, r19
    112a:	b0 0d       	add	r27, r0
    112c:	a1 1d       	adc	r26, r1
    112e:	62 1f       	adc	r22, r18
    1130:	83 9f       	mul	r24, r19
    1132:	a0 0d       	add	r26, r0
    1134:	61 1d       	adc	r22, r1
    1136:	22 1f       	adc	r18, r18
    1138:	74 9f       	mul	r23, r20
    113a:	33 27       	eor	r19, r19
    113c:	a0 0d       	add	r26, r0
    113e:	61 1d       	adc	r22, r1
    1140:	23 1f       	adc	r18, r19
    1142:	84 9f       	mul	r24, r20
    1144:	60 0d       	add	r22, r0
    1146:	21 1d       	adc	r18, r1
    1148:	82 2f       	mov	r24, r18
    114a:	76 2f       	mov	r23, r22
    114c:	6a 2f       	mov	r22, r26
    114e:	11 24       	eor	r1, r1
    1150:	9f 57       	subi	r25, 0x7F	; 127
    1152:	50 40       	sbci	r21, 0x00	; 0
    1154:	9a f0       	brmi	.+38     	; 0x117c <.L13^B1>
    1156:	f1 f0       	breq	.+60     	; 0x1194 <.L15^B1>

00001158 <.L10^B1>:
    1158:	88 23       	and	r24, r24
    115a:	4a f0       	brmi	.+18     	; 0x116e <.L11^B1>
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	bb 1f       	adc	r27, r27
    1162:	66 1f       	adc	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	88 1f       	adc	r24, r24
    1168:	91 50       	subi	r25, 0x01	; 1
    116a:	50 40       	sbci	r21, 0x00	; 0
    116c:	a9 f7       	brne	.-22     	; 0x1158 <.L10^B1>

0000116e <.L11^B1>:
    116e:	9e 3f       	cpi	r25, 0xFE	; 254
    1170:	51 05       	cpc	r21, r1
    1172:	80 f0       	brcs	.+32     	; 0x1194 <.L15^B1>
    1174:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__fp_inf>

00001178 <.L12^B1>:
    1178:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_szero>

0000117c <.L13^B1>:
    117c:	5f 3f       	cpi	r21, 0xFF	; 255
    117e:	e4 f3       	brlt	.-8      	; 0x1178 <.L12^B1>
    1180:	98 3e       	cpi	r25, 0xE8	; 232
    1182:	d4 f3       	brlt	.-12     	; 0x1178 <.L12^B1>

00001184 <.L14^B1>:
    1184:	86 95       	lsr	r24
    1186:	77 95       	ror	r23
    1188:	67 95       	ror	r22
    118a:	b7 95       	ror	r27
    118c:	f7 95       	ror	r31
    118e:	e7 95       	ror	r30
    1190:	9f 5f       	subi	r25, 0xFF	; 255
    1192:	c1 f7       	brne	.-16     	; 0x1184 <.L14^B1>

00001194 <.L15^B1>:
    1194:	fe 2b       	or	r31, r30
    1196:	88 0f       	add	r24, r24
    1198:	91 1d       	adc	r25, r1
    119a:	96 95       	lsr	r25
    119c:	87 95       	ror	r24
    119e:	97 f9       	bld	r25, 7
    11a0:	08 95       	ret

000011a2 <__fp_inf>:
    11a2:	97 f9       	bld	r25, 7
    11a4:	9f 67       	ori	r25, 0x7F	; 127
    11a6:	80 e8       	ldi	r24, 0x80	; 128
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	08 95       	ret

000011ae <__fp_nan>:
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
    11b0:	80 ec       	ldi	r24, 0xC0	; 192
    11b2:	08 95       	ret

000011b4 <__fp_pscA>:
    11b4:	00 24       	eor	r0, r0
    11b6:	0a 94       	dec	r0
    11b8:	16 16       	cp	r1, r22
    11ba:	17 06       	cpc	r1, r23
    11bc:	18 06       	cpc	r1, r24
    11be:	09 06       	cpc	r0, r25
    11c0:	08 95       	ret

000011c2 <__fp_pscB>:
    11c2:	00 24       	eor	r0, r0
    11c4:	0a 94       	dec	r0
    11c6:	12 16       	cp	r1, r18
    11c8:	13 06       	cpc	r1, r19
    11ca:	14 06       	cpc	r1, r20
    11cc:	05 06       	cpc	r0, r21
    11ce:	08 95       	ret

000011d0 <__fp_round>:
    11d0:	09 2e       	mov	r0, r25
    11d2:	03 94       	inc	r0
    11d4:	00 0c       	add	r0, r0
    11d6:	11 f4       	brne	.+4      	; 0x11dc <.L1^B1>
    11d8:	88 23       	and	r24, r24
    11da:	52 f0       	brmi	.+20     	; 0x11f0 <.L3^B1>

000011dc <.L1^B1>:
    11dc:	bb 0f       	add	r27, r27
    11de:	40 f4       	brcc	.+16     	; 0x11f0 <.L3^B1>
    11e0:	bf 2b       	or	r27, r31
    11e2:	11 f4       	brne	.+4      	; 0x11e8 <.L2^B1>
    11e4:	60 ff       	sbrs	r22, 0
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <.L3^B1>

000011e8 <.L2^B1>:
    11e8:	6f 5f       	subi	r22, 0xFF	; 255
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	8f 4f       	sbci	r24, 0xFF	; 255
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255

000011f0 <.L3^B1>:
    11f0:	08 95       	ret

000011f2 <_exit>:
    11f2:	f8 94       	cli

000011f4 <__stop_program>:
    11f4:	ff cf       	rjmp	.-2      	; 0x11f4 <__stop_program>
