
bin\Debug\IR-sensor_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00000b5e  00000c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b5e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800204  00800204  00000c16  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000c16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000c19  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000138  00000000  00000000  00000c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000018b5  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000fa1  00000000  00000000  0000265d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000016a1  00000000  00000000  000035fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000258  00000000  00000000  00004ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000006ee  00000000  00000000  00004ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000222  00000000  00000000  000055e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000013d  00000000  00000000  00005808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000059  00000000  00000000  00005945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_1>
   8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_2>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 96 04 	jmp	0x92c	; 0x92c <__vector_13>
  38:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__vector_14>
  3c:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__vector_15>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_20>
  54:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_21>
  58:	0c 94 0b 04 	jmp	0x816	; 0x816 <__vector_22>
  5c:	0c 94 bc 03 	jmp	0x778	; 0x778 <__vector_23>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	ee e5       	ldi	r30, 0x5E	; 94

000000fc <.Loc.4>:
  fc:	fb e0       	ldi	r31, 0x0B	; 11

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a4 30       	cpi	r26, 0x04	; 4

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a4 e0       	ldi	r26, 0x04	; 4

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	aa 30       	cpi	r26, 0x0A	; 10

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
 122:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <init_Interrupt>:
static volatile int plantTeller = 0;
static volatile int laatsteBocht = Rechts;

void init_Interrupt (void)
{
    sei();
 12a:	78 94       	sei

0000012c <.Loc.2>:
    EIMSK |= (1<<INT0);
 12c:	e8 9a       	sbi	0x1d, 0	; 29

0000012e <.Loc.4>:
    EICRA |= (1<<ISC01) | (0<<ISC00);
 12e:	e9 e6       	ldi	r30, 0x69	; 105
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z

00000134 <.Loc.5>:
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24

00000138 <.Loc.6>:
    EIMSK |= (1<<INT1);
 138:	e9 9a       	sbi	0x1d, 1	; 29

0000013a <.Loc.8>:
    EICRA |= (1<<ISC11) | (0<<ISC10);
 13a:	80 81       	ld	r24, Z

0000013c <.Loc.9>:
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	80 83       	st	Z, r24

00000140 <.Loc.10>:
}
 140:	08 95       	ret

00000142 <__vector_1>:

ISR(INT0_vect)
{
 142:	1f 92       	push	r1
 144:	1f b6       	in	r1, 0x3f	; 63
 146:	1f 92       	push	r1
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25

00000150 <.LBB6>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	83 ef       	ldi	r24, 0xF3	; 243
 154:	91 e0       	ldi	r25, 0x01	; 1

00000156 <.L1^B1>:
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <.L1^B1>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <L0^A>

00000160 <L0^A>:
	...

00000162 <.LBE6>:
    _delay_ms(40);
    teller = 0;
 162:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 166:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

0000016a <.Loc.23>:
    if (plantTeller < 3)
 16a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 16e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>

00000172 <.Loc.25>:
 172:	03 97       	sbiw	r24, 0x03	; 3
 174:	34 f4       	brge	.+12     	; 0x182 <.L3>

00000176 <.Loc.26>:
    {
        state = 2;  //Rechtdoor rijden
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 17e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>

00000182 <.L3>:
    }
    if(plantTeller==3)
 182:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 186:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>

0000018a <.Loc.30>:
 18a:	03 97       	sbiw	r24, 0x03	; 3
 18c:	f9 f0       	breq	.+62     	; 0x1cc <.L7>

0000018e <.L4>:
    {
        state = 3;  //Bocht linksom
    }
    if (plantTeller > 7 && plantTeller < 15)
 18e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 192:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>

00000196 <.Loc.33>:
 196:	08 97       	sbiw	r24, 0x08	; 8
 198:	64 f0       	brlt	.+24     	; 0x1b2 <.L5>

0000019a <.Loc.34>:
 19a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 19e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>

000001a2 <.Loc.35>:
 1a2:	0f 97       	sbiw	r24, 0x0f	; 15
 1a4:	34 f4       	brge	.+12     	; 0x1b2 <.L5>

000001a6 <.Loc.36>:
    {
        state = 2;  //Rechtdoor rijden
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 1ae:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>

000001b2 <.L5>:
    }
    if (plantTeller == 15)
 1b2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 1b6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>

000001ba <.Loc.40>:
 1ba:	0f 97       	sbiw	r24, 0x0f	; 15
 1bc:	71 f0       	breq	.+28     	; 0x1da <.L8>

000001be <.L2>:
    {
        state = 99;
    }
}
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	2f 91       	pop	r18
 1c4:	1f 90       	pop	r1
 1c6:	1f be       	out	0x3f, r1	; 63
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <.L7>:
        state = 3;  //Bocht linksom
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 1d4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>
 1d8:	da cf       	rjmp	.-76     	; 0x18e <.L4>

000001da <.L8>:
        state = 99;
 1da:	83 e6       	ldi	r24, 0x63	; 99
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 1e2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>

000001e6 <.Loc.46>:
}
 1e6:	eb cf       	rjmp	.-42     	; 0x1be <.L2>

000001e8 <__vector_2>:

ISR(INT1_vect)
{
 1e8:	1f 92       	push	r1
 1ea:	1f b6       	in	r1, 0x3f	; 63
 1ec:	1f 92       	push	r1
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25

000001f6 <.LBB8>:
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	83 ef       	ldi	r24, 0xF3	; 243
 1fa:	91 e0       	ldi	r25, 0x01	; 1

000001fc <.L1^B2>:
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <.L1^B2>
 204:	00 c0       	rjmp	.+0      	; 0x206 <L0^A>

00000206 <L0^A>:
	...

00000208 <.LBE8>:
    _delay_ms(40);
    teller = 0;
 208:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 20c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

00000210 <.Loc.59>:
    if (plantTeller > 3 && plantTeller < 15)
 210:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 214:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>

00000218 <.Loc.61>:
 218:	04 97       	sbiw	r24, 0x04	; 4
 21a:	64 f0       	brlt	.+24     	; 0x234 <.L10>

0000021c <.Loc.62>:
 21c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 220:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>

00000224 <.Loc.63>:
 224:	0f 97       	sbiw	r24, 0x0f	; 15
 226:	34 f4       	brge	.+12     	; 0x234 <.L10>

00000228 <.Loc.64>:
    {
        state = 2;  //Rechtdoor rijden
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 230:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>

00000234 <.L10>:
    }
    if (plantTeller==7)
 234:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 238:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>

0000023c <.Loc.68>:
 23c:	07 97       	sbiw	r24, 0x07	; 7
 23e:	69 f0       	breq	.+26     	; 0x25a <.L13>

00000240 <.L11>:
    {
        state = 4;  //Bocht rechtsom
    }
    if (plantTeller == 15)
 240:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 244:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>

00000248 <.Loc.71>:
 248:	0f 97       	sbiw	r24, 0x0f	; 15
 24a:	71 f0       	breq	.+28     	; 0x268 <.L14>

0000024c <.L9>:
    {
        state = 99;
    }
}
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	2f 91       	pop	r18
 252:	1f 90       	pop	r1
 254:	1f be       	out	0x3f, r1	; 63
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <.L13>:
        state = 4;  //Bocht rechtsom
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 262:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>
 266:	ec cf       	rjmp	.-40     	; 0x240 <.L11>

00000268 <.L14>:
        state = 99;
 268:	83 e6       	ldi	r24, 0x63	; 99
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 270:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>

00000274 <.Loc.77>:
}
 274:	eb cf       	rjmp	.-42     	; 0x24c <.L9>

00000276 <init>:

void init (void)
{
    RotaryInit();
 276:	0e 94 06 05 	call	0xa0c	; 0xa0c <RotaryInit>

0000027a <.LVL4>:
    init_Interrupt();
 27a:	0e 94 95 00 	call	0x12a	; 0x12a <init_Interrupt>

0000027e <.LVL5>:
    init_MotorLinks();
 27e:	0e 94 22 04 	call	0x844	; 0x844 <init_MotorLinks>

00000282 <.LVL6>:
    init_MotorRechts();
 282:	0e 94 c6 04 	call	0x98c	; 0x98c <init_MotorRechts>

00000286 <.LVL7>:

    Timer1_Start();
 286:	0e 94 52 05 	call	0xaa4	; 0xaa4 <Timer1_Start>

0000028a <.LVL8>:

    DDRB |= (1<<PB6);       // LED pin output
 28a:	26 9a       	sbi	0x04, 6	; 4

0000028c <.Loc.86>:
    DDRB |= (1<<PB5);       // LED pin output
 28c:	25 9a       	sbi	0x04, 5	; 4

0000028e <.Loc.88>:
    DDRL |= (1<<PL4);       // LED pin output
 28e:	ea e0       	ldi	r30, 0x0A	; 10
 290:	f1 e0       	ldi	r31, 0x01	; 1
 292:	80 81       	ld	r24, Z

00000294 <.Loc.89>:
 294:	80 61       	ori	r24, 0x10	; 16
 296:	80 83       	st	Z, r24

00000298 <.Loc.90>:

    PORTB |= (1<<PB6);      // LED off
 298:	2e 9a       	sbi	0x05, 6	; 5

0000029a <.Loc.92>:
    PORTB |= (1<<PB5);      // LED off
 29a:	2d 9a       	sbi	0x05, 5	; 5

0000029c <.Loc.94>:
    PORTL |= (1<<PL4);      // LED off
 29c:	eb e0       	ldi	r30, 0x0B	; 11
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	80 81       	ld	r24, Z

000002a2 <.Loc.95>:
 2a2:	80 61       	ori	r24, 0x10	; 16
 2a4:	80 83       	st	Z, r24

000002a6 <.Loc.96>:
    Led_Links_AAN;
 2a6:	2e 98       	cbi	0x05, 6	; 5

000002a8 <.Loc.97>:
    Led_Rechts_AAN;
 2a8:	2d 98       	cbi	0x05, 5	; 5

000002aa <.Loc.98>:
}
 2aa:	08 95       	ret

000002ac <initTimer>:

void initTimer (void)
{
    // Timer 5 is de systeemtimer (overflow)
    TCCR5A = 0;
 2ac:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

000002b0 <.Loc.102>:
    // Timer 8 kan niet ver genoeg tellen!
    // 8 bit timer 16000000 Hz / 64 / 256 = 976.56 Hz
    // 16 bit timer 16000000 Hz / 64 / 65.536 = 3.906,25 Hz
    // 16 bit timer 16000000 Hz / 65.536 = 244 Hz
    // start timer 0, prescaler = 64
    TCCR5B = TCCR5B | (0 << CS51) | (1 << CS50); //244,14 Hz
 2b0:	e1 e2       	ldi	r30, 0x21	; 33
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	80 81       	ld	r24, Z

000002b6 <.Loc.104>:
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	80 83       	st	Z, r24

000002ba <.Loc.105>:
}
 2ba:	08 95       	ret

000002bc <main>:

int main(void)
{
    init();
 2bc:	0e 94 3b 01 	call	0x276	; 0x276 <init>

000002c0 <.LVL9>:
    initTimer();
 2c0:	0e 94 56 01 	call	0x2ac	; 0x2ac <initTimer>

000002c4 <.LVL10>:
    int timer = 0;
    int knopje_1 = 1;
    waarschuwLampjes_AAN;
 2c4:	eb e0       	ldi	r30, 0x0B	; 11
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	80 81       	ld	r24, Z
 2ca:	8f 7e       	andi	r24, 0xEF	; 239
 2cc:	80 83       	st	Z, r24

000002ce <.Loc.112>:

    int rotary_1 = 0;
    int waarde_rot_1 = 50;
 2ce:	c2 e3       	ldi	r28, 0x32	; 50
 2d0:	d0 e0       	ldi	r29, 0x00	; 0

000002d2 <.Loc.116>:
            MotorRechts_set_percentage(0);
        }
        //Blijf rechtdoor rijden tot external interrupt state veranderd naar state 2
        if(state==1)
        {
            MotorLinks_set_percentage(60+(waarde_rot_2-waarde_rot_1));
 2d2:	0f 2e       	mov	r0, r31
 2d4:	fe e6       	ldi	r31, 0x6E	; 110
 2d6:	cf 2e       	mov	r12, r31
 2d8:	d1 2c       	mov	r13, r1
 2da:	f0 2d       	mov	r31, r0

000002dc <.Loc.117>:
        //wacht 2 seconden en rijdt door door te veranderen naar state 1
        if(state==2)
        {
            MotorLinks_set_percentage(0);
            MotorRechts_set_percentage(0);
            waarschuwLampjes_AAN;
 2dc:	0b e0       	ldi	r16, 0x0B	; 11
 2de:	11 e0       	ldi	r17, 0x01	; 1

000002e0 <.Loc.118>:
            if (teller > (2000/4))
            {
                plantTeller++;
                state = 1;
 2e0:	ee 24       	eor	r14, r14
 2e2:	e3 94       	inc	r14
 2e4:	f1 2c       	mov	r15, r1

000002e6 <.Loc.119>:
            MotorLinks_set_percentage(0);
            MotorRechts_set_percentage(0);
            if (teller > (2000/4))            //Hoeveel ms/4 het duurt voordat het naar de volgende staat gaat
            {
                plantTeller++;
                state = 5;
 2e6:	0f 2e       	mov	r0, r31
 2e8:	f5 e0       	ldi	r31, 0x05	; 5
 2ea:	af 2e       	mov	r10, r31
 2ec:	b1 2c       	mov	r11, r1
 2ee:	f0 2d       	mov	r31, r0

000002f0 <.Loc.120>:
            MotorLinks_set_percentage(0);
            MotorRechts_set_percentage(0);
            if (teller > (2000/4))            // hoeveel seconden wachten voordat state veranderd
            {
                plantTeller++;
                state = 9;
 2f0:	0f 2e       	mov	r0, r31
 2f2:	f9 e0       	ldi	r31, 0x09	; 9
 2f4:	8f 2e       	mov	r8, r31
 2f6:	91 2c       	mov	r9, r1
 2f8:	f0 2d       	mov	r31, r0

000002fa <.Loc.121>:
        {
            MotorLinks_set_percentage(60);
            MotorRechts_set_percentage(70);
            if (teller > (3000/4))            //Hoeveel ms/4 het duurt voordat het naar de volgende staat gaat
            {
                state = 6;
 2fa:	0f 2e       	mov	r0, r31
 2fc:	f6 e0       	ldi	r31, 0x06	; 6
 2fe:	6f 2e       	mov	r6, r31
 300:	71 2c       	mov	r7, r1
 302:	f0 2d       	mov	r31, r0

00000304 <.Loc.122>:
        {
            MotorLinks_set_percentage(0);
            MotorRechts_set_percentage(50);
            if (teller > (1450/4))            // hoeveel seconden wachten voordat state veranderd
            {
                state = 7;
 304:	0f 2e       	mov	r0, r31
 306:	f7 e0       	ldi	r31, 0x07	; 7
 308:	4f 2e       	mov	r4, r31
 30a:	51 2c       	mov	r5, r1
 30c:	f0 2d       	mov	r31, r0

0000030e <.Loc.123>:
            Led_Rechts_AAN;
            MotorLinks_set_percentage(60);
            MotorRechts_set_percentage(70);
            if (teller > (1400/4))            // hoeveel seconden wachten voordat state veranderd
            {
                state = 8;
 30e:	68 94       	set
 310:	22 24       	eor	r2, r2
 312:	23 f8       	bld	r2, 3
 314:	31 2c       	mov	r3, r1
 316:	7b c0       	rjmp	.+246    	; 0x40e <.L18>

00000318 <.L54>:
            waarde_rot_1--;
 318:	21 97       	sbiw	r28, 0x01	; 1

0000031a <.Loc.128>:
            RotaryResetStatus();
 31a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <RotaryResetStatus>

0000031e <.LVL14>:
        if(rotary_1 == 2)
 31e:	82 c0       	rjmp	.+260    	; 0x424 <.L20>

00000320 <.L55>:
            waarde_rot_1 = waarde_rot_1 + 1;
 320:	21 96       	adiw	r28, 0x01	; 1

00000322 <.Loc.133>:
            RotaryResetStatus();
 322:	0e 94 4d 05 	call	0xa9a	; 0xa9a <RotaryResetStatus>

00000326 <.LVL17>:
 326:	7e c0       	rjmp	.+252    	; 0x424 <.L20>

00000328 <.L21>:
        if(state == 0)
 328:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 32c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

00000330 <.Loc.136>:
 330:	89 2b       	or	r24, r25
 332:	09 f4       	brne	.+2      	; 0x336 <.L22>

00000334 <L0^A>:
 334:	85 c0       	rjmp	.+266    	; 0x440 <.L38>

00000336 <.L22>:
        if(state==1)
 336:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 33a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

0000033e <.Loc.139>:
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	09 f4       	brne	.+2      	; 0x344 <.L23>

00000342 <L0^A>:
 342:	87 c0       	rjmp	.+270    	; 0x452 <.L39>

00000344 <.L23>:
        if(state==2)
 344:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 348:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

0000034c <.Loc.142>:
 34c:	02 97       	sbiw	r24, 0x02	; 2
 34e:	09 f4       	brne	.+2      	; 0x352 <.L24>

00000350 <L0^A>:
 350:	8a c0       	rjmp	.+276    	; 0x466 <.L40>

00000352 <.L24>:
        if(state==3)    //Bocht Linksom
 352:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 356:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

0000035a <.Loc.145>:
 35a:	03 97       	sbiw	r24, 0x03	; 3
 35c:	09 f4       	brne	.+2      	; 0x360 <.L25>

0000035e <L0^A>:
 35e:	a9 c0       	rjmp	.+338    	; 0x4b2 <.L41>

00000360 <.L25>:
        if(state==4)    //Bocht Rechtsom
 360:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 364:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

00000368 <.Loc.148>:
 368:	04 97       	sbiw	r24, 0x04	; 4
 36a:	09 f4       	brne	.+2      	; 0x36e <.L26>

0000036c <L0^A>:
 36c:	c4 c0       	rjmp	.+392    	; 0x4f6 <.L42>

0000036e <.L26>:
        if(state==5)
 36e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 372:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

00000376 <.Loc.151>:
 376:	05 97       	sbiw	r24, 0x05	; 5
 378:	09 f4       	brne	.+2      	; 0x37c <.L27>

0000037a <L0^A>:
 37a:	df c0       	rjmp	.+446    	; 0x53a <.L43>

0000037c <.L27>:
        if(state==6)
 37c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 380:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

00000384 <.Loc.154>:
 384:	06 97       	sbiw	r24, 0x06	; 6
 386:	09 f4       	brne	.+2      	; 0x38a <.L28>

00000388 <L0^A>:
 388:	f1 c0       	rjmp	.+482    	; 0x56c <.L44>

0000038a <.L28>:
        if(state==7)
 38a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 38e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

00000392 <.Loc.157>:
 392:	07 97       	sbiw	r24, 0x07	; 7
 394:	09 f4       	brne	.+2      	; 0x398 <.L29>

00000396 <L0^A>:
 396:	03 c1       	rjmp	.+518    	; 0x59e <.L45>

00000398 <.L29>:
                teller = 0;
            }
        }
        //draai linksom volle snelheid
        if(state==8)
 398:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 39c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

000003a0 <.Loc.160>:
 3a0:	08 97       	sbiw	r24, 0x08	; 8
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <.L30>

000003a4 <L0^A>:
 3a4:	17 c1       	rjmp	.+558    	; 0x5d4 <.L46>

000003a6 <.L30>:
                state = 1;
                teller = 0;
                laatsteBocht = Links;
            }
        }
        if(state==9)
 3a6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 3aa:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

000003ae <.Loc.163>:
 3ae:	09 97       	sbiw	r24, 0x09	; 9
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <.L31>

000003b2 <L0^A>:
 3b2:	2d c1       	rjmp	.+602    	; 0x60e <.L47>

000003b4 <.L31>:
            {
                state = 10;
                teller = 0;
            }
        }
        if(state==10)
 3b4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 3b8:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

000003bc <.Loc.166>:
 3bc:	0a 97       	sbiw	r24, 0x0a	; 10
 3be:	09 f4       	brne	.+2      	; 0x3c2 <.L32>

000003c0 <L0^A>:
 3c0:	41 c1       	rjmp	.+642    	; 0x644 <.L48>

000003c2 <.L32>:
                state = 11;
                teller = 0;
            }
        }
        //rijd rechtdoor (40%vermogen)
        if(state==11)
 3c2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 3c6:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

000003ca <.Loc.169>:
 3ca:	0b 97       	sbiw	r24, 0x0b	; 11
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <.L33>

000003ce <L0^A>:
 3ce:	55 c1       	rjmp	.+682    	; 0x67a <.L49>

000003d0 <.L33>:
                state = 12;
                teller = 0;
            }
        }
        //draai rechtsom volle snelheid
        if(state==12)
 3d0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 3d4:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

000003d8 <.Loc.172>:
 3d8:	0c 97       	sbiw	r24, 0x0c	; 12
 3da:	09 f4       	brne	.+2      	; 0x3de <.L34>

000003dc <L0^A>:
 3dc:	6b c1       	rjmp	.+726    	; 0x6b4 <.L50>

000003de <.L34>:
                state = 1;
                teller = 0;
                laatsteBocht = Rechts;
            }
        }
        if(state==99)
 3de:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 3e2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

000003e6 <.Loc.175>:
 3e6:	83 36       	cpi	r24, 0x63	; 99
 3e8:	91 05       	cpc	r25, r1
 3ea:	09 f4       	brne	.+2      	; 0x3ee <.L35>

000003ec <L0^A>:
 3ec:	82 c1       	rjmp	.+772    	; 0x6f2 <.L51>

000003ee <.L35>:
            {
                state = 100;
                teller = 0;
            }
        }
        if(state==100)
 3ee:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 3f2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

000003f6 <.Loc.178>:
 3f6:	84 36       	cpi	r24, 0x64	; 100
 3f8:	91 05       	cpc	r25, r1
 3fa:	09 f4       	brne	.+2      	; 0x3fe <.L36>

000003fc <L0^A>:
 3fc:	95 c1       	rjmp	.+810    	; 0x728 <.L52>

000003fe <.L36>:
            {
                state = 101;
                teller = 0;
            }
        }
        if(state==101)
 3fe:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
 402:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>

00000406 <.Loc.181>:
 406:	85 36       	cpi	r24, 0x65	; 101
 408:	91 05       	cpc	r25, r1
 40a:	09 f4       	brne	.+2      	; 0x40e <.L18>

0000040c <L0^A>:
 40c:	a8 c1       	rjmp	.+848    	; 0x75e <.L53>

0000040e <.L18>:
        rotary_1 = RotaryGetStatus();       //rotary_1 krijgt de waarde 0 1 of 2 van de rotary encoder uit rotary.c
 40e:	0e 94 48 05 	call	0xa90	; 0xa90 <RotaryGetStatus>

00000412 <.LVL20>:
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0

00000416 <.Loc.186>:
        if(rotary_1 == 1)
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	09 f4       	brne	.+2      	; 0x41c <.Loc.188>

0000041a <L0^A>:
 41a:	7e cf       	rjmp	.-260    	; 0x318 <.L54>

0000041c <.Loc.188>:
        if(rotary_1 == 2)
 41c:	22 30       	cpi	r18, 0x02	; 2
 41e:	31 05       	cpc	r19, r1
 420:	09 f4       	brne	.+2      	; 0x424 <.L20>

00000422 <L0^A>:
 422:	7e cf       	rjmp	.-260    	; 0x320 <.L55>

00000424 <.L20>:
        if (TIFR5 & (1<<TOV5))  //elke keer als de timer overflowt
 424:	d0 9b       	sbis	0x1a, 0	; 26
 426:	80 cf       	rjmp	.-256    	; 0x328 <.L21>

00000428 <.Loc.192>:
            TIFR5 = (1<<TOV5);  // Wis flag
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	8a bb       	out	0x1a, r24	; 26

0000042c <.Loc.194>:
            teller++;           //Verhoog teller met 1 iedere overflow (244Hz)
 42c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 430:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <teller+0x1>
 43a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <teller>
 43e:	74 cf       	rjmp	.-280    	; 0x328 <.L21>

00000440 <.L38>:
            MotorLinks_set_percentage(0);
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

00000448 <.LVL23>:
            MotorRechts_set_percentage(0);
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

00000450 <.LVL24>:
 450:	72 cf       	rjmp	.-284    	; 0x336 <.L22>

00000452 <.L39>:
            MotorLinks_set_percentage(60+(waarde_rot_2-waarde_rot_1));
 452:	c6 01       	movw	r24, r12
 454:	8c 1b       	sub	r24, r28
 456:	9d 0b       	sbc	r25, r29
 458:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

0000045c <.LVL25>:
            MotorRechts_set_percentage(70-(waarde_rot_2-waarde_rot_1));
 45c:	ce 01       	movw	r24, r28
 45e:	44 96       	adiw	r24, 0x14	; 20
 460:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

00000464 <.LVL26>:
 464:	6f cf       	rjmp	.-290    	; 0x344 <.L23>

00000466 <.L40>:
            MotorLinks_set_percentage(0);
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

0000046e <.LVL27>:
            MotorRechts_set_percentage(0);
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

00000476 <.LVL28>:
            waarschuwLampjes_AAN;
 476:	f8 01       	movw	r30, r16
 478:	80 81       	ld	r24, Z
 47a:	8f 7e       	andi	r24, 0xEF	; 239
 47c:	80 83       	st	Z, r24

0000047e <.Loc.204>:
            if (teller > (2000/4))
 47e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 482:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

00000486 <.Loc.206>:
 486:	85 3f       	cpi	r24, 0xF5	; 245
 488:	91 40       	sbci	r25, 0x01	; 1
 48a:	0c f4       	brge	.+2      	; 0x48e <.Loc.207>

0000048c <L0^A>:
 48c:	62 cf       	rjmp	.-316    	; 0x352 <.L24>

0000048e <.Loc.207>:
                plantTeller++;
 48e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 492:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <plantTeller+0x1>
 49c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <plantTeller>

000004a0 <.Loc.209>:
                state = 1;
 4a0:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <state+0x1>
 4a4:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <state>

000004a8 <.Loc.211>:
                waarschuwLampjes_UIT;
 4a8:	f8 01       	movw	r30, r16
 4aa:	80 81       	ld	r24, Z
 4ac:	80 61       	ori	r24, 0x10	; 16
 4ae:	80 83       	st	Z, r24
 4b0:	50 cf       	rjmp	.-352    	; 0x352 <.L24>

000004b2 <.L41>:
            MotorLinks_set_percentage(0);
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

000004ba <.LVL29>:
            MotorRechts_set_percentage(0);
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

000004c2 <.LVL30>:
            if (teller > (2000/4))            //Hoeveel ms/4 het duurt voordat het naar de volgende staat gaat
 4c2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 4c6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

000004ca <.Loc.216>:
 4ca:	85 3f       	cpi	r24, 0xF5	; 245
 4cc:	91 40       	sbci	r25, 0x01	; 1
 4ce:	0c f4       	brge	.+2      	; 0x4d2 <.Loc.217>

000004d0 <L0^A>:
 4d0:	47 cf       	rjmp	.-370    	; 0x360 <.L25>

000004d2 <.Loc.217>:
                plantTeller++;
 4d2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 4d6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <plantTeller+0x1>
 4e0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <plantTeller>

000004e4 <.Loc.219>:
                state = 5;
 4e4:	b0 92 03 02 	sts	0x0203, r11	; 0x800203 <state+0x1>
 4e8:	a0 92 02 02 	sts	0x0202, r10	; 0x800202 <state>

000004ec <.Loc.221>:
                teller = 0;
 4ec:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 4f0:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>
 4f4:	35 cf       	rjmp	.-406    	; 0x360 <.L25>

000004f6 <.L42>:
            MotorLinks_set_percentage(0);
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

000004fe <.LVL31>:
            MotorRechts_set_percentage(0);
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

00000506 <.LVL32>:
            if (teller > (2000/4))            // hoeveel seconden wachten voordat state veranderd
 506:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 50a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

0000050e <.Loc.227>:
 50e:	85 3f       	cpi	r24, 0xF5	; 245
 510:	91 40       	sbci	r25, 0x01	; 1
 512:	0c f4       	brge	.+2      	; 0x516 <.Loc.228>

00000514 <L0^A>:
 514:	2c cf       	rjmp	.-424    	; 0x36e <.L26>

00000516 <.Loc.228>:
                plantTeller++;
 516:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <plantTeller>
 51a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <plantTeller+0x1>
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <plantTeller+0x1>
 524:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <plantTeller>

00000528 <.Loc.230>:
                state = 9;
 528:	90 92 03 02 	sts	0x0203, r9	; 0x800203 <state+0x1>
 52c:	80 92 02 02 	sts	0x0202, r8	; 0x800202 <state>

00000530 <.Loc.232>:
                teller = 0;
 530:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 534:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>
 538:	1a cf       	rjmp	.-460    	; 0x36e <.L26>

0000053a <.L43>:
            MotorLinks_set_percentage(60);
 53a:	8c e3       	ldi	r24, 0x3C	; 60
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

00000542 <.LVL33>:
            MotorRechts_set_percentage(70);
 542:	86 e4       	ldi	r24, 0x46	; 70
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

0000054a <.LVL34>:
            if (teller > (3000/4))            //Hoeveel ms/4 het duurt voordat het naar de volgende staat gaat
 54a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 54e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

00000552 <.Loc.238>:
 552:	8f 3e       	cpi	r24, 0xEF	; 239
 554:	92 40       	sbci	r25, 0x02	; 2
 556:	0c f4       	brge	.+2      	; 0x55a <.Loc.239>

00000558 <L0^A>:
 558:	11 cf       	rjmp	.-478    	; 0x37c <.L27>

0000055a <.Loc.239>:
                state = 6;
 55a:	70 92 03 02 	sts	0x0203, r7	; 0x800203 <state+0x1>
 55e:	60 92 02 02 	sts	0x0202, r6	; 0x800202 <state>

00000562 <.Loc.241>:
                teller = 0;
 562:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 566:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>
 56a:	08 cf       	rjmp	.-496    	; 0x37c <.L27>

0000056c <.L44>:
            MotorLinks_set_percentage(0);
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

00000574 <.LVL35>:
            MotorRechts_set_percentage(50);
 574:	82 e3       	ldi	r24, 0x32	; 50
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

0000057c <.LVL36>:
            if (teller > (1450/4))            // hoeveel seconden wachten voordat state veranderd
 57c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 580:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

00000584 <.Loc.247>:
 584:	8b 36       	cpi	r24, 0x6B	; 107
 586:	91 40       	sbci	r25, 0x01	; 1
 588:	0c f4       	brge	.+2      	; 0x58c <.Loc.248>

0000058a <L0^A>:
 58a:	ff ce       	rjmp	.-514    	; 0x38a <.L28>

0000058c <.Loc.248>:
                state = 7;
 58c:	50 92 03 02 	sts	0x0203, r5	; 0x800203 <state+0x1>
 590:	40 92 02 02 	sts	0x0202, r4	; 0x800202 <state>

00000594 <.Loc.250>:
                teller = 0;
 594:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 598:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>
 59c:	f6 ce       	rjmp	.-532    	; 0x38a <.L28>

0000059e <.L45>:
            Led_Links_AAN;
 59e:	2e 98       	cbi	0x05, 6	; 5

000005a0 <.Loc.253>:
            Led_Rechts_AAN;
 5a0:	2d 98       	cbi	0x05, 5	; 5

000005a2 <.Loc.254>:
            MotorLinks_set_percentage(60);
 5a2:	8c e3       	ldi	r24, 0x3C	; 60
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

000005aa <.LVL37>:
            MotorRechts_set_percentage(70);
 5aa:	86 e4       	ldi	r24, 0x46	; 70
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

000005b2 <.LVL38>:
            if (teller > (1400/4))            // hoeveel seconden wachten voordat state veranderd
 5b2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 5b6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

000005ba <.Loc.258>:
 5ba:	8f 35       	cpi	r24, 0x5F	; 95
 5bc:	91 40       	sbci	r25, 0x01	; 1
 5be:	0c f4       	brge	.+2      	; 0x5c2 <.Loc.259>

000005c0 <L0^A>:
 5c0:	eb ce       	rjmp	.-554    	; 0x398 <.L29>

000005c2 <.Loc.259>:
                state = 8;
 5c2:	30 92 03 02 	sts	0x0203, r3	; 0x800203 <state+0x1>
 5c6:	20 92 02 02 	sts	0x0202, r2	; 0x800202 <state>

000005ca <.Loc.261>:
                teller = 0;
 5ca:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 5ce:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>
 5d2:	e2 ce       	rjmp	.-572    	; 0x398 <.L29>

000005d4 <.L46>:
            MotorLinks_set_percentage(0);
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

000005dc <.LVL39>:
            MotorRechts_set_percentage(50);
 5dc:	82 e3       	ldi	r24, 0x32	; 50
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

000005e4 <.LVL40>:
            if (teller > (1400/4))            // hoeveel seconden wachten voordat state veranderd
 5e4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 5e8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

000005ec <.Loc.267>:
 5ec:	8f 35       	cpi	r24, 0x5F	; 95
 5ee:	91 40       	sbci	r25, 0x01	; 1
 5f0:	0c f4       	brge	.+2      	; 0x5f4 <.Loc.268>

000005f2 <L0^A>:
 5f2:	d9 ce       	rjmp	.-590    	; 0x3a6 <.L30>

000005f4 <.Loc.268>:
                state = 1;
 5f4:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <state+0x1>
 5f8:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <state>

000005fc <.Loc.270>:
                teller = 0;
 5fc:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 600:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

00000604 <.Loc.272>:
                laatsteBocht = Links;
 604:	f0 92 01 02 	sts	0x0201, r15	; 0x800201 <laatsteBocht+0x1>
 608:	e0 92 00 02 	sts	0x0200, r14	; 0x800200 <laatsteBocht>
 60c:	cc ce       	rjmp	.-616    	; 0x3a6 <.L30>

0000060e <.L47>:
            MotorLinks_set_percentage(60);
 60e:	8c e3       	ldi	r24, 0x3C	; 60
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

00000616 <.LVL41>:
            MotorRechts_set_percentage(70);
 616:	86 e4       	ldi	r24, 0x46	; 70
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

0000061e <.LVL42>:
            if (teller > (3000/4))            // hoeveel seconden wachten voordat state veranderd
 61e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 622:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

00000626 <.Loc.278>:
 626:	8f 3e       	cpi	r24, 0xEF	; 239
 628:	92 40       	sbci	r25, 0x02	; 2
 62a:	0c f4       	brge	.+2      	; 0x62e <.Loc.279>

0000062c <L0^A>:
 62c:	c3 ce       	rjmp	.-634    	; 0x3b4 <.L31>

0000062e <.Loc.279>:
                state = 10;
 62e:	8a e0       	ldi	r24, 0x0A	; 10
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 636:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>

0000063a <.Loc.281>:
                teller = 0;
 63a:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 63e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>
 642:	b8 ce       	rjmp	.-656    	; 0x3b4 <.L31>

00000644 <.L48>:
            MotorLinks_set_percentage(50);
 644:	82 e3       	ldi	r24, 0x32	; 50
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

0000064c <.LVL43>:
            MotorRechts_set_percentage(0);
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

00000654 <.LVL44>:
            if (teller > (1450/4))
 654:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 658:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

0000065c <.Loc.287>:
 65c:	8b 36       	cpi	r24, 0x6B	; 107
 65e:	91 40       	sbci	r25, 0x01	; 1
 660:	0c f4       	brge	.+2      	; 0x664 <.Loc.288>

00000662 <L0^A>:
 662:	af ce       	rjmp	.-674    	; 0x3c2 <.L32>

00000664 <.Loc.288>:
                state = 11;
 664:	8b e0       	ldi	r24, 0x0B	; 11
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 66c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>

00000670 <.Loc.290>:
                teller = 0;
 670:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 674:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>
 678:	a4 ce       	rjmp	.-696    	; 0x3c2 <.L32>

0000067a <.L49>:
            Led_Links_AAN;
 67a:	2e 98       	cbi	0x05, 6	; 5

0000067c <.Loc.293>:
            Led_Rechts_AAN;
 67c:	2d 98       	cbi	0x05, 5	; 5

0000067e <.Loc.294>:
            MotorLinks_set_percentage(60);
 67e:	8c e3       	ldi	r24, 0x3C	; 60
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

00000686 <.LVL45>:
            MotorRechts_set_percentage(70);
 686:	86 e4       	ldi	r24, 0x46	; 70
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

0000068e <.LVL46>:
            if (teller > (1400/4))            // hoeveel seconden wachten voordat state veranderd
 68e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 692:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

00000696 <.Loc.298>:
 696:	8f 35       	cpi	r24, 0x5F	; 95
 698:	91 40       	sbci	r25, 0x01	; 1
 69a:	0c f4       	brge	.+2      	; 0x69e <.Loc.299>

0000069c <L0^A>:
 69c:	99 ce       	rjmp	.-718    	; 0x3d0 <.L33>

0000069e <.Loc.299>:
                state = 12;
 69e:	8c e0       	ldi	r24, 0x0C	; 12
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 6a6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>

000006aa <.Loc.301>:
                teller = 0;
 6aa:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 6ae:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>
 6b2:	8e ce       	rjmp	.-740    	; 0x3d0 <.L33>

000006b4 <.L50>:
            MotorLinks_set_percentage(50);
 6b4:	82 e3       	ldi	r24, 0x32	; 50
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

000006bc <.LVL47>:
            MotorRechts_set_percentage(0);
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

000006c4 <.LVL48>:
            if (teller > (1400/4))            // hoeveel seconden wachten voordat state veranderd
 6c4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 6c8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

000006cc <.Loc.307>:
 6cc:	8f 35       	cpi	r24, 0x5F	; 95
 6ce:	91 40       	sbci	r25, 0x01	; 1
 6d0:	0c f4       	brge	.+2      	; 0x6d4 <.Loc.308>

000006d2 <L0^A>:
 6d2:	85 ce       	rjmp	.-758    	; 0x3de <.L34>

000006d4 <.Loc.308>:
                state = 1;
 6d4:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <state+0x1>
 6d8:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <state>

000006dc <.Loc.310>:
                teller = 0;
 6dc:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 6e0:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

000006e4 <.Loc.312>:
                laatsteBocht = Rechts;
 6e4:	82 e0       	ldi	r24, 0x02	; 2
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <laatsteBocht+0x1>
 6ec:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <laatsteBocht>
 6f0:	76 ce       	rjmp	.-788    	; 0x3de <.L34>

000006f2 <.L51>:
            MotorLinks_set_percentage(0);
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

000006fa <.LVL49>:
            MotorRechts_set_percentage(0);
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

00000702 <.LVL50>:
            if (teller > (2000/4))
 702:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 706:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

0000070a <.Loc.318>:
 70a:	85 3f       	cpi	r24, 0xF5	; 245
 70c:	91 40       	sbci	r25, 0x01	; 1
 70e:	0c f4       	brge	.+2      	; 0x712 <.Loc.319>

00000710 <L0^A>:
 710:	6e ce       	rjmp	.-804    	; 0x3ee <.L35>

00000712 <.Loc.319>:
                state = 100;
 712:	84 e6       	ldi	r24, 0x64	; 100
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 71a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>

0000071e <.Loc.321>:
                teller = 0;
 71e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 722:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>
 726:	63 ce       	rjmp	.-826    	; 0x3ee <.L35>

00000728 <.L52>:
            MotorLinks_set_percentage(60);
 728:	8c e3       	ldi	r24, 0x3C	; 60
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

00000730 <.LVL51>:
            MotorRechts_set_percentage(70);
 730:	86 e4       	ldi	r24, 0x46	; 70
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

00000738 <.LVL52>:
            if (teller > (2000/4))
 738:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 73c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

00000740 <.Loc.327>:
 740:	85 3f       	cpi	r24, 0xF5	; 245
 742:	91 40       	sbci	r25, 0x01	; 1
 744:	0c f4       	brge	.+2      	; 0x748 <.Loc.328>

00000746 <L0^A>:
 746:	5b ce       	rjmp	.-842    	; 0x3fe <.L36>

00000748 <.Loc.328>:
                state = 101;
 748:	85 e6       	ldi	r24, 0x65	; 101
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
 750:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>

00000754 <.Loc.330>:
                teller = 0;
 754:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 758:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>
 75c:	50 ce       	rjmp	.-864    	; 0x3fe <.L36>

0000075e <.L53>:
        {
            MotorLinks_set_percentage(0);
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 3c 04 	call	0x878	; 0x878 <MotorLinks_set_percentage>

00000766 <.LVL53>:
            MotorRechts_set_percentage(0);
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <MotorRechts_set_percentage>

0000076e <.LVL54>:
            waarschuwLampjes_AAN;
 76e:	f8 01       	movw	r30, r16
 770:	80 81       	ld	r24, Z
 772:	8f 7e       	andi	r24, 0xEF	; 239
 774:	80 83       	st	Z, r24
 776:	4b ce       	rjmp	.-874    	; 0x40e <.L18>

00000778 <__vector_23>:
 778:	1f 92       	push	r1
 77a:	1f b6       	in	r1, 0x3f	; 63
 77c:	1f 92       	push	r1
 77e:	11 24       	eor	r1, r1
 780:	8f 93       	push	r24
 782:	8b b7       	in	r24, 0x3b	; 59
 784:	8f 93       	push	r24
 786:	ef 93       	push	r30
 788:	ff 93       	push	r31

0000078a <.Loc.1>:
 78a:	87 b5       	in	r24, 0x27	; 39

0000078c <.Loc.3>:
 78c:	81 11       	cpse	r24, r1
 78e:	0c c0       	rjmp	.+24     	; 0x7a8 <.L2>

00000790 <.Loc.4>:
 790:	88 b5       	in	r24, 0x28	; 40

00000792 <.Loc.5>:
 792:	81 11       	cpse	r24, r1
 794:	09 c0       	rjmp	.+18     	; 0x7a8 <.L2>

00000796 <.Loc.6>:
 796:	eb e0       	ldi	r30, 0x0B	; 11
 798:	f1 e0       	ldi	r31, 0x01	; 1
 79a:	80 81       	ld	r24, Z
 79c:	8e 7f       	andi	r24, 0xFE	; 254
 79e:	80 83       	st	Z, r24

000007a0 <.Loc.8>:
 7a0:	80 81       	ld	r24, Z
 7a2:	8d 7f       	andi	r24, 0xFD	; 253
 7a4:	80 83       	st	Z, r24
 7a6:	0b c0       	rjmp	.+22     	; 0x7be <.L1>

000007a8 <.L2>:
 7a8:	87 b5       	in	r24, 0x27	; 39

000007aa <.Loc.12>:
 7aa:	88 23       	and	r24, r24
 7ac:	89 f0       	breq	.+34     	; 0x7d0 <.L4>

000007ae <.Loc.13>:
 7ae:	eb e0       	ldi	r30, 0x0B	; 11
 7b0:	f1 e0       	ldi	r31, 0x01	; 1
 7b2:	80 81       	ld	r24, Z
 7b4:	8d 7f       	andi	r24, 0xFD	; 253
 7b6:	80 83       	st	Z, r24

000007b8 <.Loc.15>:
 7b8:	80 81       	ld	r24, Z

000007ba <.Loc.16>:
 7ba:	81 60       	ori	r24, 0x01	; 1
 7bc:	80 83       	st	Z, r24

000007be <.L1>:
 7be:	ff 91       	pop	r31
 7c0:	ef 91       	pop	r30
 7c2:	8f 91       	pop	r24
 7c4:	8b bf       	out	0x3b, r24	; 59
 7c6:	8f 91       	pop	r24
 7c8:	1f 90       	pop	r1
 7ca:	1f be       	out	0x3f, r1	; 63
 7cc:	1f 90       	pop	r1
 7ce:	18 95       	reti

000007d0 <.L4>:
 7d0:	88 b5       	in	r24, 0x28	; 40

000007d2 <.Loc.20>:
 7d2:	88 23       	and	r24, r24
 7d4:	a1 f3       	breq	.-24     	; 0x7be <.L1>

000007d6 <.Loc.21>:
 7d6:	eb e0       	ldi	r30, 0x0B	; 11
 7d8:	f1 e0       	ldi	r31, 0x01	; 1
 7da:	80 81       	ld	r24, Z
 7dc:	8e 7f       	andi	r24, 0xFE	; 254
 7de:	80 83       	st	Z, r24

000007e0 <.Loc.23>:
 7e0:	80 81       	ld	r24, Z

000007e2 <.Loc.24>:
 7e2:	82 60       	ori	r24, 0x02	; 2
 7e4:	80 83       	st	Z, r24

000007e6 <.Loc.25>:
 7e6:	eb cf       	rjmp	.-42     	; 0x7be <.L1>

000007e8 <__vector_21>:
 7e8:	8f 93       	push	r24
 7ea:	8f b7       	in	r24, 0x3f	; 63
 7ec:	8f 93       	push	r24
 7ee:	8b b7       	in	r24, 0x3b	; 59
 7f0:	8f 93       	push	r24
 7f2:	ef 93       	push	r30
 7f4:	ff 93       	push	r31

000007f6 <.Loc.27>:
 7f6:	87 b5       	in	r24, 0x27	; 39

000007f8 <.Loc.29>:
 7f8:	8f 3f       	cpi	r24, 0xFF	; 255
 7fa:	29 f0       	breq	.+10     	; 0x806 <.L5>

000007fc <.Loc.30>:
 7fc:	eb e0       	ldi	r30, 0x0B	; 11
 7fe:	f1 e0       	ldi	r31, 0x01	; 1
 800:	80 81       	ld	r24, Z
 802:	8e 7f       	andi	r24, 0xFE	; 254
 804:	80 83       	st	Z, r24

00000806 <.L5>:
 806:	ff 91       	pop	r31
 808:	ef 91       	pop	r30
 80a:	8f 91       	pop	r24
 80c:	8b bf       	out	0x3b, r24	; 59
 80e:	8f 91       	pop	r24
 810:	8f bf       	out	0x3f, r24	; 63
 812:	8f 91       	pop	r24
 814:	18 95       	reti

00000816 <__vector_22>:
 816:	8f 93       	push	r24
 818:	8f b7       	in	r24, 0x3f	; 63
 81a:	8f 93       	push	r24
 81c:	8b b7       	in	r24, 0x3b	; 59
 81e:	8f 93       	push	r24
 820:	ef 93       	push	r30
 822:	ff 93       	push	r31

00000824 <.Loc.34>:
 824:	88 b5       	in	r24, 0x28	; 40

00000826 <.Loc.36>:
 826:	8f 3f       	cpi	r24, 0xFF	; 255
 828:	29 f0       	breq	.+10     	; 0x834 <.L7>

0000082a <.Loc.37>:
 82a:	eb e0       	ldi	r30, 0x0B	; 11
 82c:	f1 e0       	ldi	r31, 0x01	; 1
 82e:	80 81       	ld	r24, Z
 830:	8d 7f       	andi	r24, 0xFD	; 253
 832:	80 83       	st	Z, r24

00000834 <.L7>:
 834:	ff 91       	pop	r31
 836:	ef 91       	pop	r30
 838:	8f 91       	pop	r24
 83a:	8b bf       	out	0x3b, r24	; 59
 83c:	8f 91       	pop	r24
 83e:	8f bf       	out	0x3f, r24	; 63
 840:	8f 91       	pop	r24
 842:	18 95       	reti

00000844 <init_MotorLinks>:
 844:	ea e0       	ldi	r30, 0x0A	; 10
 846:	f1 e0       	ldi	r31, 0x01	; 1
 848:	80 81       	ld	r24, Z

0000084a <.Loc.42>:
 84a:	81 60       	ori	r24, 0x01	; 1
 84c:	80 83       	st	Z, r24

0000084e <.Loc.43>:
 84e:	80 81       	ld	r24, Z

00000850 <.Loc.44>:
 850:	82 60       	ori	r24, 0x02	; 2
 852:	80 83       	st	Z, r24

00000854 <.Loc.45>:
 854:	eb e0       	ldi	r30, 0x0B	; 11
 856:	f1 e0       	ldi	r31, 0x01	; 1
 858:	80 81       	ld	r24, Z
 85a:	8e 7f       	andi	r24, 0xFE	; 254
 85c:	80 83       	st	Z, r24

0000085e <.Loc.47>:
 85e:	80 81       	ld	r24, Z
 860:	8d 7f       	andi	r24, 0xFD	; 253
 862:	80 83       	st	Z, r24

00000864 <.Loc.49>:
 864:	14 bc       	out	0x24, r1	; 36

00000866 <.Loc.51>:
 866:	83 e0       	ldi	r24, 0x03	; 3
 868:	85 bd       	out	0x25, r24	; 37

0000086a <.Loc.53>:
 86a:	17 bc       	out	0x27, r1	; 39

0000086c <.Loc.55>:
 86c:	18 bc       	out	0x28, r1	; 40

0000086e <.Loc.57>:
 86e:	87 e0       	ldi	r24, 0x07	; 7
 870:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>

00000874 <.Loc.59>:
 874:	78 94       	sei

00000876 <.Loc.60>:
 876:	08 95       	ret

00000878 <MotorLinks_set_percentage>:
 878:	94 e6       	ldi	r25, 0x64	; 100
 87a:	98 0f       	add	r25, r24

0000087c <.Loc.64>:
 87c:	99 3c       	cpi	r25, 0xC9	; 201
 87e:	c8 f4       	brcc	.+50     	; 0x8b2 <.L10>

00000880 <.Loc.65>:
 880:	88 23       	and	r24, r24
 882:	64 f0       	brlt	.+24     	; 0x89c <.L12>

00000884 <.Loc.67>:
 884:	18 bc       	out	0x28, r1	; 40

00000886 <.Loc.69>:
 886:	28 2f       	mov	r18, r24
 888:	3f ef       	ldi	r19, 0xFF	; 255
 88a:	23 03       	mulsu	r18, r19
 88c:	c0 01       	movw	r24, r0
 88e:	11 24       	eor	r1, r1

00000890 <.Loc.71>:
 890:	64 e6       	ldi	r22, 0x64	; 100
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divmodhi4>

00000898 <.Loc.72>:
 898:	67 bd       	out	0x27, r22	; 39
 89a:	08 95       	ret

0000089c <.L12>:
 89c:	17 bc       	out	0x27, r1	; 39

0000089e <.Loc.75>:
 89e:	28 2f       	mov	r18, r24
 8a0:	3f ef       	ldi	r19, 0xFF	; 255
 8a2:	23 03       	mulsu	r18, r19
 8a4:	c0 01       	movw	r24, r0
 8a6:	11 24       	eor	r1, r1

000008a8 <.Loc.77>:
 8a8:	6c e9       	ldi	r22, 0x9C	; 156
 8aa:	7f ef       	ldi	r23, 0xFF	; 255
 8ac:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divmodhi4>

000008b0 <.Loc.78>:
 8b0:	68 bd       	out	0x28, r22	; 40

000008b2 <.L10>:
 8b2:	08 95       	ret

000008b4 <__vector_15>:
 8b4:	1f 92       	push	r1
 8b6:	1f b6       	in	r1, 0x3f	; 63
 8b8:	1f 92       	push	r1
 8ba:	11 24       	eor	r1, r1
 8bc:	8f 93       	push	r24
 8be:	8b b7       	in	r24, 0x3b	; 59
 8c0:	8f 93       	push	r24
 8c2:	ef 93       	push	r30
 8c4:	ff 93       	push	r31

000008c6 <.Loc.1>:
 8c6:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

000008ca <.Loc.3>:
 8ca:	81 11       	cpse	r24, r1
 8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <.L2>

000008ce <.Loc.4>:
 8ce:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

000008d2 <.Loc.5>:
 8d2:	81 11       	cpse	r24, r1
 8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <.L2>

000008d6 <.Loc.6>:
 8d6:	eb e0       	ldi	r30, 0x0B	; 11
 8d8:	f1 e0       	ldi	r31, 0x01	; 1
 8da:	80 81       	ld	r24, Z
 8dc:	8b 7f       	andi	r24, 0xFB	; 251
 8de:	80 83       	st	Z, r24

000008e0 <.Loc.8>:
 8e0:	80 81       	ld	r24, Z
 8e2:	87 7f       	andi	r24, 0xF7	; 247
 8e4:	80 83       	st	Z, r24
 8e6:	0c c0       	rjmp	.+24     	; 0x900 <.L1>

000008e8 <.L2>:
 8e8:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

000008ec <.Loc.12>:
 8ec:	88 23       	and	r24, r24
 8ee:	89 f0       	breq	.+34     	; 0x912 <.L4>

000008f0 <.Loc.13>:
 8f0:	eb e0       	ldi	r30, 0x0B	; 11
 8f2:	f1 e0       	ldi	r31, 0x01	; 1
 8f4:	80 81       	ld	r24, Z
 8f6:	87 7f       	andi	r24, 0xF7	; 247
 8f8:	80 83       	st	Z, r24

000008fa <.Loc.15>:
 8fa:	80 81       	ld	r24, Z

000008fc <.Loc.16>:
 8fc:	84 60       	ori	r24, 0x04	; 4
 8fe:	80 83       	st	Z, r24

00000900 <.L1>:
 900:	ff 91       	pop	r31
 902:	ef 91       	pop	r30
 904:	8f 91       	pop	r24
 906:	8b bf       	out	0x3b, r24	; 59
 908:	8f 91       	pop	r24
 90a:	1f 90       	pop	r1
 90c:	1f be       	out	0x3f, r1	; 63
 90e:	1f 90       	pop	r1
 910:	18 95       	reti

00000912 <.L4>:
 912:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000916 <.Loc.20>:
 916:	88 23       	and	r24, r24
 918:	99 f3       	breq	.-26     	; 0x900 <.L1>

0000091a <.Loc.21>:
 91a:	eb e0       	ldi	r30, 0x0B	; 11
 91c:	f1 e0       	ldi	r31, 0x01	; 1
 91e:	80 81       	ld	r24, Z
 920:	8b 7f       	andi	r24, 0xFB	; 251
 922:	80 83       	st	Z, r24

00000924 <.Loc.23>:
 924:	80 81       	ld	r24, Z

00000926 <.Loc.24>:
 926:	88 60       	ori	r24, 0x08	; 8
 928:	80 83       	st	Z, r24

0000092a <.Loc.25>:
 92a:	ea cf       	rjmp	.-44     	; 0x900 <.L1>

0000092c <__vector_13>:
 92c:	8f 93       	push	r24
 92e:	8f b7       	in	r24, 0x3f	; 63
 930:	8f 93       	push	r24
 932:	8b b7       	in	r24, 0x3b	; 59
 934:	8f 93       	push	r24
 936:	ef 93       	push	r30
 938:	ff 93       	push	r31

0000093a <.Loc.27>:
 93a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

0000093e <.Loc.29>:
 93e:	8f 3f       	cpi	r24, 0xFF	; 255
 940:	29 f0       	breq	.+10     	; 0x94c <.L5>

00000942 <.Loc.30>:
 942:	eb e0       	ldi	r30, 0x0B	; 11
 944:	f1 e0       	ldi	r31, 0x01	; 1
 946:	80 81       	ld	r24, Z
 948:	8b 7f       	andi	r24, 0xFB	; 251
 94a:	80 83       	st	Z, r24

0000094c <.L5>:
 94c:	ff 91       	pop	r31
 94e:	ef 91       	pop	r30
 950:	8f 91       	pop	r24
 952:	8b bf       	out	0x3b, r24	; 59
 954:	8f 91       	pop	r24
 956:	8f bf       	out	0x3f, r24	; 63
 958:	8f 91       	pop	r24
 95a:	18 95       	reti

0000095c <__vector_14>:
 95c:	8f 93       	push	r24
 95e:	8f b7       	in	r24, 0x3f	; 63
 960:	8f 93       	push	r24
 962:	8b b7       	in	r24, 0x3b	; 59
 964:	8f 93       	push	r24
 966:	ef 93       	push	r30
 968:	ff 93       	push	r31

0000096a <.Loc.34>:
 96a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

0000096e <.Loc.36>:
 96e:	8f 3f       	cpi	r24, 0xFF	; 255
 970:	29 f0       	breq	.+10     	; 0x97c <.L7>

00000972 <.Loc.37>:
 972:	eb e0       	ldi	r30, 0x0B	; 11
 974:	f1 e0       	ldi	r31, 0x01	; 1
 976:	80 81       	ld	r24, Z
 978:	87 7f       	andi	r24, 0xF7	; 247
 97a:	80 83       	st	Z, r24

0000097c <.L7>:
 97c:	ff 91       	pop	r31
 97e:	ef 91       	pop	r30
 980:	8f 91       	pop	r24
 982:	8b bf       	out	0x3b, r24	; 59
 984:	8f 91       	pop	r24
 986:	8f bf       	out	0x3f, r24	; 63
 988:	8f 91       	pop	r24
 98a:	18 95       	reti

0000098c <init_MotorRechts>:
 98c:	ea e0       	ldi	r30, 0x0A	; 10
 98e:	f1 e0       	ldi	r31, 0x01	; 1
 990:	80 81       	ld	r24, Z

00000992 <.Loc.42>:
 992:	84 60       	ori	r24, 0x04	; 4
 994:	80 83       	st	Z, r24

00000996 <.Loc.43>:
 996:	80 81       	ld	r24, Z

00000998 <.Loc.44>:
 998:	88 60       	ori	r24, 0x08	; 8
 99a:	80 83       	st	Z, r24

0000099c <.Loc.45>:
 99c:	eb e0       	ldi	r30, 0x0B	; 11
 99e:	f1 e0       	ldi	r31, 0x01	; 1
 9a0:	80 81       	ld	r24, Z
 9a2:	8b 7f       	andi	r24, 0xFB	; 251
 9a4:	80 83       	st	Z, r24

000009a6 <.Loc.47>:
 9a6:	80 81       	ld	r24, Z
 9a8:	87 7f       	andi	r24, 0xF7	; 247
 9aa:	80 83       	st	Z, r24

000009ac <.Loc.49>:
 9ac:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>

000009b0 <.Loc.51>:
 9b0:	83 e0       	ldi	r24, 0x03	; 3
 9b2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

000009b6 <.Loc.53>:
 9b6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

000009ba <.Loc.55>:
 9ba:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

000009be <.Loc.57>:
 9be:	87 e0       	ldi	r24, 0x07	; 7
 9c0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>

000009c4 <.Loc.59>:
 9c4:	78 94       	sei

000009c6 <.Loc.60>:
 9c6:	08 95       	ret

000009c8 <MotorRechts_set_percentage>:
 9c8:	94 e6       	ldi	r25, 0x64	; 100
 9ca:	98 0f       	add	r25, r24

000009cc <.Loc.64>:
 9cc:	99 3c       	cpi	r25, 0xC9	; 201
 9ce:	e8 f4       	brcc	.+58     	; 0xa0a <.L10>

000009d0 <.Loc.65>:
 9d0:	88 23       	and	r24, r24
 9d2:	74 f0       	brlt	.+28     	; 0x9f0 <.L12>

000009d4 <.Loc.67>:
 9d4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

000009d8 <.Loc.69>:
 9d8:	28 2f       	mov	r18, r24
 9da:	3f ef       	ldi	r19, 0xFF	; 255
 9dc:	23 03       	mulsu	r18, r19
 9de:	c0 01       	movw	r24, r0
 9e0:	11 24       	eor	r1, r1

000009e2 <.Loc.71>:
 9e2:	64 e6       	ldi	r22, 0x64	; 100
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divmodhi4>

000009ea <.Loc.72>:
 9ea:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 9ee:	08 95       	ret

000009f0 <.L12>:
 9f0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

000009f4 <.Loc.75>:
 9f4:	28 2f       	mov	r18, r24
 9f6:	3f ef       	ldi	r19, 0xFF	; 255
 9f8:	23 03       	mulsu	r18, r19
 9fa:	c0 01       	movw	r24, r0
 9fc:	11 24       	eor	r1, r1

000009fe <.Loc.77>:
 9fe:	6c e9       	ldi	r22, 0x9C	; 156
 a00:	7f ef       	ldi	r23, 0xFF	; 255
 a02:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divmodhi4>

00000a06 <.Loc.78>:
 a06:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000a0a <.L10>:
 a0a:	08 95       	ret

00000a0c <RotaryInit>:
 a0c:	81 b1       	in	r24, 0x01	; 1
 a0e:	8a 7f       	andi	r24, 0xFA	; 250
 a10:	81 b9       	out	0x01, r24	; 1

00000a12 <.Loc.3>:
 a12:	82 b1       	in	r24, 0x02	; 2

00000a14 <.Loc.4>:
 a14:	85 60       	ori	r24, 0x05	; 5
 a16:	82 b9       	out	0x02, r24	; 2

00000a18 <.Loc.5>:
 a18:	08 95       	ret

00000a1a <RotaryCheckStatus>:
 a1a:	80 b1       	in	r24, 0x00	; 0

00000a1c <.Loc.9>:
 a1c:	90 b1       	in	r25, 0x00	; 0

00000a1e <.Loc.10>:
 a1e:	80 fd       	sbrc	r24, 0
 a20:	0d c0       	rjmp	.+26     	; 0xa3c <.L3>
 a22:	92 ff       	sbrs	r25, 2
 a24:	0b c0       	rjmp	.+22     	; 0xa3c <.L3>

00000a26 <.L4>:
 a26:	00 9b       	sbis	0x00, 0	; 0
 a28:	fe cf       	rjmp	.-4      	; 0xa26 <.L4>

00000a2a <.Loc.14>:
 a2a:	02 99       	sbic	0x00, 2	; 0
 a2c:	30 c0       	rjmp	.+96     	; 0xa8e <.L2>

00000a2e <.Loc.16>:
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <rotarystatus+0x1>
 a36:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <rotarystatus>
 a3a:	08 95       	ret

00000a3c <.L3>:
 a3c:	80 b1       	in	r24, 0x00	; 0

00000a3e <.Loc.20>:
 a3e:	90 b1       	in	r25, 0x00	; 0

00000a40 <.Loc.21>:
 a40:	82 fd       	sbrc	r24, 2
 a42:	0d c0       	rjmp	.+26     	; 0xa5e <.L6>
 a44:	90 ff       	sbrs	r25, 0
 a46:	0b c0       	rjmp	.+22     	; 0xa5e <.L6>

00000a48 <.L7>:
 a48:	02 9b       	sbis	0x00, 2	; 0
 a4a:	fe cf       	rjmp	.-4      	; 0xa48 <.L7>

00000a4c <.Loc.25>:
 a4c:	00 99       	sbic	0x00, 0	; 0
 a4e:	1f c0       	rjmp	.+62     	; 0xa8e <.L2>

00000a50 <.Loc.27>:
 a50:	82 e0       	ldi	r24, 0x02	; 2
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <rotarystatus+0x1>
 a58:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <rotarystatus>
 a5c:	08 95       	ret

00000a5e <.L6>:
 a5e:	80 b1       	in	r24, 0x00	; 0

00000a60 <.Loc.31>:
 a60:	90 b1       	in	r25, 0x00	; 0

00000a62 <.Loc.32>:
 a62:	81 70       	andi	r24, 0x01	; 1
 a64:	94 70       	andi	r25, 0x04	; 4

00000a66 <.Loc.33>:
 a66:	89 2b       	or	r24, r25
 a68:	81 11       	cpse	r24, r1
 a6a:	11 c0       	rjmp	.+34     	; 0xa8e <.L2>

00000a6c <.L8>:
 a6c:	00 9b       	sbis	0x00, 0	; 0
 a6e:	fe cf       	rjmp	.-4      	; 0xa6c <.L8>

00000a70 <.Loc.37>:
 a70:	02 99       	sbic	0x00, 2	; 0
 a72:	07 c0       	rjmp	.+14     	; 0xa82 <.L9>

00000a74 <.Loc.39>:
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <rotarystatus+0x1>
 a7c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <rotarystatus>
 a80:	08 95       	ret

00000a82 <.L9>:
 a82:	82 e0       	ldi	r24, 0x02	; 2
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <rotarystatus+0x1>
 a8a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <rotarystatus>

00000a8e <.L2>:
 a8e:	08 95       	ret

00000a90 <RotaryGetStatus>:
 a90:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rotarystatus>
 a94:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <rotarystatus+0x1>

00000a98 <.Loc.47>:
 a98:	08 95       	ret

00000a9a <RotaryResetStatus>:
 a9a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <rotarystatus+0x1>
 a9e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <rotarystatus>

00000aa2 <.Loc.51>:
 aa2:	08 95       	ret

00000aa4 <Timer1_Start>:
 aa4:	e1 e8       	ldi	r30, 0x81	; 129
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	80 81       	ld	r24, Z

00000aaa <.Loc.54>:
 aaa:	81 60       	ori	r24, 0x01	; 1
 aac:	80 83       	st	Z, r24

00000aae <.Loc.55>:
 aae:	ef e6       	ldi	r30, 0x6F	; 111
 ab0:	f0 e0       	ldi	r31, 0x00	; 0
 ab2:	80 81       	ld	r24, Z

00000ab4 <.Loc.56>:
 ab4:	81 60       	ori	r24, 0x01	; 1
 ab6:	80 83       	st	Z, r24

00000ab8 <.Loc.57>:
 ab8:	08 95       	ret

00000aba <__vector_20>:
 aba:	1f 92       	push	r1
 abc:	0f 92       	push	r0
 abe:	0f b6       	in	r0, 0x3f	; 63
 ac0:	0f 92       	push	r0
 ac2:	11 24       	eor	r1, r1
 ac4:	0b b6       	in	r0, 0x3b	; 59
 ac6:	0f 92       	push	r0
 ac8:	2f 93       	push	r18
 aca:	3f 93       	push	r19
 acc:	4f 93       	push	r20
 ace:	5f 93       	push	r21
 ad0:	6f 93       	push	r22
 ad2:	7f 93       	push	r23
 ad4:	8f 93       	push	r24
 ad6:	9f 93       	push	r25
 ad8:	af 93       	push	r26
 ada:	bf 93       	push	r27
 adc:	ef 93       	push	r30
 ade:	ff 93       	push	r31

00000ae0 <.Loc.59>:
 ae0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <RotaryCheckStatus>

00000ae4 <.LVL0>:
 ae4:	ff 91       	pop	r31
 ae6:	ef 91       	pop	r30
 ae8:	bf 91       	pop	r27
 aea:	af 91       	pop	r26
 aec:	9f 91       	pop	r25
 aee:	8f 91       	pop	r24
 af0:	7f 91       	pop	r23
 af2:	6f 91       	pop	r22
 af4:	5f 91       	pop	r21
 af6:	4f 91       	pop	r20
 af8:	3f 91       	pop	r19
 afa:	2f 91       	pop	r18
 afc:	0f 90       	pop	r0
 afe:	0b be       	out	0x3b, r0	; 59
 b00:	0f 90       	pop	r0
 b02:	0f be       	out	0x3f, r0	; 63
 b04:	0f 90       	pop	r0
 b06:	1f 90       	pop	r1
 b08:	18 95       	reti

00000b0a <__divmodhi4>:
 b0a:	97 fb       	bst	r25, 7

00000b0c <.Loc.1>:
 b0c:	07 2e       	mov	r0, r23

00000b0e <.Loc.2>:
 b0e:	16 f4       	brtc	.+4      	; 0xb14 <.L^B1>

00000b10 <.Loc.3>:
 b10:	00 94       	com	r0

00000b12 <.Loc.4>:
 b12:	07 d0       	rcall	.+14     	; 0xb22 <__divmodhi4_neg1>

00000b14 <.L^B1>:
 b14:	77 fd       	sbrc	r23, 7

00000b16 <.Loc.6>:
 b16:	09 d0       	rcall	.+18     	; 0xb2a <__divmodhi4_neg2>

00000b18 <.Loc.7>:
 b18:	0e 94 99 05 	call	0xb32	; 0xb32 <__udivmodhi4>

00000b1c <.Loc.8>:
 b1c:	07 fc       	sbrc	r0, 7

00000b1e <.Loc.9>:
 b1e:	05 d0       	rcall	.+10     	; 0xb2a <__divmodhi4_neg2>

00000b20 <.Loc.10>:
 b20:	3e f4       	brtc	.+14     	; 0xb30 <__divmodhi4_exit>

00000b22 <__divmodhi4_neg1>:
 b22:	90 95       	com	r25

00000b24 <.Loc.12>:
 b24:	81 95       	neg	r24

00000b26 <.Loc.13>:
 b26:	9f 4f       	sbci	r25, 0xFF	; 255

00000b28 <.Loc.14>:
 b28:	08 95       	ret

00000b2a <__divmodhi4_neg2>:
 b2a:	70 95       	com	r23

00000b2c <.Loc.16>:
 b2c:	61 95       	neg	r22

00000b2e <.Loc.17>:
 b2e:	7f 4f       	sbci	r23, 0xFF	; 255

00000b30 <__divmodhi4_exit>:
 b30:	08 95       	ret

00000b32 <__udivmodhi4>:
 b32:	aa 1b       	sub	r26, r26

00000b34 <.Loc.1>:
 b34:	bb 1b       	sub	r27, r27

00000b36 <.Loc.2>:
 b36:	51 e1       	ldi	r21, 0x11	; 17

00000b38 <.Loc.3>:
 b38:	07 c0       	rjmp	.+14     	; 0xb48 <__udivmodhi4_ep>

00000b3a <__udivmodhi4_loop>:
 b3a:	aa 1f       	adc	r26, r26

00000b3c <.Loc.5>:
 b3c:	bb 1f       	adc	r27, r27

00000b3e <.Loc.6>:
 b3e:	a6 17       	cp	r26, r22

00000b40 <.Loc.7>:
 b40:	b7 07       	cpc	r27, r23

00000b42 <.Loc.8>:
 b42:	10 f0       	brcs	.+4      	; 0xb48 <__udivmodhi4_ep>

00000b44 <.Loc.9>:
 b44:	a6 1b       	sub	r26, r22

00000b46 <.Loc.10>:
 b46:	b7 0b       	sbc	r27, r23

00000b48 <__udivmodhi4_ep>:
 b48:	88 1f       	adc	r24, r24

00000b4a <.Loc.12>:
 b4a:	99 1f       	adc	r25, r25

00000b4c <.Loc.13>:
 b4c:	5a 95       	dec	r21

00000b4e <.Loc.14>:
 b4e:	a9 f7       	brne	.-22     	; 0xb3a <__udivmodhi4_loop>

00000b50 <.Loc.15>:
 b50:	80 95       	com	r24

00000b52 <.Loc.16>:
 b52:	90 95       	com	r25

00000b54 <.Loc.17>:
 b54:	bc 01       	movw	r22, r24

00000b56 <.Loc.18>:
 b56:	cd 01       	movw	r24, r26

00000b58 <.Loc.19>:
 b58:	08 95       	ret

00000b5a <_exit>:
 b5a:	f8 94       	cli

00000b5c <__stop_program>:
 b5c:	ff cf       	rjmp	.-2      	; 0xb5c <__stop_program>
