
bin\Debug\Week6_bochtmaken_functies.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000778  0000082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000778  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800200  00800200  0000082c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  0000082f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000000f8  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000159e  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000eed  00000000  00000000  00001f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000f13  00000000  00000000  00002e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000001a0  00000000  00000000  00003d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000647  00000000  00000000  00003ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001b5  00000000  00000000  00004507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000000cb  00000000  00000000  000046bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 22 03 	jmp	0x644	; 0x644 <__vector_13>
  38:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_14>
  3c:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_15>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_21>
  58:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_22>
  5c:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_23>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
  fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
  fe:	a8 30       	cpi	r26, 0x08	; 8

00000100 <.Loc.6>:
 100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
 102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
 104:	0e 94 12 02 	call	0x424	; 0x424 <main>
 108:	0c 94 ba 03 	jmp	0x774	; 0x774 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <initTimer>:
}

void initTimer (void)
{
    // Timer 5 is de systeemtimer (overflow)
    TCCR5A = 0;
 110:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

00000114 <.Loc.3>:
    // Timer 8 kan niet ver genoeg tellen!
    // 8 bit timer 16000000 Hz / 64 / 256 = 976.56 Hz
    // 16 bit timer 16000000 Hz / 64 / 65.536 = 3.906,25 Hz
    // 16 bit timer 16000000 Hz / 65.536 = 244 Hz
    // start timer 0, prescaler = 64
    TCCR5B = TCCR5B | (0 << CS51) | (1 << CS50); //244,14 Hz
 114:	e1 e2       	ldi	r30, 0x21	; 33
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	80 81       	ld	r24, Z

0000011a <.Loc.5>:
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24

0000011e <.Loc.6>:
}
 11e:	08 95       	ret

00000120 <init>:
    init_MotorLinks();
 120:	0e 94 ae 02 	call	0x55c	; 0x55c <init_MotorLinks>

00000124 <.LVL0>:
    init_MotorRechts();
 124:	0e 94 52 03 	call	0x6a4	; 0x6a4 <init_MotorRechts>

00000128 <.LVL1>:
    initTimer();
 128:	0e 94 88 00 	call	0x110	; 0x110 <initTimer>

0000012c <.LVL2>:
    DDRB |= (1<<PB7);     // LED pin output
 12c:	27 9a       	sbi	0x04, 7	; 4

0000012e <.Loc.13>:
    PORTB &= ~(1<<PB7);      // LED off
 12e:	2f 98       	cbi	0x05, 7	; 5

00000130 <.Loc.15>:
}
 130:	08 95       	ret

00000132 <timer>:

void timer()
{
    if (TIFR5 & (1<<TOV5))  //elke keer als de timer overflowt
 132:	d0 9b       	sbis	0x1a, 0	; 26
 134:	0b c0       	rjmp	.+22     	; 0x14c <.L3>

00000136 <.Loc.19>:
    {
        // Timer overflow, +/- 1 ms voorbij
        TIFR5 = (1<<TOV5);  // Wis flag
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	8a bb       	out	0x1a, r24	; 26

0000013a <.Loc.21>:
        teller++;           //Verhoog teller met 1 iedere overflow (244Hz)
 13a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 13e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <teller+0x1>
 148:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <teller>

0000014c <.L3>:
    }
}
 14c:	08 95       	ret

0000014e <rechtdoor>:

void rechtdoor(int tijd)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	c8 2f       	mov	r28, r24
 154:	d9 2f       	mov	r29, r25

00000156 <.Loc.26>:
    Led_Links_UIT;
 156:	2f 98       	cbi	0x05, 7	; 5

00000158 <.Loc.27>:
    MotorLinks_set_percentage(35);
 158:	83 e2       	ldi	r24, 0x23	; 35
 15a:	90 e0       	ldi	r25, 0x00	; 0

0000015c <.Loc.28>:
 15c:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

00000160 <.LVL5>:
    MotorRechts_set_percentage(40);
 160:	88 e2       	ldi	r24, 0x28	; 40
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

00000168 <.LVL6>:
    if(teller > (tijd/4))
 168:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <teller>
 16c:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <teller+0x1>

00000170 <.Loc.32>:
 170:	ce 01       	movw	r24, r28
 172:	99 23       	and	r25, r25
 174:	54 f0       	brlt	.+20     	; 0x18a <.L8>

00000176 <.L7>:
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	95 95       	asr	r25
 17c:	87 95       	ror	r24

0000017e <.Loc.33>:
 17e:	82 17       	cp	r24, r18
 180:	93 07       	cpc	r25, r19
 182:	2c f0       	brlt	.+10     	; 0x18e <.L9>

00000184 <.L5>:
    {
        MotorLinks_set_percentage(0);
        MotorRechts_set_percentage(0);
        state++;
    }
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <.L8>:
    if(teller > (tijd/4))
 18a:	03 96       	adiw	r24, 0x03	; 3
 18c:	f4 cf       	rjmp	.-24     	; 0x176 <.L7>

0000018e <.L9>:
        MotorLinks_set_percentage(0);
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

00000196 <.LVL7>:
        MotorRechts_set_percentage(0);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

0000019e <.LVL8>:
        state++;
 19e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 1a2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
 1ac:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

000001b0 <.Loc.40>:
}
 1b0:	e9 cf       	rjmp	.-46     	; 0x184 <.L5>

000001b2 <Bocht_Links>:

void Bocht_Links(void)
{
    static int i = 0;
    //wielen uit
    if (i==0)
 1b2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <i.1>
 1b6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <i.1+0x1>
 1ba:	89 2b       	or	r24, r25
 1bc:	e1 f0       	breq	.+56     	; 0x1f6 <.L20>

000001be <.L11>:
            i=1;
            teller = 0;
        }
    }
    //draai linksom
    if (i==1)
 1be:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <i.1>
 1c2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <i.1+0x1>
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	79 f1       	breq	.+94     	; 0x228 <.L12>

000001ca <.L13>:
            teller = 0;
        }
    }

    //rijdt rechtdoor
    if (i==2)
 1ca:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <i.1>
 1ce:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <i.1+0x1>
 1d2:	02 97       	sbiw	r24, 0x02	; 2
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <.L15>

000001d6 <L0^A>:
 1d6:	42 c0       	rjmp	.+132    	; 0x25c <.L14>

000001d8 <.L15>:
            teller = 0;
        }
    }

    //draai linksom
    if (i==3)
 1d8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <i.1>
 1dc:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <i.1+0x1>
 1e0:	03 97       	sbiw	r24, 0x03	; 3
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <.L17>

000001e4 <L0^A>:
 1e4:	55 c0       	rjmp	.+170    	; 0x290 <.L16>

000001e6 <.L17>:
        {
            i=4;
            teller = 0;
        }
    }
    if(i==4)
 1e6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <i.1>
 1ea:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <i.1+0x1>
 1ee:	04 97       	sbiw	r24, 0x04	; 4
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <.L10>

000001f2 <L0^A>:
 1f2:	62 c0       	rjmp	.+196    	; 0x2b8 <.L18>

000001f4 <.L10>:
        MotorLinks_set_percentage(0);
        MotorRechts_set_percentage(0);
        state++;
        teller = 0;
    }
}
 1f4:	08 95       	ret

000001f6 <.L20>:
        MotorLinks_set_percentage(0);
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

000001fe <.LVL9>:
        MotorRechts_set_percentage(0);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

00000206 <.LVL10>:
        if (teller > (1450/4))          // hoeveel seconden wachten voordat state veranderd
 206:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 20a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

0000020e <.Loc.58>:
 20e:	8b 36       	cpi	r24, 0x6B	; 107
 210:	91 40       	sbci	r25, 0x01	; 1
 212:	ac f2       	brlt	.-86     	; 0x1be <.L11>

00000214 <.Loc.59>:
            i=1;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <i.1+0x1>
 21c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <i.1>

00000220 <.Loc.61>:
            teller = 0;
 220:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 224:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

00000228 <.L12>:
        Led_Links_AAN;
 228:	2f 9a       	sbi	0x05, 7	; 5

0000022a <.Loc.65>:
        MotorLinks_set_percentage(0);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

00000232 <.LVL11>:
        MotorRechts_set_percentage(40);
 232:	88 e2       	ldi	r24, 0x28	; 40
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

0000023a <.LVL12>:
        if (teller > (1450/4))          // hoeveel seconden wachten voordat state veranderd
 23a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 23e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

00000242 <.Loc.69>:
 242:	8b 36       	cpi	r24, 0x6B	; 107
 244:	91 40       	sbci	r25, 0x01	; 1
 246:	0c f2       	brlt	.-126    	; 0x1ca <.L13>

00000248 <.Loc.70>:
            i=2;
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <i.1+0x1>
 250:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <i.1>

00000254 <.Loc.72>:
            teller = 0;
 254:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 258:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

0000025c <.L14>:
        MotorLinks_set_percentage(35);
 25c:	83 e2       	ldi	r24, 0x23	; 35
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

00000264 <.LVL13>:
        MotorRechts_set_percentage(40);
 264:	88 e2       	ldi	r24, 0x28	; 40
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

0000026c <.LVL14>:
        if (teller > (1400/4))                  // hoeveel seconden wachten voordat state veranderd
 26c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 270:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

00000274 <.Loc.79>:
 274:	8f 35       	cpi	r24, 0x5F	; 95
 276:	91 40       	sbci	r25, 0x01	; 1
 278:	0c f4       	brge	.+2      	; 0x27c <.Loc.80>

0000027a <L0^A>:
 27a:	ae cf       	rjmp	.-164    	; 0x1d8 <.L15>

0000027c <.Loc.80>:
            i=3;
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <i.1+0x1>
 284:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <i.1>

00000288 <.Loc.82>:
            teller = 0;
 288:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 28c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

00000290 <.L16>:
        MotorLinks_set_percentage(0);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

00000298 <.LVL15>:
        MotorRechts_set_percentage(40);
 298:	88 e2       	ldi	r24, 0x28	; 40
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

000002a0 <.LVL16>:
        if (teller > (1400/4))            // hoeveel seconden wachten voordat state veranderd
 2a0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 2a4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

000002a8 <.Loc.89>:
 2a8:	8f 35       	cpi	r24, 0x5F	; 95
 2aa:	91 40       	sbci	r25, 0x01	; 1
 2ac:	0c f4       	brge	.+2      	; 0x2b0 <.Loc.90>

000002ae <L0^A>:
 2ae:	9b cf       	rjmp	.-202    	; 0x1e6 <.L17>

000002b0 <.Loc.90>:
            teller = 0;
 2b0:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 2b4:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

000002b8 <.L18>:
        i=0;
 2b8:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <i.1+0x1>
 2bc:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <i.1>

000002c0 <.Loc.96>:
        MotorLinks_set_percentage(0);
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

000002c8 <.LVL17>:
        MotorRechts_set_percentage(0);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

000002d0 <.LVL18>:
        state++;
 2d0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 2d4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
 2de:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

000002e2 <.Loc.100>:
        teller = 0;
 2e2:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 2e6:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

000002ea <.LBE8>:
}
 2ea:	84 cf       	rjmp	.-248    	; 0x1f4 <.L10>

000002ec <Bocht_Rechts>:

void Bocht_Rechts(void)
{
    static int i = 0;
    //wielen uit
    if (i==0)
 2ec:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <i.0>
 2f0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <i.0+0x1>
 2f4:	89 2b       	or	r24, r25
 2f6:	e1 f0       	breq	.+56     	; 0x330 <.L31>

000002f8 <.L22>:
            teller = 0;
        }
    }

    //draai rechtsom
    if (i==1)
 2f8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <i.0>
 2fc:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <i.0+0x1>
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	79 f1       	breq	.+94     	; 0x362 <.L23>

00000304 <.L24>:
            teller = 0;
        }
    }

    //rijdt rechtdoor
    if (i==2)
 304:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <i.0>
 308:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <i.0+0x1>
 30c:	02 97       	sbiw	r24, 0x02	; 2
 30e:	09 f4       	brne	.+2      	; 0x312 <.L26>

00000310 <L0^A>:
 310:	41 c0       	rjmp	.+130    	; 0x394 <.L25>

00000312 <.L26>:
            i=3;
            teller = 0;
        }
    }
    //draai rechtsom
    if (i==3)
 312:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <i.0>
 316:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <i.0+0x1>
 31a:	03 97       	sbiw	r24, 0x03	; 3
 31c:	09 f4       	brne	.+2      	; 0x320 <.L28>

0000031e <L0^A>:
 31e:	54 c0       	rjmp	.+168    	; 0x3c8 <.L27>

00000320 <.L28>:
        {
            i=4;
            teller = 0;
        }
    }
    if(i==4)
 320:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <i.0>
 324:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <i.0+0x1>
 328:	04 97       	sbiw	r24, 0x04	; 4
 32a:	09 f4       	brne	.+2      	; 0x32e <.L21>

0000032c <L0^A>:
 32c:	61 c0       	rjmp	.+194    	; 0x3f0 <.L29>

0000032e <.L21>:
        MotorLinks_set_percentage(0);
        MotorRechts_set_percentage(0);
        state++;
        teller = 0;
    }
}
 32e:	08 95       	ret

00000330 <.L31>:
        MotorLinks_set_percentage(0);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

00000338 <.LVL19>:
        MotorRechts_set_percentage(0);
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

00000340 <.LVL20>:
        if (teller > (1450/4))          // hoeveel seconden wachten voordat state veranderd
 340:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 344:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

00000348 <.Loc.120>:
 348:	8b 36       	cpi	r24, 0x6B	; 107
 34a:	91 40       	sbci	r25, 0x01	; 1
 34c:	ac f2       	brlt	.-86     	; 0x2f8 <.L22>

0000034e <.Loc.121>:
            i=1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <i.0+0x1>
 356:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <i.0>

0000035a <.Loc.123>:
            teller = 0;
 35a:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 35e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

00000362 <.L23>:
        MotorLinks_set_percentage(40);
 362:	88 e2       	ldi	r24, 0x28	; 40
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

0000036a <.LVL21>:
        MotorRechts_set_percentage(0);
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

00000372 <.LVL22>:
        if (teller > (1450/4))          // hoeveel seconden wachten voordat state veranderd
 372:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 376:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

0000037a <.Loc.130>:
 37a:	8b 36       	cpi	r24, 0x6B	; 107
 37c:	91 40       	sbci	r25, 0x01	; 1
 37e:	14 f2       	brlt	.-124    	; 0x304 <.L24>

00000380 <.Loc.131>:
            i=2;
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <i.0+0x1>
 388:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <i.0>

0000038c <.Loc.133>:
            teller = 0;
 38c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 390:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

00000394 <.L25>:
        MotorLinks_set_percentage(40);
 394:	88 e2       	ldi	r24, 0x28	; 40
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

0000039c <.LVL23>:
        MotorRechts_set_percentage(35);
 39c:	83 e2       	ldi	r24, 0x23	; 35
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

000003a4 <.LVL24>:
        if (teller > (1400/4))                  // hoeveel seconden wachten voordat state veranderd
 3a4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 3a8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

000003ac <.Loc.140>:
 3ac:	8f 35       	cpi	r24, 0x5F	; 95
 3ae:	91 40       	sbci	r25, 0x01	; 1
 3b0:	0c f4       	brge	.+2      	; 0x3b4 <.Loc.141>

000003b2 <L0^A>:
 3b2:	af cf       	rjmp	.-162    	; 0x312 <.L26>

000003b4 <.Loc.141>:
            i=3;
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <i.0+0x1>
 3bc:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <i.0>

000003c0 <.Loc.143>:
            teller = 0;
 3c0:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 3c4:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

000003c8 <.L27>:
        MotorLinks_set_percentage(40);
 3c8:	88 e2       	ldi	r24, 0x28	; 40
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

000003d0 <.LVL25>:
        MotorRechts_set_percentage(0);
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

000003d8 <.LVL26>:
        if (teller > (1400/4))            // hoeveel seconden wachten voordat state veranderd
 3d8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <teller>
 3dc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <teller+0x1>

000003e0 <.Loc.150>:
 3e0:	8f 35       	cpi	r24, 0x5F	; 95
 3e2:	91 40       	sbci	r25, 0x01	; 1
 3e4:	0c f4       	brge	.+2      	; 0x3e8 <.Loc.151>

000003e6 <L0^A>:
 3e6:	9c cf       	rjmp	.-200    	; 0x320 <.L28>

000003e8 <.Loc.151>:
            teller = 0;
 3e8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 3ec:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

000003f0 <.L29>:
        i=0;
 3f0:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <i.0+0x1>
 3f4:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <i.0>

000003f8 <.Loc.157>:
        MotorLinks_set_percentage(0);
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 c8 02 	call	0x590	; 0x590 <MotorLinks_set_percentage>

00000400 <.LVL27>:
        MotorRechts_set_percentage(0);
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 70 03 	call	0x6e0	; 0x6e0 <MotorRechts_set_percentage>

00000408 <.LVL28>:
        state++;
 408:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 40c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
 416:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>

0000041a <.Loc.161>:
        teller = 0;
 41a:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <teller+0x1>
 41e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <teller>

00000422 <.LBE13>:
}
 422:	85 cf       	rjmp	.-246    	; 0x32e <.L21>

00000424 <main>:

int main(void)
{
    init();
 424:	0e 94 90 00 	call	0x120	; 0x120 <init>

00000428 <.LBB14>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	2f ef       	ldi	r18, 0xFF	; 255
 42a:	89 e6       	ldi	r24, 0x69	; 105
 42c:	98 e1       	ldi	r25, 0x18	; 24

0000042e <.L1^B1>:
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <.L1^B1>
 436:	00 c0       	rjmp	.+0      	; 0x438 <L0^A>

00000438 <L0^A>:
	...

0000043a <.Loc.175>:
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
#endif
}
 43a:	12 c0       	rjmp	.+36     	; 0x460 <.L36>

0000043c <.L33>:
        timer();
        if (state == 0)
        {
            rechtdoor(2000);
        }
        if (state == 1)
 43c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 440:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000444 <.Loc.179>:
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	c9 f0       	breq	.+50     	; 0x47a <.L39>

00000448 <.L34>:
        {
            Bocht_Links();
        }
        if (state == 2)
 448:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 44c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

00000450 <.Loc.182>:
 450:	02 97       	sbiw	r24, 0x02	; 2
 452:	b1 f0       	breq	.+44     	; 0x480 <.L40>

00000454 <.L35>:
        {
            rechtdoor(5000);
        }
        if (state == 3)
 454:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 458:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

0000045c <.Loc.185>:
 45c:	03 97       	sbiw	r24, 0x03	; 3
 45e:	a9 f0       	breq	.+42     	; 0x48a <.L41>

00000460 <.L36>:
        timer();
 460:	0e 94 99 00 	call	0x132	; 0x132 <timer>

00000464 <.LVL31>:
        if (state == 0)
 464:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 468:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>

0000046c <.Loc.190>:
 46c:	89 2b       	or	r24, r25
 46e:	31 f7       	brne	.-52     	; 0x43c <.L33>

00000470 <.Loc.191>:
            rechtdoor(2000);
 470:	80 ed       	ldi	r24, 0xD0	; 208
 472:	97 e0       	ldi	r25, 0x07	; 7
 474:	0e 94 a7 00 	call	0x14e	; 0x14e <rechtdoor>

00000478 <.LVL32>:
 478:	e1 cf       	rjmp	.-62     	; 0x43c <.L33>

0000047a <.L39>:
            Bocht_Links();
 47a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Bocht_Links>

0000047e <.LVL33>:
 47e:	e4 cf       	rjmp	.-56     	; 0x448 <.L34>

00000480 <.L40>:
            rechtdoor(5000);
 480:	88 e8       	ldi	r24, 0x88	; 136
 482:	93 e1       	ldi	r25, 0x13	; 19
 484:	0e 94 a7 00 	call	0x14e	; 0x14e <rechtdoor>

00000488 <.LVL34>:
 488:	e5 cf       	rjmp	.-54     	; 0x454 <.L35>

0000048a <.L41>:
        {
            Bocht_Rechts();
 48a:	0e 94 76 01 	call	0x2ec	; 0x2ec <Bocht_Rechts>

0000048e <.LVL35>:
 48e:	e8 cf       	rjmp	.-48     	; 0x460 <.L36>

00000490 <__vector_23>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "MotorLinks.h"

ISR(TIMER0_OVF_vect)
{
 490:	1f 92       	push	r1
 492:	1f b6       	in	r1, 0x3f	; 63
 494:	1f 92       	push	r1
 496:	11 24       	eor	r1, r1
 498:	8f 93       	push	r24
 49a:	8b b7       	in	r24, 0x3b	; 59
 49c:	8f 93       	push	r24
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31

000004a2 <.Loc.1>:
	if (OCR0A == 0 && OCR0B == 0)
 4a2:	87 b5       	in	r24, 0x27	; 39

000004a4 <.Loc.3>:
 4a4:	81 11       	cpse	r24, r1
 4a6:	0c c0       	rjmp	.+24     	; 0x4c0 <.L2>

000004a8 <.Loc.4>:
 4a8:	88 b5       	in	r24, 0x28	; 40

000004aa <.Loc.5>:
 4aa:	81 11       	cpse	r24, r1
 4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <.L2>

000004ae <.Loc.6>:
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
 4ae:	eb e0       	ldi	r30, 0x0B	; 11
 4b0:	f1 e0       	ldi	r31, 0x01	; 1
 4b2:	80 81       	ld	r24, Z
 4b4:	8e 7f       	andi	r24, 0xFE	; 254
 4b6:	80 83       	st	Z, r24

000004b8 <.Loc.8>:
		PORT_LPWM &= ~(1<<PIN_LPWM);
 4b8:	80 81       	ld	r24, Z
 4ba:	8d 7f       	andi	r24, 0xFD	; 253
 4bc:	80 83       	st	Z, r24
 4be:	0b c0       	rjmp	.+22     	; 0x4d6 <.L1>

000004c0 <.L2>:
	}
	else if (OCR0A != 0)
 4c0:	87 b5       	in	r24, 0x27	; 39

000004c2 <.Loc.12>:
 4c2:	88 23       	and	r24, r24
 4c4:	89 f0       	breq	.+34     	; 0x4e8 <.L4>

000004c6 <.Loc.13>:
	{
		PORT_LPWM &= ~(1<<PIN_LPWM);
 4c6:	eb e0       	ldi	r30, 0x0B	; 11
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	80 81       	ld	r24, Z
 4cc:	8d 7f       	andi	r24, 0xFD	; 253
 4ce:	80 83       	st	Z, r24

000004d0 <.Loc.15>:
		PORT_RPWM |= (1<<PIN_RPWM);
 4d0:	80 81       	ld	r24, Z

000004d2 <.Loc.16>:
 4d2:	81 60       	ori	r24, 0x01	; 1
 4d4:	80 83       	st	Z, r24

000004d6 <.L1>:
	else if (OCR0B != 0)
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
		PORT_LPWM |= (1<<PIN_LPWM);
	}
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	8f 91       	pop	r24
 4dc:	8b bf       	out	0x3b, r24	; 59
 4de:	8f 91       	pop	r24
 4e0:	1f 90       	pop	r1
 4e2:	1f be       	out	0x3f, r1	; 63
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <.L4>:
	else if (OCR0B != 0)
 4e8:	88 b5       	in	r24, 0x28	; 40

000004ea <.Loc.20>:
 4ea:	88 23       	and	r24, r24
 4ec:	a1 f3       	breq	.-24     	; 0x4d6 <.L1>

000004ee <.Loc.21>:
		PORT_RPWM &= ~(1<<PIN_RPWM);
 4ee:	eb e0       	ldi	r30, 0x0B	; 11
 4f0:	f1 e0       	ldi	r31, 0x01	; 1
 4f2:	80 81       	ld	r24, Z
 4f4:	8e 7f       	andi	r24, 0xFE	; 254
 4f6:	80 83       	st	Z, r24

000004f8 <.Loc.23>:
		PORT_LPWM |= (1<<PIN_LPWM);
 4f8:	80 81       	ld	r24, Z

000004fa <.Loc.24>:
 4fa:	82 60       	ori	r24, 0x02	; 2
 4fc:	80 83       	st	Z, r24

000004fe <.Loc.25>:
}
 4fe:	eb cf       	rjmp	.-42     	; 0x4d6 <.L1>

00000500 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 500:	8f 93       	push	r24
 502:	8f b7       	in	r24, 0x3f	; 63
 504:	8f 93       	push	r24
 506:	8b b7       	in	r24, 0x3b	; 59
 508:	8f 93       	push	r24
 50a:	ef 93       	push	r30
 50c:	ff 93       	push	r31

0000050e <.Loc.27>:
	if (OCR0A != 255)
 50e:	87 b5       	in	r24, 0x27	; 39

00000510 <.Loc.29>:
 510:	8f 3f       	cpi	r24, 0xFF	; 255
 512:	29 f0       	breq	.+10     	; 0x51e <.L5>

00000514 <.Loc.30>:
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
 514:	eb e0       	ldi	r30, 0x0B	; 11
 516:	f1 e0       	ldi	r31, 0x01	; 1
 518:	80 81       	ld	r24, Z
 51a:	8e 7f       	andi	r24, 0xFE	; 254
 51c:	80 83       	st	Z, r24

0000051e <.L5>:
	}
}
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	8f 91       	pop	r24
 524:	8b bf       	out	0x3b, r24	; 59
 526:	8f 91       	pop	r24
 528:	8f bf       	out	0x3f, r24	; 63
 52a:	8f 91       	pop	r24
 52c:	18 95       	reti

0000052e <__vector_22>:

ISR(TIMER0_COMPB_vect)
{
 52e:	8f 93       	push	r24
 530:	8f b7       	in	r24, 0x3f	; 63
 532:	8f 93       	push	r24
 534:	8b b7       	in	r24, 0x3b	; 59
 536:	8f 93       	push	r24
 538:	ef 93       	push	r30
 53a:	ff 93       	push	r31

0000053c <.Loc.34>:
	if (OCR0B != 255)
 53c:	88 b5       	in	r24, 0x28	; 40

0000053e <.Loc.36>:
 53e:	8f 3f       	cpi	r24, 0xFF	; 255
 540:	29 f0       	breq	.+10     	; 0x54c <.L7>

00000542 <.Loc.37>:
	{
		PORT_LPWM &= ~(1<<PIN_LPWM);
 542:	eb e0       	ldi	r30, 0x0B	; 11
 544:	f1 e0       	ldi	r31, 0x01	; 1
 546:	80 81       	ld	r24, Z
 548:	8d 7f       	andi	r24, 0xFD	; 253
 54a:	80 83       	st	Z, r24

0000054c <.L7>:
	}
}
 54c:	ff 91       	pop	r31
 54e:	ef 91       	pop	r30
 550:	8f 91       	pop	r24
 552:	8b bf       	out	0x3b, r24	; 59
 554:	8f 91       	pop	r24
 556:	8f bf       	out	0x3f, r24	; 63
 558:	8f 91       	pop	r24
 55a:	18 95       	reti

0000055c <init_MotorLinks>:

void init_MotorLinks (void)
{
	// Config pins as output
	DDR_RPWM |= (1<<PIN_RPWM);
 55c:	ea e0       	ldi	r30, 0x0A	; 10
 55e:	f1 e0       	ldi	r31, 0x01	; 1
 560:	80 81       	ld	r24, Z

00000562 <.Loc.42>:
 562:	81 60       	ori	r24, 0x01	; 1
 564:	80 83       	st	Z, r24

00000566 <.Loc.43>:
	DDR_LPWM |= (1<<PIN_LPWM);
 566:	80 81       	ld	r24, Z

00000568 <.Loc.44>:
 568:	82 60       	ori	r24, 0x02	; 2
 56a:	80 83       	st	Z, r24

0000056c <.Loc.45>:

	// Output low
	PORT_RPWM &= ~(1<<PIN_RPWM);
 56c:	eb e0       	ldi	r30, 0x0B	; 11
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	80 81       	ld	r24, Z
 572:	8e 7f       	andi	r24, 0xFE	; 254
 574:	80 83       	st	Z, r24

00000576 <.Loc.47>:
	PORT_LPWM &= ~(1<<PIN_LPWM);
 576:	80 81       	ld	r24, Z
 578:	8d 7f       	andi	r24, 0xFD	; 253
 57a:	80 83       	st	Z, r24

0000057c <.Loc.49>:

	// Use mode 0, clkdiv = 64
	TCCR0A = 0;
 57c:	14 bc       	out	0x24, r1	; 36

0000057e <.Loc.51>:
	TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	85 bd       	out	0x25, r24	; 37

00000582 <.Loc.53>:

	// Disable PWM output
	OCR0A = 0;
 582:	17 bc       	out	0x27, r1	; 39

00000584 <.Loc.55>:
	OCR0B = 0;
 584:	18 bc       	out	0x28, r1	; 40

00000586 <.Loc.57>:

	// Interrupts on OCA, OCB and OVF
	TIMSK0 = (1<<OCIE0B) | (1<<OCIE0A) | (1<<TOIE0);
 586:	87 e0       	ldi	r24, 0x07	; 7
 588:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>

0000058c <.Loc.59>:

	sei();
 58c:	78 94       	sei

0000058e <.Loc.60>:
}
 58e:	08 95       	ret

00000590 <MotorLinks_set_percentage>:

void MotorLinks_set_percentage(signed char percentage)
{
	if (percentage >= -100 && percentage <= 100)
 590:	94 e6       	ldi	r25, 0x64	; 100
 592:	98 0f       	add	r25, r24

00000594 <.Loc.64>:
 594:	99 3c       	cpi	r25, 0xC9	; 201
 596:	c8 f4       	brcc	.+50     	; 0x5ca <.L10>

00000598 <.Loc.65>:
	{
		if (percentage >= 0)
 598:	88 23       	and	r24, r24
 59a:	64 f0       	brlt	.+24     	; 0x5b4 <.L12>

0000059c <.Loc.67>:
		{
			// Disable LPWM, calculate RPWM
			OCR0B = 0;
 59c:	18 bc       	out	0x28, r1	; 40

0000059e <.Loc.69>:
			OCR0A = (255*percentage)/100;
 59e:	28 2f       	mov	r18, r24
 5a0:	3f ef       	ldi	r19, 0xFF	; 255
 5a2:	23 03       	mulsu	r18, r19
 5a4:	c0 01       	movw	r24, r0
 5a6:	11 24       	eor	r1, r1

000005a8 <.Loc.71>:
 5a8:	64 e6       	ldi	r22, 0x64	; 100
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	0e 94 92 03 	call	0x724	; 0x724 <__divmodhi4>

000005b0 <.Loc.72>:
 5b0:	67 bd       	out	0x27, r22	; 39
 5b2:	08 95       	ret

000005b4 <.L12>:
		}
		else // percentage < 0
		{
			// Disable RPWM, calculate LPWM
			OCR0A = 0;
 5b4:	17 bc       	out	0x27, r1	; 39

000005b6 <.Loc.75>:
			OCR0B = (255*percentage)/-100;
 5b6:	28 2f       	mov	r18, r24
 5b8:	3f ef       	ldi	r19, 0xFF	; 255
 5ba:	23 03       	mulsu	r18, r19
 5bc:	c0 01       	movw	r24, r0
 5be:	11 24       	eor	r1, r1

000005c0 <.Loc.77>:
 5c0:	6c e9       	ldi	r22, 0x9C	; 156
 5c2:	7f ef       	ldi	r23, 0xFF	; 255
 5c4:	0e 94 92 03 	call	0x724	; 0x724 <__divmodhi4>

000005c8 <.Loc.78>:
 5c8:	68 bd       	out	0x28, r22	; 40

000005ca <.L10>:
		}
	}
}
 5ca:	08 95       	ret

000005cc <__vector_15>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "MotorRechts.h"

ISR(TIMER2_OVF_vect)
{
 5cc:	1f 92       	push	r1
 5ce:	1f b6       	in	r1, 0x3f	; 63
 5d0:	1f 92       	push	r1
 5d2:	11 24       	eor	r1, r1
 5d4:	8f 93       	push	r24
 5d6:	8b b7       	in	r24, 0x3b	; 59
 5d8:	8f 93       	push	r24
 5da:	ef 93       	push	r30
 5dc:	ff 93       	push	r31

000005de <.Loc.1>:
	if (OCR2A == 0 && OCR2B == 0)
 5de:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

000005e2 <.Loc.3>:
 5e2:	81 11       	cpse	r24, r1
 5e4:	0d c0       	rjmp	.+26     	; 0x600 <.L2>

000005e6 <.Loc.4>:
 5e6:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

000005ea <.Loc.5>:
 5ea:	81 11       	cpse	r24, r1
 5ec:	09 c0       	rjmp	.+18     	; 0x600 <.L2>

000005ee <.Loc.6>:
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
 5ee:	eb e0       	ldi	r30, 0x0B	; 11
 5f0:	f1 e0       	ldi	r31, 0x01	; 1
 5f2:	80 81       	ld	r24, Z
 5f4:	8b 7f       	andi	r24, 0xFB	; 251
 5f6:	80 83       	st	Z, r24

000005f8 <.Loc.8>:
		PORT_LPWM &= ~(1<<PIN_LPWM);
 5f8:	80 81       	ld	r24, Z
 5fa:	87 7f       	andi	r24, 0xF7	; 247
 5fc:	80 83       	st	Z, r24
 5fe:	0c c0       	rjmp	.+24     	; 0x618 <.L1>

00000600 <.L2>:
	}
	else if (OCR2A != 0)
 600:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000604 <.Loc.12>:
 604:	88 23       	and	r24, r24
 606:	89 f0       	breq	.+34     	; 0x62a <.L4>

00000608 <.Loc.13>:
	{
		PORT_LPWM &= ~(1<<PIN_LPWM);
 608:	eb e0       	ldi	r30, 0x0B	; 11
 60a:	f1 e0       	ldi	r31, 0x01	; 1
 60c:	80 81       	ld	r24, Z
 60e:	87 7f       	andi	r24, 0xF7	; 247
 610:	80 83       	st	Z, r24

00000612 <.Loc.15>:
		PORT_RPWM |= (1<<PIN_RPWM);
 612:	80 81       	ld	r24, Z

00000614 <.Loc.16>:
 614:	84 60       	ori	r24, 0x04	; 4
 616:	80 83       	st	Z, r24

00000618 <.L1>:
	else if (OCR2B != 0)
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
		PORT_LPWM |= (1<<PIN_LPWM);
	}
}
 618:	ff 91       	pop	r31
 61a:	ef 91       	pop	r30
 61c:	8f 91       	pop	r24
 61e:	8b bf       	out	0x3b, r24	; 59
 620:	8f 91       	pop	r24
 622:	1f 90       	pop	r1
 624:	1f be       	out	0x3f, r1	; 63
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <.L4>:
	else if (OCR2B != 0)
 62a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

0000062e <.Loc.20>:
 62e:	88 23       	and	r24, r24
 630:	99 f3       	breq	.-26     	; 0x618 <.L1>

00000632 <.Loc.21>:
		PORT_RPWM &= ~(1<<PIN_RPWM);
 632:	eb e0       	ldi	r30, 0x0B	; 11
 634:	f1 e0       	ldi	r31, 0x01	; 1
 636:	80 81       	ld	r24, Z
 638:	8b 7f       	andi	r24, 0xFB	; 251
 63a:	80 83       	st	Z, r24

0000063c <.Loc.23>:
		PORT_LPWM |= (1<<PIN_LPWM);
 63c:	80 81       	ld	r24, Z

0000063e <.Loc.24>:
 63e:	88 60       	ori	r24, 0x08	; 8
 640:	80 83       	st	Z, r24

00000642 <.Loc.25>:
}
 642:	ea cf       	rjmp	.-44     	; 0x618 <.L1>

00000644 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
 644:	8f 93       	push	r24
 646:	8f b7       	in	r24, 0x3f	; 63
 648:	8f 93       	push	r24
 64a:	8b b7       	in	r24, 0x3b	; 59
 64c:	8f 93       	push	r24
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31

00000652 <.Loc.27>:
	if (OCR2A != 255)
 652:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

00000656 <.Loc.29>:
 656:	8f 3f       	cpi	r24, 0xFF	; 255
 658:	29 f0       	breq	.+10     	; 0x664 <.L5>

0000065a <.Loc.30>:
	{
		PORT_RPWM &= ~(1<<PIN_RPWM);
 65a:	eb e0       	ldi	r30, 0x0B	; 11
 65c:	f1 e0       	ldi	r31, 0x01	; 1
 65e:	80 81       	ld	r24, Z
 660:	8b 7f       	andi	r24, 0xFB	; 251
 662:	80 83       	st	Z, r24

00000664 <.L5>:
	}
}
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	8f 91       	pop	r24
 66a:	8b bf       	out	0x3b, r24	; 59
 66c:	8f 91       	pop	r24
 66e:	8f bf       	out	0x3f, r24	; 63
 670:	8f 91       	pop	r24
 672:	18 95       	reti

00000674 <__vector_14>:

ISR(TIMER2_COMPB_vect)
{
 674:	8f 93       	push	r24
 676:	8f b7       	in	r24, 0x3f	; 63
 678:	8f 93       	push	r24
 67a:	8b b7       	in	r24, 0x3b	; 59
 67c:	8f 93       	push	r24
 67e:	ef 93       	push	r30
 680:	ff 93       	push	r31

00000682 <.Loc.34>:
	if (OCR2B != 255)
 682:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000686 <.Loc.36>:
 686:	8f 3f       	cpi	r24, 0xFF	; 255
 688:	29 f0       	breq	.+10     	; 0x694 <.L7>

0000068a <.Loc.37>:
	{
		PORT_LPWM &= ~(1<<PIN_LPWM);
 68a:	eb e0       	ldi	r30, 0x0B	; 11
 68c:	f1 e0       	ldi	r31, 0x01	; 1
 68e:	80 81       	ld	r24, Z
 690:	87 7f       	andi	r24, 0xF7	; 247
 692:	80 83       	st	Z, r24

00000694 <.L7>:
	}
}
 694:	ff 91       	pop	r31
 696:	ef 91       	pop	r30
 698:	8f 91       	pop	r24
 69a:	8b bf       	out	0x3b, r24	; 59
 69c:	8f 91       	pop	r24
 69e:	8f bf       	out	0x3f, r24	; 63
 6a0:	8f 91       	pop	r24
 6a2:	18 95       	reti

000006a4 <init_MotorRechts>:

void init_MotorRechts (void)
{
	// Config pins as output
	DDR_RPWM |= (1<<PIN_RPWM);
 6a4:	ea e0       	ldi	r30, 0x0A	; 10
 6a6:	f1 e0       	ldi	r31, 0x01	; 1
 6a8:	80 81       	ld	r24, Z

000006aa <.Loc.42>:
 6aa:	84 60       	ori	r24, 0x04	; 4
 6ac:	80 83       	st	Z, r24

000006ae <.Loc.43>:
	DDR_LPWM |= (1<<PIN_LPWM);
 6ae:	80 81       	ld	r24, Z

000006b0 <.Loc.44>:
 6b0:	88 60       	ori	r24, 0x08	; 8
 6b2:	80 83       	st	Z, r24

000006b4 <.Loc.45>:

	// Output low
	PORT_RPWM &= ~(1<<PIN_RPWM);
 6b4:	eb e0       	ldi	r30, 0x0B	; 11
 6b6:	f1 e0       	ldi	r31, 0x01	; 1
 6b8:	80 81       	ld	r24, Z
 6ba:	8b 7f       	andi	r24, 0xFB	; 251
 6bc:	80 83       	st	Z, r24

000006be <.Loc.47>:
	PORT_LPWM &= ~(1<<PIN_LPWM);
 6be:	80 81       	ld	r24, Z
 6c0:	87 7f       	andi	r24, 0xF7	; 247
 6c2:	80 83       	st	Z, r24

000006c4 <.Loc.49>:

	// Use mode 0, clkdiv = 64
	TCCR2A = 0;
 6c4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>

000006c8 <.Loc.51>:
	TCCR2B = (0<<CS22) | (1<<CS21) | (1<<CS20);
 6c8:	83 e0       	ldi	r24, 0x03	; 3
 6ca:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>

000006ce <.Loc.53>:

	// Disable PWM output
	OCR2A = 0;
 6ce:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

000006d2 <.Loc.55>:
	OCR2B = 0;
 6d2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

000006d6 <.Loc.57>:

	// Interrupts on OCA, OCB and OVF
	TIMSK2 = (1<<OCIE2B) | (1<<OCIE2A) | (1<<TOIE2);
 6d6:	87 e0       	ldi	r24, 0x07	; 7
 6d8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>

000006dc <.Loc.59>:

	sei();
 6dc:	78 94       	sei

000006de <.Loc.60>:
}
 6de:	08 95       	ret

000006e0 <MotorRechts_set_percentage>:

void MotorRechts_set_percentage(signed char percentage)
{
	if (percentage >= -100 && percentage <= 100)
 6e0:	94 e6       	ldi	r25, 0x64	; 100
 6e2:	98 0f       	add	r25, r24

000006e4 <.Loc.64>:
 6e4:	99 3c       	cpi	r25, 0xC9	; 201
 6e6:	e8 f4       	brcc	.+58     	; 0x722 <.L10>

000006e8 <.Loc.65>:
	{
		if (percentage >= 0)
 6e8:	88 23       	and	r24, r24
 6ea:	74 f0       	brlt	.+28     	; 0x708 <.L12>

000006ec <.Loc.67>:
		{
			// Disable LPWM, calculate RPWM
			OCR2B = 0;
 6ec:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

000006f0 <.Loc.69>:
			OCR2A = (255*percentage)/100;
 6f0:	28 2f       	mov	r18, r24
 6f2:	3f ef       	ldi	r19, 0xFF	; 255
 6f4:	23 03       	mulsu	r18, r19
 6f6:	c0 01       	movw	r24, r0
 6f8:	11 24       	eor	r1, r1

000006fa <.Loc.71>:
 6fa:	64 e6       	ldi	r22, 0x64	; 100
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	0e 94 92 03 	call	0x724	; 0x724 <__divmodhi4>

00000702 <.Loc.72>:
 702:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 706:	08 95       	ret

00000708 <.L12>:
		}
		else // percentage < 0
		{
			// Disable RPWM, calculate LPWM
			OCR2A = 0;
 708:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>

0000070c <.Loc.75>:
			OCR2B = (255*percentage)/-100;
 70c:	28 2f       	mov	r18, r24
 70e:	3f ef       	ldi	r19, 0xFF	; 255
 710:	23 03       	mulsu	r18, r19
 712:	c0 01       	movw	r24, r0
 714:	11 24       	eor	r1, r1

00000716 <.Loc.77>:
 716:	6c e9       	ldi	r22, 0x9C	; 156
 718:	7f ef       	ldi	r23, 0xFF	; 255
 71a:	0e 94 92 03 	call	0x724	; 0x724 <__divmodhi4>

0000071e <.Loc.78>:
 71e:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>

00000722 <.L10>:
		}
	}
}
 722:	08 95       	ret

00000724 <__divmodhi4>:
 724:	97 fb       	bst	r25, 7

00000726 <.Loc.1>:
 726:	07 2e       	mov	r0, r23

00000728 <.Loc.2>:
 728:	16 f4       	brtc	.+4      	; 0x72e <.L^B1>

0000072a <.Loc.3>:
 72a:	00 94       	com	r0

0000072c <.Loc.4>:
 72c:	07 d0       	rcall	.+14     	; 0x73c <__divmodhi4_neg1>

0000072e <.L^B1>:
 72e:	77 fd       	sbrc	r23, 7

00000730 <.Loc.6>:
 730:	09 d0       	rcall	.+18     	; 0x744 <__divmodhi4_neg2>

00000732 <.Loc.7>:
 732:	0e 94 a6 03 	call	0x74c	; 0x74c <__udivmodhi4>

00000736 <.Loc.8>:
 736:	07 fc       	sbrc	r0, 7

00000738 <.Loc.9>:
 738:	05 d0       	rcall	.+10     	; 0x744 <__divmodhi4_neg2>

0000073a <.Loc.10>:
 73a:	3e f4       	brtc	.+14     	; 0x74a <__divmodhi4_exit>

0000073c <__divmodhi4_neg1>:
 73c:	90 95       	com	r25

0000073e <.Loc.12>:
 73e:	81 95       	neg	r24

00000740 <.Loc.13>:
 740:	9f 4f       	sbci	r25, 0xFF	; 255

00000742 <.Loc.14>:
 742:	08 95       	ret

00000744 <__divmodhi4_neg2>:
 744:	70 95       	com	r23

00000746 <.Loc.16>:
 746:	61 95       	neg	r22

00000748 <.Loc.17>:
 748:	7f 4f       	sbci	r23, 0xFF	; 255

0000074a <__divmodhi4_exit>:
 74a:	08 95       	ret

0000074c <__udivmodhi4>:
 74c:	aa 1b       	sub	r26, r26

0000074e <.Loc.1>:
 74e:	bb 1b       	sub	r27, r27

00000750 <.Loc.2>:
 750:	51 e1       	ldi	r21, 0x11	; 17

00000752 <.Loc.3>:
 752:	07 c0       	rjmp	.+14     	; 0x762 <__udivmodhi4_ep>

00000754 <__udivmodhi4_loop>:
 754:	aa 1f       	adc	r26, r26

00000756 <.Loc.5>:
 756:	bb 1f       	adc	r27, r27

00000758 <.Loc.6>:
 758:	a6 17       	cp	r26, r22

0000075a <.Loc.7>:
 75a:	b7 07       	cpc	r27, r23

0000075c <.Loc.8>:
 75c:	10 f0       	brcs	.+4      	; 0x762 <__udivmodhi4_ep>

0000075e <.Loc.9>:
 75e:	a6 1b       	sub	r26, r22

00000760 <.Loc.10>:
 760:	b7 0b       	sbc	r27, r23

00000762 <__udivmodhi4_ep>:
 762:	88 1f       	adc	r24, r24

00000764 <.Loc.12>:
 764:	99 1f       	adc	r25, r25

00000766 <.Loc.13>:
 766:	5a 95       	dec	r21

00000768 <.Loc.14>:
 768:	a9 f7       	brne	.-22     	; 0x754 <__udivmodhi4_loop>

0000076a <.Loc.15>:
 76a:	80 95       	com	r24

0000076c <.Loc.16>:
 76c:	90 95       	com	r25

0000076e <.Loc.17>:
 76e:	bc 01       	movw	r22, r24

00000770 <.Loc.18>:
 770:	cd 01       	movw	r24, r26

00000772 <.Loc.19>:
 772:	08 95       	ret

00000774 <_exit>:
 774:	f8 94       	cli

00000776 <__stop_program>:
 776:	ff cf       	rjmp	.-2      	; 0x776 <__stop_program>
